
UserApp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fac  08008194  08008194  00008194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800a140  0800a140  0000a140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a170  0800a170  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a170  0800a170  0000a170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a178  0800a178  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a178  0800a178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a17c  0800a17c  0000a17c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800a180  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800a18c  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800a18c  00010074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000733c  00000000  00000000  0001007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000135c  00000000  00000000  000173bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000620  00000000  00000000  00018718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ad  00000000  00000000  00018d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000146c9  00000000  00000000  000191e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000077dd  00000000  00000000  0002d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008102c  00000000  00000000  0003508b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001814  00000000  00000000  000b60b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000b78cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08008194 <__do_global_dtors_aux>:
 8008194:	b510      	push	{r4, lr}
 8008196:	4c05      	ldr	r4, [pc, #20]	; (80081ac <__do_global_dtors_aux+0x18>)
 8008198:	7823      	ldrb	r3, [r4, #0]
 800819a:	b933      	cbnz	r3, 80081aa <__do_global_dtors_aux+0x16>
 800819c:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <__do_global_dtors_aux+0x1c>)
 800819e:	b113      	cbz	r3, 80081a6 <__do_global_dtors_aux+0x12>
 80081a0:	4804      	ldr	r0, [pc, #16]	; (80081b4 <__do_global_dtors_aux+0x20>)
 80081a2:	f3af 8000 	nop.w
 80081a6:	2301      	movs	r3, #1
 80081a8:	7023      	strb	r3, [r4, #0]
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	2000000c 	.word	0x2000000c
 80081b0:	00000000 	.word	0x00000000
 80081b4:	0800a128 	.word	0x0800a128

080081b8 <frame_dummy>:
 80081b8:	b508      	push	{r3, lr}
 80081ba:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <frame_dummy+0x10>)
 80081bc:	b11b      	cbz	r3, 80081c6 <frame_dummy+0xe>
 80081be:	4903      	ldr	r1, [pc, #12]	; (80081cc <frame_dummy+0x14>)
 80081c0:	4803      	ldr	r0, [pc, #12]	; (80081d0 <frame_dummy+0x18>)
 80081c2:	f3af 8000 	nop.w
 80081c6:	bd08      	pop	{r3, pc}
 80081c8:	00000000 	.word	0x00000000
 80081cc:	20000010 	.word	0x20000010
 80081d0:	0800a128 	.word	0x0800a128

080081d4 <__aeabi_uldivmod>:
 80081d4:	b953      	cbnz	r3, 80081ec <__aeabi_uldivmod+0x18>
 80081d6:	b94a      	cbnz	r2, 80081ec <__aeabi_uldivmod+0x18>
 80081d8:	2900      	cmp	r1, #0
 80081da:	bf08      	it	eq
 80081dc:	2800      	cmpeq	r0, #0
 80081de:	bf1c      	itt	ne
 80081e0:	f04f 31ff 	movne.w	r1, #4294967295
 80081e4:	f04f 30ff 	movne.w	r0, #4294967295
 80081e8:	f000 b970 	b.w	80084cc <__aeabi_idiv0>
 80081ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80081f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081f4:	f000 f806 	bl	8008204 <__udivmoddi4>
 80081f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008200:	b004      	add	sp, #16
 8008202:	4770      	bx	lr

08008204 <__udivmoddi4>:
 8008204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008208:	9e08      	ldr	r6, [sp, #32]
 800820a:	460d      	mov	r5, r1
 800820c:	4604      	mov	r4, r0
 800820e:	460f      	mov	r7, r1
 8008210:	2b00      	cmp	r3, #0
 8008212:	d14a      	bne.n	80082aa <__udivmoddi4+0xa6>
 8008214:	428a      	cmp	r2, r1
 8008216:	4694      	mov	ip, r2
 8008218:	d965      	bls.n	80082e6 <__udivmoddi4+0xe2>
 800821a:	fab2 f382 	clz	r3, r2
 800821e:	b143      	cbz	r3, 8008232 <__udivmoddi4+0x2e>
 8008220:	fa02 fc03 	lsl.w	ip, r2, r3
 8008224:	f1c3 0220 	rsb	r2, r3, #32
 8008228:	409f      	lsls	r7, r3
 800822a:	fa20 f202 	lsr.w	r2, r0, r2
 800822e:	4317      	orrs	r7, r2
 8008230:	409c      	lsls	r4, r3
 8008232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8008236:	fa1f f58c 	uxth.w	r5, ip
 800823a:	fbb7 f1fe 	udiv	r1, r7, lr
 800823e:	0c22      	lsrs	r2, r4, #16
 8008240:	fb0e 7711 	mls	r7, lr, r1, r7
 8008244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8008248:	fb01 f005 	mul.w	r0, r1, r5
 800824c:	4290      	cmp	r0, r2
 800824e:	d90a      	bls.n	8008266 <__udivmoddi4+0x62>
 8008250:	eb1c 0202 	adds.w	r2, ip, r2
 8008254:	f101 37ff 	add.w	r7, r1, #4294967295
 8008258:	f080 811c 	bcs.w	8008494 <__udivmoddi4+0x290>
 800825c:	4290      	cmp	r0, r2
 800825e:	f240 8119 	bls.w	8008494 <__udivmoddi4+0x290>
 8008262:	3902      	subs	r1, #2
 8008264:	4462      	add	r2, ip
 8008266:	1a12      	subs	r2, r2, r0
 8008268:	b2a4      	uxth	r4, r4
 800826a:	fbb2 f0fe 	udiv	r0, r2, lr
 800826e:	fb0e 2210 	mls	r2, lr, r0, r2
 8008272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008276:	fb00 f505 	mul.w	r5, r0, r5
 800827a:	42a5      	cmp	r5, r4
 800827c:	d90a      	bls.n	8008294 <__udivmoddi4+0x90>
 800827e:	eb1c 0404 	adds.w	r4, ip, r4
 8008282:	f100 32ff 	add.w	r2, r0, #4294967295
 8008286:	f080 8107 	bcs.w	8008498 <__udivmoddi4+0x294>
 800828a:	42a5      	cmp	r5, r4
 800828c:	f240 8104 	bls.w	8008498 <__udivmoddi4+0x294>
 8008290:	4464      	add	r4, ip
 8008292:	3802      	subs	r0, #2
 8008294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8008298:	1b64      	subs	r4, r4, r5
 800829a:	2100      	movs	r1, #0
 800829c:	b11e      	cbz	r6, 80082a6 <__udivmoddi4+0xa2>
 800829e:	40dc      	lsrs	r4, r3
 80082a0:	2300      	movs	r3, #0
 80082a2:	e9c6 4300 	strd	r4, r3, [r6]
 80082a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082aa:	428b      	cmp	r3, r1
 80082ac:	d908      	bls.n	80082c0 <__udivmoddi4+0xbc>
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	f000 80ed 	beq.w	800848e <__udivmoddi4+0x28a>
 80082b4:	2100      	movs	r1, #0
 80082b6:	e9c6 0500 	strd	r0, r5, [r6]
 80082ba:	4608      	mov	r0, r1
 80082bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c0:	fab3 f183 	clz	r1, r3
 80082c4:	2900      	cmp	r1, #0
 80082c6:	d149      	bne.n	800835c <__udivmoddi4+0x158>
 80082c8:	42ab      	cmp	r3, r5
 80082ca:	d302      	bcc.n	80082d2 <__udivmoddi4+0xce>
 80082cc:	4282      	cmp	r2, r0
 80082ce:	f200 80f8 	bhi.w	80084c2 <__udivmoddi4+0x2be>
 80082d2:	1a84      	subs	r4, r0, r2
 80082d4:	eb65 0203 	sbc.w	r2, r5, r3
 80082d8:	2001      	movs	r0, #1
 80082da:	4617      	mov	r7, r2
 80082dc:	2e00      	cmp	r6, #0
 80082de:	d0e2      	beq.n	80082a6 <__udivmoddi4+0xa2>
 80082e0:	e9c6 4700 	strd	r4, r7, [r6]
 80082e4:	e7df      	b.n	80082a6 <__udivmoddi4+0xa2>
 80082e6:	b902      	cbnz	r2, 80082ea <__udivmoddi4+0xe6>
 80082e8:	deff      	udf	#255	; 0xff
 80082ea:	fab2 f382 	clz	r3, r2
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f040 8090 	bne.w	8008414 <__udivmoddi4+0x210>
 80082f4:	1a8a      	subs	r2, r1, r2
 80082f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80082fa:	fa1f fe8c 	uxth.w	lr, ip
 80082fe:	2101      	movs	r1, #1
 8008300:	fbb2 f5f7 	udiv	r5, r2, r7
 8008304:	fb07 2015 	mls	r0, r7, r5, r2
 8008308:	0c22      	lsrs	r2, r4, #16
 800830a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800830e:	fb0e f005 	mul.w	r0, lr, r5
 8008312:	4290      	cmp	r0, r2
 8008314:	d908      	bls.n	8008328 <__udivmoddi4+0x124>
 8008316:	eb1c 0202 	adds.w	r2, ip, r2
 800831a:	f105 38ff 	add.w	r8, r5, #4294967295
 800831e:	d202      	bcs.n	8008326 <__udivmoddi4+0x122>
 8008320:	4290      	cmp	r0, r2
 8008322:	f200 80cb 	bhi.w	80084bc <__udivmoddi4+0x2b8>
 8008326:	4645      	mov	r5, r8
 8008328:	1a12      	subs	r2, r2, r0
 800832a:	b2a4      	uxth	r4, r4
 800832c:	fbb2 f0f7 	udiv	r0, r2, r7
 8008330:	fb07 2210 	mls	r2, r7, r0, r2
 8008334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008338:	fb0e fe00 	mul.w	lr, lr, r0
 800833c:	45a6      	cmp	lr, r4
 800833e:	d908      	bls.n	8008352 <__udivmoddi4+0x14e>
 8008340:	eb1c 0404 	adds.w	r4, ip, r4
 8008344:	f100 32ff 	add.w	r2, r0, #4294967295
 8008348:	d202      	bcs.n	8008350 <__udivmoddi4+0x14c>
 800834a:	45a6      	cmp	lr, r4
 800834c:	f200 80bb 	bhi.w	80084c6 <__udivmoddi4+0x2c2>
 8008350:	4610      	mov	r0, r2
 8008352:	eba4 040e 	sub.w	r4, r4, lr
 8008356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800835a:	e79f      	b.n	800829c <__udivmoddi4+0x98>
 800835c:	f1c1 0720 	rsb	r7, r1, #32
 8008360:	408b      	lsls	r3, r1
 8008362:	fa22 fc07 	lsr.w	ip, r2, r7
 8008366:	ea4c 0c03 	orr.w	ip, ip, r3
 800836a:	fa05 f401 	lsl.w	r4, r5, r1
 800836e:	fa20 f307 	lsr.w	r3, r0, r7
 8008372:	40fd      	lsrs	r5, r7
 8008374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8008378:	4323      	orrs	r3, r4
 800837a:	fbb5 f8f9 	udiv	r8, r5, r9
 800837e:	fa1f fe8c 	uxth.w	lr, ip
 8008382:	fb09 5518 	mls	r5, r9, r8, r5
 8008386:	0c1c      	lsrs	r4, r3, #16
 8008388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800838c:	fb08 f50e 	mul.w	r5, r8, lr
 8008390:	42a5      	cmp	r5, r4
 8008392:	fa02 f201 	lsl.w	r2, r2, r1
 8008396:	fa00 f001 	lsl.w	r0, r0, r1
 800839a:	d90b      	bls.n	80083b4 <__udivmoddi4+0x1b0>
 800839c:	eb1c 0404 	adds.w	r4, ip, r4
 80083a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80083a4:	f080 8088 	bcs.w	80084b8 <__udivmoddi4+0x2b4>
 80083a8:	42a5      	cmp	r5, r4
 80083aa:	f240 8085 	bls.w	80084b8 <__udivmoddi4+0x2b4>
 80083ae:	f1a8 0802 	sub.w	r8, r8, #2
 80083b2:	4464      	add	r4, ip
 80083b4:	1b64      	subs	r4, r4, r5
 80083b6:	b29d      	uxth	r5, r3
 80083b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80083bc:	fb09 4413 	mls	r4, r9, r3, r4
 80083c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80083c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80083c8:	45a6      	cmp	lr, r4
 80083ca:	d908      	bls.n	80083de <__udivmoddi4+0x1da>
 80083cc:	eb1c 0404 	adds.w	r4, ip, r4
 80083d0:	f103 35ff 	add.w	r5, r3, #4294967295
 80083d4:	d26c      	bcs.n	80084b0 <__udivmoddi4+0x2ac>
 80083d6:	45a6      	cmp	lr, r4
 80083d8:	d96a      	bls.n	80084b0 <__udivmoddi4+0x2ac>
 80083da:	3b02      	subs	r3, #2
 80083dc:	4464      	add	r4, ip
 80083de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80083e2:	fba3 9502 	umull	r9, r5, r3, r2
 80083e6:	eba4 040e 	sub.w	r4, r4, lr
 80083ea:	42ac      	cmp	r4, r5
 80083ec:	46c8      	mov	r8, r9
 80083ee:	46ae      	mov	lr, r5
 80083f0:	d356      	bcc.n	80084a0 <__udivmoddi4+0x29c>
 80083f2:	d053      	beq.n	800849c <__udivmoddi4+0x298>
 80083f4:	b156      	cbz	r6, 800840c <__udivmoddi4+0x208>
 80083f6:	ebb0 0208 	subs.w	r2, r0, r8
 80083fa:	eb64 040e 	sbc.w	r4, r4, lr
 80083fe:	fa04 f707 	lsl.w	r7, r4, r7
 8008402:	40ca      	lsrs	r2, r1
 8008404:	40cc      	lsrs	r4, r1
 8008406:	4317      	orrs	r7, r2
 8008408:	e9c6 7400 	strd	r7, r4, [r6]
 800840c:	4618      	mov	r0, r3
 800840e:	2100      	movs	r1, #0
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	f1c3 0120 	rsb	r1, r3, #32
 8008418:	fa02 fc03 	lsl.w	ip, r2, r3
 800841c:	fa20 f201 	lsr.w	r2, r0, r1
 8008420:	fa25 f101 	lsr.w	r1, r5, r1
 8008424:	409d      	lsls	r5, r3
 8008426:	432a      	orrs	r2, r5
 8008428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800842c:	fa1f fe8c 	uxth.w	lr, ip
 8008430:	fbb1 f0f7 	udiv	r0, r1, r7
 8008434:	fb07 1510 	mls	r5, r7, r0, r1
 8008438:	0c11      	lsrs	r1, r2, #16
 800843a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800843e:	fb00 f50e 	mul.w	r5, r0, lr
 8008442:	428d      	cmp	r5, r1
 8008444:	fa04 f403 	lsl.w	r4, r4, r3
 8008448:	d908      	bls.n	800845c <__udivmoddi4+0x258>
 800844a:	eb1c 0101 	adds.w	r1, ip, r1
 800844e:	f100 38ff 	add.w	r8, r0, #4294967295
 8008452:	d22f      	bcs.n	80084b4 <__udivmoddi4+0x2b0>
 8008454:	428d      	cmp	r5, r1
 8008456:	d92d      	bls.n	80084b4 <__udivmoddi4+0x2b0>
 8008458:	3802      	subs	r0, #2
 800845a:	4461      	add	r1, ip
 800845c:	1b49      	subs	r1, r1, r5
 800845e:	b292      	uxth	r2, r2
 8008460:	fbb1 f5f7 	udiv	r5, r1, r7
 8008464:	fb07 1115 	mls	r1, r7, r5, r1
 8008468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800846c:	fb05 f10e 	mul.w	r1, r5, lr
 8008470:	4291      	cmp	r1, r2
 8008472:	d908      	bls.n	8008486 <__udivmoddi4+0x282>
 8008474:	eb1c 0202 	adds.w	r2, ip, r2
 8008478:	f105 38ff 	add.w	r8, r5, #4294967295
 800847c:	d216      	bcs.n	80084ac <__udivmoddi4+0x2a8>
 800847e:	4291      	cmp	r1, r2
 8008480:	d914      	bls.n	80084ac <__udivmoddi4+0x2a8>
 8008482:	3d02      	subs	r5, #2
 8008484:	4462      	add	r2, ip
 8008486:	1a52      	subs	r2, r2, r1
 8008488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800848c:	e738      	b.n	8008300 <__udivmoddi4+0xfc>
 800848e:	4631      	mov	r1, r6
 8008490:	4630      	mov	r0, r6
 8008492:	e708      	b.n	80082a6 <__udivmoddi4+0xa2>
 8008494:	4639      	mov	r1, r7
 8008496:	e6e6      	b.n	8008266 <__udivmoddi4+0x62>
 8008498:	4610      	mov	r0, r2
 800849a:	e6fb      	b.n	8008294 <__udivmoddi4+0x90>
 800849c:	4548      	cmp	r0, r9
 800849e:	d2a9      	bcs.n	80083f4 <__udivmoddi4+0x1f0>
 80084a0:	ebb9 0802 	subs.w	r8, r9, r2
 80084a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80084a8:	3b01      	subs	r3, #1
 80084aa:	e7a3      	b.n	80083f4 <__udivmoddi4+0x1f0>
 80084ac:	4645      	mov	r5, r8
 80084ae:	e7ea      	b.n	8008486 <__udivmoddi4+0x282>
 80084b0:	462b      	mov	r3, r5
 80084b2:	e794      	b.n	80083de <__udivmoddi4+0x1da>
 80084b4:	4640      	mov	r0, r8
 80084b6:	e7d1      	b.n	800845c <__udivmoddi4+0x258>
 80084b8:	46d0      	mov	r8, sl
 80084ba:	e77b      	b.n	80083b4 <__udivmoddi4+0x1b0>
 80084bc:	3d02      	subs	r5, #2
 80084be:	4462      	add	r2, ip
 80084c0:	e732      	b.n	8008328 <__udivmoddi4+0x124>
 80084c2:	4608      	mov	r0, r1
 80084c4:	e70a      	b.n	80082dc <__udivmoddi4+0xd8>
 80084c6:	4464      	add	r4, ip
 80084c8:	3802      	subs	r0, #2
 80084ca:	e742      	b.n	8008352 <__udivmoddi4+0x14e>

080084cc <__aeabi_idiv0>:
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084d0:	b5b0      	push	{r4, r5, r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084d6:	f000 fa13 	bl	8008900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084da:	f000 f81f 	bl	800851c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084de:	f000 f8a7 	bl	8008630 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80084e2:	f000 f87b 	bl	80085dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char Hello[] = "Hello From user App\r\n";
 80084e6:	4b0b      	ldr	r3, [pc, #44]	; (8008514 <main+0x44>)
 80084e8:	463c      	mov	r4, r7
 80084ea:	461d      	mov	r5, r3
 80084ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80084ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80084f4:	6020      	str	r0, [r4, #0]
 80084f6:	3404      	adds	r4, #4
 80084f8:	8021      	strh	r1, [r4, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_UART_Transmit(&huart2, (uint8_t *)Hello, sizeof(Hello), HAL_MAX_DELAY);
 80084fa:	4639      	mov	r1, r7
 80084fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008500:	2216      	movs	r2, #22
 8008502:	4805      	ldr	r0, [pc, #20]	; (8008518 <main+0x48>)
 8008504:	f001 fa28 	bl	8009958 <HAL_UART_Transmit>
	  HAL_Delay(500);
 8008508:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800850c:	f000 fa6a 	bl	80089e4 <HAL_Delay>
	  HAL_UART_Transmit(&huart2, (uint8_t *)Hello, sizeof(Hello), HAL_MAX_DELAY);
 8008510:	e7f3      	b.n	80084fa <main+0x2a>
 8008512:	bf00      	nop
 8008514:	0800a140 	.word	0x0800a140
 8008518:	20000028 	.word	0x20000028

0800851c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b094      	sub	sp, #80	; 0x50
 8008520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008522:	f107 0320 	add.w	r3, r7, #32
 8008526:	2230      	movs	r2, #48	; 0x30
 8008528:	2100      	movs	r1, #0
 800852a:	4618      	mov	r0, r3
 800852c:	f001 fdd0 	bl	800a0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008530:	f107 030c 	add.w	r3, r7, #12
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]
 8008538:	605a      	str	r2, [r3, #4]
 800853a:	609a      	str	r2, [r3, #8]
 800853c:	60da      	str	r2, [r3, #12]
 800853e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008540:	2300      	movs	r3, #0
 8008542:	60bb      	str	r3, [r7, #8]
 8008544:	4b23      	ldr	r3, [pc, #140]	; (80085d4 <SystemClock_Config+0xb8>)
 8008546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008548:	4a22      	ldr	r2, [pc, #136]	; (80085d4 <SystemClock_Config+0xb8>)
 800854a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854e:	6413      	str	r3, [r2, #64]	; 0x40
 8008550:	4b20      	ldr	r3, [pc, #128]	; (80085d4 <SystemClock_Config+0xb8>)
 8008552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800855c:	2300      	movs	r3, #0
 800855e:	607b      	str	r3, [r7, #4]
 8008560:	4b1d      	ldr	r3, [pc, #116]	; (80085d8 <SystemClock_Config+0xbc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008568:	4a1b      	ldr	r2, [pc, #108]	; (80085d8 <SystemClock_Config+0xbc>)
 800856a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800856e:	6013      	str	r3, [r2, #0]
 8008570:	4b19      	ldr	r3, [pc, #100]	; (80085d8 <SystemClock_Config+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008578:	607b      	str	r3, [r7, #4]
 800857a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800857c:	2302      	movs	r3, #2
 800857e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008580:	2301      	movs	r3, #1
 8008582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008584:	2310      	movs	r3, #16
 8008586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008588:	2300      	movs	r3, #0
 800858a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800858c:	f107 0320 	add.w	r3, r7, #32
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fd39 	bl	8009008 <HAL_RCC_OscConfig>
 8008596:	4603      	mov	r3, r0
 8008598:	2b00      	cmp	r3, #0
 800859a:	d001      	beq.n	80085a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800859c:	f000 f8c0 	bl	8008720 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085a0:	230f      	movs	r3, #15
 80085a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80085a4:	2300      	movs	r3, #0
 80085a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085a8:	2300      	movs	r3, #0
 80085aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80085ac:	2300      	movs	r3, #0
 80085ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80085b0:	2300      	movs	r3, #0
 80085b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80085b4:	f107 030c 	add.w	r3, r7, #12
 80085b8:	2100      	movs	r1, #0
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 ff9c 	bl	80094f8 <HAL_RCC_ClockConfig>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d001      	beq.n	80085ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80085c6:	f000 f8ab 	bl	8008720 <Error_Handler>
  }
}
 80085ca:	bf00      	nop
 80085cc:	3750      	adds	r7, #80	; 0x50
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
 80085d2:	bf00      	nop
 80085d4:	40023800 	.word	0x40023800
 80085d8:	40007000 	.word	0x40007000

080085dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80085e0:	4b11      	ldr	r3, [pc, #68]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 80085e2:	4a12      	ldr	r2, [pc, #72]	; (800862c <MX_USART2_UART_Init+0x50>)
 80085e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80085e6:	4b10      	ldr	r3, [pc, #64]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 80085e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80085ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80085ee:	4b0e      	ldr	r3, [pc, #56]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 80085f0:	2200      	movs	r2, #0
 80085f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80085f4:	4b0c      	ldr	r3, [pc, #48]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80085fa:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 80085fc:	2200      	movs	r2, #0
 80085fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008600:	4b09      	ldr	r3, [pc, #36]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 8008602:	220c      	movs	r2, #12
 8008604:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008606:	4b08      	ldr	r3, [pc, #32]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 8008608:	2200      	movs	r2, #0
 800860a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800860c:	4b06      	ldr	r3, [pc, #24]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 800860e:	2200      	movs	r2, #0
 8008610:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008612:	4805      	ldr	r0, [pc, #20]	; (8008628 <MX_USART2_UART_Init+0x4c>)
 8008614:	f001 f950 	bl	80098b8 <HAL_UART_Init>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800861e:	f000 f87f 	bl	8008720 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008622:	bf00      	nop
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20000028 	.word	0x20000028
 800862c:	40004400 	.word	0x40004400

08008630 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08a      	sub	sp, #40	; 0x28
 8008634:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008636:	f107 0314 	add.w	r3, r7, #20
 800863a:	2200      	movs	r2, #0
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	605a      	str	r2, [r3, #4]
 8008640:	609a      	str	r2, [r3, #8]
 8008642:	60da      	str	r2, [r3, #12]
 8008644:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008646:	2300      	movs	r3, #0
 8008648:	613b      	str	r3, [r7, #16]
 800864a:	4b32      	ldr	r3, [pc, #200]	; (8008714 <MX_GPIO_Init+0xe4>)
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4a31      	ldr	r2, [pc, #196]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008650:	f043 0304 	orr.w	r3, r3, #4
 8008654:	6313      	str	r3, [r2, #48]	; 0x30
 8008656:	4b2f      	ldr	r3, [pc, #188]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	613b      	str	r3, [r7, #16]
 8008660:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]
 8008666:	4b2b      	ldr	r3, [pc, #172]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866a:	4a2a      	ldr	r2, [pc, #168]	; (8008714 <MX_GPIO_Init+0xe4>)
 800866c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008670:	6313      	str	r3, [r2, #48]	; 0x30
 8008672:	4b28      	ldr	r3, [pc, #160]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800867a:	60fb      	str	r3, [r7, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	4b24      	ldr	r3, [pc, #144]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	4a23      	ldr	r2, [pc, #140]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	6313      	str	r3, [r2, #48]	; 0x30
 800868e:	4b21      	ldr	r3, [pc, #132]	; (8008714 <MX_GPIO_Init+0xe4>)
 8008690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	60bb      	str	r3, [r7, #8]
 8008698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
 800869e:	4b1d      	ldr	r3, [pc, #116]	; (8008714 <MX_GPIO_Init+0xe4>)
 80086a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a2:	4a1c      	ldr	r2, [pc, #112]	; (8008714 <MX_GPIO_Init+0xe4>)
 80086a4:	f043 0302 	orr.w	r3, r3, #2
 80086a8:	6313      	str	r3, [r2, #48]	; 0x30
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <MX_GPIO_Init+0xe4>)
 80086ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ae:	f003 0302 	and.w	r3, r3, #2
 80086b2:	607b      	str	r3, [r7, #4]
 80086b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BoardLed_GPIO_Port, BoardLed_Pin, GPIO_PIN_RESET);
 80086b6:	2200      	movs	r2, #0
 80086b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80086bc:	4816      	ldr	r0, [pc, #88]	; (8008718 <MX_GPIO_Init+0xe8>)
 80086be:	f000 fc4b 	bl	8008f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BoardLed_Pin */
  GPIO_InitStruct.Pin = BoardLed_Pin;
 80086c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086c8:	2301      	movs	r3, #1
 80086ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d0:	2300      	movs	r3, #0
 80086d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BoardLed_GPIO_Port, &GPIO_InitStruct);
 80086d4:	f107 0314 	add.w	r3, r7, #20
 80086d8:	4619      	mov	r1, r3
 80086da:	480f      	ldr	r0, [pc, #60]	; (8008718 <MX_GPIO_Init+0xe8>)
 80086dc:	f000 fab8 	bl	8008c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTIButton_Pin */
  GPIO_InitStruct.Pin = EXTIButton_Pin;
 80086e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80086e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80086ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EXTIButton_GPIO_Port, &GPIO_InitStruct);
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	4619      	mov	r1, r3
 80086f6:	4809      	ldr	r0, [pc, #36]	; (800871c <MX_GPIO_Init+0xec>)
 80086f8:	f000 faaa 	bl	8008c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	2028      	movs	r0, #40	; 0x28
 8008702:	f000 fa6e 	bl	8008be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008706:	2028      	movs	r0, #40	; 0x28
 8008708:	f000 fa87 	bl	8008c1a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800870c:	bf00      	nop
 800870e:	3728      	adds	r7, #40	; 0x28
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40023800 	.word	0x40023800
 8008718:	40020800 	.word	0x40020800
 800871c:	40020400 	.word	0x40020400

08008720 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008720:	b480      	push	{r7}
 8008722:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008724:	b672      	cpsid	i
}
 8008726:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008728:	e7fe      	b.n	8008728 <Error_Handler+0x8>
	...

0800872c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008732:	2300      	movs	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
 8008736:	4b10      	ldr	r3, [pc, #64]	; (8008778 <HAL_MspInit+0x4c>)
 8008738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800873a:	4a0f      	ldr	r2, [pc, #60]	; (8008778 <HAL_MspInit+0x4c>)
 800873c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008740:	6453      	str	r3, [r2, #68]	; 0x44
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <HAL_MspInit+0x4c>)
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800874a:	607b      	str	r3, [r7, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	603b      	str	r3, [r7, #0]
 8008752:	4b09      	ldr	r3, [pc, #36]	; (8008778 <HAL_MspInit+0x4c>)
 8008754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008756:	4a08      	ldr	r2, [pc, #32]	; (8008778 <HAL_MspInit+0x4c>)
 8008758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800875c:	6413      	str	r3, [r2, #64]	; 0x40
 800875e:	4b06      	ldr	r3, [pc, #24]	; (8008778 <HAL_MspInit+0x4c>)
 8008760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008766:	603b      	str	r3, [r7, #0]
 8008768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40023800 	.word	0x40023800

0800877c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b08a      	sub	sp, #40	; 0x28
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008784:	f107 0314 	add.w	r3, r7, #20
 8008788:	2200      	movs	r2, #0
 800878a:	601a      	str	r2, [r3, #0]
 800878c:	605a      	str	r2, [r3, #4]
 800878e:	609a      	str	r2, [r3, #8]
 8008790:	60da      	str	r2, [r3, #12]
 8008792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a19      	ldr	r2, [pc, #100]	; (8008800 <HAL_UART_MspInit+0x84>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d12b      	bne.n	80087f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800879e:	2300      	movs	r3, #0
 80087a0:	613b      	str	r3, [r7, #16]
 80087a2:	4b18      	ldr	r3, [pc, #96]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a6:	4a17      	ldr	r2, [pc, #92]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ac:	6413      	str	r3, [r2, #64]	; 0x40
 80087ae:	4b15      	ldr	r3, [pc, #84]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b6:	613b      	str	r3, [r7, #16]
 80087b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
 80087be:	4b11      	ldr	r3, [pc, #68]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087c2:	4a10      	ldr	r2, [pc, #64]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087c4:	f043 0301 	orr.w	r3, r3, #1
 80087c8:	6313      	str	r3, [r2, #48]	; 0x30
 80087ca:	4b0e      	ldr	r3, [pc, #56]	; (8008804 <HAL_UART_MspInit+0x88>)
 80087cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ce:	f003 0301 	and.w	r3, r3, #1
 80087d2:	60fb      	str	r3, [r7, #12]
 80087d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80087d6:	230c      	movs	r3, #12
 80087d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087da:	2302      	movs	r3, #2
 80087dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087de:	2300      	movs	r3, #0
 80087e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087e2:	2303      	movs	r3, #3
 80087e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80087e6:	2307      	movs	r3, #7
 80087e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087ea:	f107 0314 	add.w	r3, r7, #20
 80087ee:	4619      	mov	r1, r3
 80087f0:	4805      	ldr	r0, [pc, #20]	; (8008808 <HAL_UART_MspInit+0x8c>)
 80087f2:	f000 fa2d 	bl	8008c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80087f6:	bf00      	nop
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	40004400 	.word	0x40004400
 8008804:	40023800 	.word	0x40023800
 8008808:	40020000 	.word	0x40020000

0800880c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800880c:	b480      	push	{r7}
 800880e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008810:	e7fe      	b.n	8008810 <NMI_Handler+0x4>

08008812 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008812:	b480      	push	{r7}
 8008814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008816:	e7fe      	b.n	8008816 <HardFault_Handler+0x4>

08008818 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008818:	b480      	push	{r7}
 800881a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800881c:	e7fe      	b.n	800881c <MemManage_Handler+0x4>

0800881e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800881e:	b480      	push	{r7}
 8008820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008822:	e7fe      	b.n	8008822 <BusFault_Handler+0x4>

08008824 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008824:	b480      	push	{r7}
 8008826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008828:	e7fe      	b.n	8008828 <UsageFault_Handler+0x4>

0800882a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800882a:	b480      	push	{r7}
 800882c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800882e:	bf00      	nop
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800883c:	bf00      	nop
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008846:	b480      	push	{r7}
 8008848:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800884a:	bf00      	nop
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008858:	f000 f8a4 	bl	80089a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800885c:	bf00      	nop
 800885e:	bd80      	pop	{r7, pc}

08008860 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(BoardLed_GPIO_Port, BoardLed_Pin);
 8008864:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008868:	4804      	ldr	r0, [pc, #16]	; (800887c <EXTI15_10_IRQHandler+0x1c>)
 800886a:	f000 fb8e 	bl	8008f8a <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTIButton_Pin);
 800886e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008872:	f000 fba5 	bl	8008fc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008876:	bf00      	nop
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40020800 	.word	0x40020800

08008880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <SystemInit+0x24>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <SystemInit+0x24>)
 800888c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8008894:	4b03      	ldr	r3, [pc, #12]	; (80088a4 <SystemInit+0x24>)
 8008896:	4a04      	ldr	r2, [pc, #16]	; (80088a8 <SystemInit+0x28>)
 8008898:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 800889a:	bf00      	nop
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	e000ed00 	.word	0xe000ed00
 80088a8:	08008000 	.word	0x08008000

080088ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80088ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80088b0:	f7ff ffe6 	bl	8008880 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80088b4:	480c      	ldr	r0, [pc, #48]	; (80088e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80088b6:	490d      	ldr	r1, [pc, #52]	; (80088ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80088b8:	4a0d      	ldr	r2, [pc, #52]	; (80088f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80088ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80088bc:	e002      	b.n	80088c4 <LoopCopyDataInit>

080088be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80088be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80088c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80088c2:	3304      	adds	r3, #4

080088c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80088c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80088c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80088c8:	d3f9      	bcc.n	80088be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80088ca:	4a0a      	ldr	r2, [pc, #40]	; (80088f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80088cc:	4c0a      	ldr	r4, [pc, #40]	; (80088f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80088ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088d0:	e001      	b.n	80088d6 <LoopFillZerobss>

080088d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088d4:	3204      	adds	r2, #4

080088d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088d8:	d3fb      	bcc.n	80088d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80088da:	f001 fc01 	bl	800a0e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088de:	f7ff fdf7 	bl	80084d0 <main>
  bx  lr    
 80088e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80088e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80088e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80088f0:	0800a180 	.word	0x0800a180
  ldr r2, =_sbss
 80088f4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80088f8:	20000074 	.word	0x20000074

080088fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088fc:	e7fe      	b.n	80088fc <ADC_IRQHandler>
	...

08008900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <HAL_Init+0x40>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a0d      	ldr	r2, [pc, #52]	; (8008940 <HAL_Init+0x40>)
 800890a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800890e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <HAL_Init+0x40>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <HAL_Init+0x40>)
 8008916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800891a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800891c:	4b08      	ldr	r3, [pc, #32]	; (8008940 <HAL_Init+0x40>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a07      	ldr	r2, [pc, #28]	; (8008940 <HAL_Init+0x40>)
 8008922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008928:	2003      	movs	r0, #3
 800892a:	f000 f94f 	bl	8008bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800892e:	200f      	movs	r0, #15
 8008930:	f000 f808 	bl	8008944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008934:	f7ff fefa 	bl	800872c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	40023c00 	.word	0x40023c00

08008944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800894c:	4b12      	ldr	r3, [pc, #72]	; (8008998 <HAL_InitTick+0x54>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_InitTick+0x58>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4619      	mov	r1, r3
 8008956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800895a:	fbb3 f3f1 	udiv	r3, r3, r1
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f967 	bl	8008c36 <HAL_SYSTICK_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e00e      	b.n	8008990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b0f      	cmp	r3, #15
 8008976:	d80a      	bhi.n	800898e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008978:	2200      	movs	r2, #0
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	f000 f92f 	bl	8008be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <HAL_InitTick+0x5c>)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	e000      	b.n	8008990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000000 	.word	0x20000000
 800899c:	20000008 	.word	0x20000008
 80089a0:	20000004 	.word	0x20000004

080089a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_IncTick+0x20>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <HAL_IncTick+0x24>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4413      	add	r3, r2
 80089b4:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <HAL_IncTick+0x24>)
 80089b6:	6013      	str	r3, [r2, #0]
}
 80089b8:	bf00      	nop
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000008 	.word	0x20000008
 80089c8:	20000070 	.word	0x20000070

080089cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  return uwTick;
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <HAL_GetTick+0x14>)
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000070 	.word	0x20000070

080089e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089ec:	f7ff ffee 	bl	80089cc <HAL_GetTick>
 80089f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d005      	beq.n	8008a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80089fe:	4b0a      	ldr	r3, [pc, #40]	; (8008a28 <HAL_Delay+0x44>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a0a:	bf00      	nop
 8008a0c:	f7ff ffde 	bl	80089cc <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d8f7      	bhi.n	8008a0c <HAL_Delay+0x28>
  {
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop
 8008a28:	20000008 	.word	0x20000008

08008a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b085      	sub	sp, #20
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a3c:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <__NVIC_SetPriorityGrouping+0x44>)
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a48:	4013      	ands	r3, r2
 8008a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a5e:	4a04      	ldr	r2, [pc, #16]	; (8008a70 <__NVIC_SetPriorityGrouping+0x44>)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	60d3      	str	r3, [r2, #12]
}
 8008a64:	bf00      	nop
 8008a66:	3714      	adds	r7, #20
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr
 8008a70:	e000ed00 	.word	0xe000ed00

08008a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a74:	b480      	push	{r7}
 8008a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <__NVIC_GetPriorityGrouping+0x18>)
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	0a1b      	lsrs	r3, r3, #8
 8008a7e:	f003 0307 	and.w	r3, r3, #7
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	e000ed00 	.word	0xe000ed00

08008a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	4603      	mov	r3, r0
 8008a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	db0b      	blt.n	8008aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008aa2:	79fb      	ldrb	r3, [r7, #7]
 8008aa4:	f003 021f 	and.w	r2, r3, #31
 8008aa8:	4907      	ldr	r1, [pc, #28]	; (8008ac8 <__NVIC_EnableIRQ+0x38>)
 8008aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aae:	095b      	lsrs	r3, r3, #5
 8008ab0:	2001      	movs	r0, #1
 8008ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8008ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
 8008ac6:	bf00      	nop
 8008ac8:	e000e100 	.word	0xe000e100

08008acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	6039      	str	r1, [r7, #0]
 8008ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	db0a      	blt.n	8008af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	490c      	ldr	r1, [pc, #48]	; (8008b18 <__NVIC_SetPriority+0x4c>)
 8008ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aea:	0112      	lsls	r2, r2, #4
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	440b      	add	r3, r1
 8008af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008af4:	e00a      	b.n	8008b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	4908      	ldr	r1, [pc, #32]	; (8008b1c <__NVIC_SetPriority+0x50>)
 8008afc:	79fb      	ldrb	r3, [r7, #7]
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	3b04      	subs	r3, #4
 8008b04:	0112      	lsls	r2, r2, #4
 8008b06:	b2d2      	uxtb	r2, r2
 8008b08:	440b      	add	r3, r1
 8008b0a:	761a      	strb	r2, [r3, #24]
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr
 8008b18:	e000e100 	.word	0xe000e100
 8008b1c:	e000ed00 	.word	0xe000ed00

08008b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b089      	sub	sp, #36	; 0x24
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f003 0307 	and.w	r3, r3, #7
 8008b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b34:	69fb      	ldr	r3, [r7, #28]
 8008b36:	f1c3 0307 	rsb	r3, r3, #7
 8008b3a:	2b04      	cmp	r3, #4
 8008b3c:	bf28      	it	cs
 8008b3e:	2304      	movcs	r3, #4
 8008b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	3304      	adds	r3, #4
 8008b46:	2b06      	cmp	r3, #6
 8008b48:	d902      	bls.n	8008b50 <NVIC_EncodePriority+0x30>
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	3b03      	subs	r3, #3
 8008b4e:	e000      	b.n	8008b52 <NVIC_EncodePriority+0x32>
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b54:	f04f 32ff 	mov.w	r2, #4294967295
 8008b58:	69bb      	ldr	r3, [r7, #24]
 8008b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b5e:	43da      	mvns	r2, r3
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	401a      	ands	r2, r3
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b68:	f04f 31ff 	mov.w	r1, #4294967295
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b72:	43d9      	mvns	r1, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b78:	4313      	orrs	r3, r2
         );
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3724      	adds	r7, #36	; 0x24
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
	...

08008b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b082      	sub	sp, #8
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3b01      	subs	r3, #1
 8008b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b98:	d301      	bcc.n	8008b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e00f      	b.n	8008bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b9e:	4a0a      	ldr	r2, [pc, #40]	; (8008bc8 <SysTick_Config+0x40>)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3b01      	subs	r3, #1
 8008ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ba6:	210f      	movs	r1, #15
 8008ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bac:	f7ff ff8e 	bl	8008acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <SysTick_Config+0x40>)
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008bb6:	4b04      	ldr	r3, [pc, #16]	; (8008bc8 <SysTick_Config+0x40>)
 8008bb8:	2207      	movs	r2, #7
 8008bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3708      	adds	r7, #8
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	e000e010 	.word	0xe000e010

08008bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b082      	sub	sp, #8
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7ff ff29 	bl	8008a2c <__NVIC_SetPriorityGrouping>
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b086      	sub	sp, #24
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	4603      	mov	r3, r0
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
 8008bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bf4:	f7ff ff3e 	bl	8008a74 <__NVIC_GetPriorityGrouping>
 8008bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6978      	ldr	r0, [r7, #20]
 8008c00:	f7ff ff8e 	bl	8008b20 <NVIC_EncodePriority>
 8008c04:	4602      	mov	r2, r0
 8008c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c0a:	4611      	mov	r1, r2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff ff5d 	bl	8008acc <__NVIC_SetPriority>
}
 8008c12:	bf00      	nop
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b082      	sub	sp, #8
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	4603      	mov	r3, r0
 8008c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7ff ff31 	bl	8008a90 <__NVIC_EnableIRQ>
}
 8008c2e:	bf00      	nop
 8008c30:	3708      	adds	r7, #8
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b082      	sub	sp, #8
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7ff ffa2 	bl	8008b88 <SysTick_Config>
 8008c44:	4603      	mov	r3, r0
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b089      	sub	sp, #36	; 0x24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c62:	2300      	movs	r3, #0
 8008c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c66:	2300      	movs	r3, #0
 8008c68:	61fb      	str	r3, [r7, #28]
 8008c6a:	e159      	b.n	8008f20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	fa02 f303 	lsl.w	r3, r2, r3
 8008c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	697a      	ldr	r2, [r7, #20]
 8008c7c:	4013      	ands	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	f040 8148 	bne.w	8008f1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	685b      	ldr	r3, [r3, #4]
 8008c8e:	f003 0303 	and.w	r3, r3, #3
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d005      	beq.n	8008ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c9e:	2b02      	cmp	r3, #2
 8008ca0:	d130      	bne.n	8008d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008ca8:	69fb      	ldr	r3, [r7, #28]
 8008caa:	005b      	lsls	r3, r3, #1
 8008cac:	2203      	movs	r2, #3
 8008cae:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb2:	43db      	mvns	r3, r3
 8008cb4:	69ba      	ldr	r2, [r7, #24]
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	69ba      	ldr	r2, [r7, #24]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cd8:	2201      	movs	r2, #1
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	69ba      	ldr	r2, [r7, #24]
 8008ce4:	4013      	ands	r3, r2
 8008ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	091b      	lsrs	r3, r3, #4
 8008cee:	f003 0201 	and.w	r2, r3, #1
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	69ba      	ldr	r2, [r7, #24]
 8008d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f003 0303 	and.w	r3, r3, #3
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d017      	beq.n	8008d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	005b      	lsls	r3, r3, #1
 8008d1a:	2203      	movs	r2, #3
 8008d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d20:	43db      	mvns	r3, r3
 8008d22:	69ba      	ldr	r2, [r7, #24]
 8008d24:	4013      	ands	r3, r2
 8008d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	005b      	lsls	r3, r3, #1
 8008d30:	fa02 f303 	lsl.w	r3, r2, r3
 8008d34:	69ba      	ldr	r2, [r7, #24]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f003 0303 	and.w	r3, r3, #3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d123      	bne.n	8008d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	08da      	lsrs	r2, r3, #3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	3208      	adds	r2, #8
 8008d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0307 	and.w	r3, r3, #7
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	220f      	movs	r2, #15
 8008d64:	fa02 f303 	lsl.w	r3, r2, r3
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	691a      	ldr	r2, [r3, #16]
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d86:	69fb      	ldr	r3, [r7, #28]
 8008d88:	08da      	lsrs	r2, r3, #3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	3208      	adds	r2, #8
 8008d8e:	69b9      	ldr	r1, [r7, #24]
 8008d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	005b      	lsls	r3, r3, #1
 8008d9e:	2203      	movs	r2, #3
 8008da0:	fa02 f303 	lsl.w	r3, r2, r3
 8008da4:	43db      	mvns	r3, r3
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4013      	ands	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f003 0203 	and.w	r2, r3, #3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	005b      	lsls	r3, r3, #1
 8008db8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 80a2 	beq.w	8008f1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	60fb      	str	r3, [r7, #12]
 8008dda:	4b57      	ldr	r3, [pc, #348]	; (8008f38 <HAL_GPIO_Init+0x2e8>)
 8008ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dde:	4a56      	ldr	r2, [pc, #344]	; (8008f38 <HAL_GPIO_Init+0x2e8>)
 8008de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008de4:	6453      	str	r3, [r2, #68]	; 0x44
 8008de6:	4b54      	ldr	r3, [pc, #336]	; (8008f38 <HAL_GPIO_Init+0x2e8>)
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008df2:	4a52      	ldr	r2, [pc, #328]	; (8008f3c <HAL_GPIO_Init+0x2ec>)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	089b      	lsrs	r3, r3, #2
 8008df8:	3302      	adds	r3, #2
 8008dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	220f      	movs	r2, #15
 8008e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0e:	43db      	mvns	r3, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4013      	ands	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a49      	ldr	r2, [pc, #292]	; (8008f40 <HAL_GPIO_Init+0x2f0>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d019      	beq.n	8008e52 <HAL_GPIO_Init+0x202>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a48      	ldr	r2, [pc, #288]	; (8008f44 <HAL_GPIO_Init+0x2f4>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d013      	beq.n	8008e4e <HAL_GPIO_Init+0x1fe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a47      	ldr	r2, [pc, #284]	; (8008f48 <HAL_GPIO_Init+0x2f8>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00d      	beq.n	8008e4a <HAL_GPIO_Init+0x1fa>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a46      	ldr	r2, [pc, #280]	; (8008f4c <HAL_GPIO_Init+0x2fc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <HAL_GPIO_Init+0x1f6>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a45      	ldr	r2, [pc, #276]	; (8008f50 <HAL_GPIO_Init+0x300>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d101      	bne.n	8008e42 <HAL_GPIO_Init+0x1f2>
 8008e3e:	2304      	movs	r3, #4
 8008e40:	e008      	b.n	8008e54 <HAL_GPIO_Init+0x204>
 8008e42:	2307      	movs	r3, #7
 8008e44:	e006      	b.n	8008e54 <HAL_GPIO_Init+0x204>
 8008e46:	2303      	movs	r3, #3
 8008e48:	e004      	b.n	8008e54 <HAL_GPIO_Init+0x204>
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e002      	b.n	8008e54 <HAL_GPIO_Init+0x204>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e000      	b.n	8008e54 <HAL_GPIO_Init+0x204>
 8008e52:	2300      	movs	r3, #0
 8008e54:	69fa      	ldr	r2, [r7, #28]
 8008e56:	f002 0203 	and.w	r2, r2, #3
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	4093      	lsls	r3, r2
 8008e5e:	69ba      	ldr	r2, [r7, #24]
 8008e60:	4313      	orrs	r3, r2
 8008e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e64:	4935      	ldr	r1, [pc, #212]	; (8008f3c <HAL_GPIO_Init+0x2ec>)
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	089b      	lsrs	r3, r3, #2
 8008e6a:	3302      	adds	r3, #2
 8008e6c:	69ba      	ldr	r2, [r7, #24]
 8008e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e72:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	43db      	mvns	r3, r3
 8008e7c:	69ba      	ldr	r2, [r7, #24]
 8008e7e:	4013      	ands	r3, r2
 8008e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d003      	beq.n	8008e96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8008e8e:	69ba      	ldr	r2, [r7, #24]
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e96:	4a2f      	ldr	r2, [pc, #188]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008e98:	69bb      	ldr	r3, [r7, #24]
 8008e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e9c:	4b2d      	ldr	r3, [pc, #180]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	43db      	mvns	r3, r3
 8008ea6:	69ba      	ldr	r2, [r7, #24]
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ec0:	4a24      	ldr	r2, [pc, #144]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ec6:	4b23      	ldr	r3, [pc, #140]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	43db      	mvns	r3, r3
 8008ed0:	69ba      	ldr	r2, [r7, #24]
 8008ed2:	4013      	ands	r3, r2
 8008ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	685b      	ldr	r3, [r3, #4]
 8008eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d003      	beq.n	8008eea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8008ee2:	69ba      	ldr	r2, [r7, #24]
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	4313      	orrs	r3, r2
 8008ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008eea:	4a1a      	ldr	r2, [pc, #104]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ef0:	4b18      	ldr	r3, [pc, #96]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	43db      	mvns	r3, r3
 8008efa:	69ba      	ldr	r2, [r7, #24]
 8008efc:	4013      	ands	r3, r2
 8008efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	685b      	ldr	r3, [r3, #4]
 8008f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8008f0c:	69ba      	ldr	r2, [r7, #24]
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f14:	4a0f      	ldr	r2, [pc, #60]	; (8008f54 <HAL_GPIO_Init+0x304>)
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	61fb      	str	r3, [r7, #28]
 8008f20:	69fb      	ldr	r3, [r7, #28]
 8008f22:	2b0f      	cmp	r3, #15
 8008f24:	f67f aea2 	bls.w	8008c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f28:	bf00      	nop
 8008f2a:	bf00      	nop
 8008f2c:	3724      	adds	r7, #36	; 0x24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f34:	4770      	bx	lr
 8008f36:	bf00      	nop
 8008f38:	40023800 	.word	0x40023800
 8008f3c:	40013800 	.word	0x40013800
 8008f40:	40020000 	.word	0x40020000
 8008f44:	40020400 	.word	0x40020400
 8008f48:	40020800 	.word	0x40020800
 8008f4c:	40020c00 	.word	0x40020c00
 8008f50:	40021000 	.word	0x40021000
 8008f54:	40013c00 	.word	0x40013c00

08008f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	460b      	mov	r3, r1
 8008f62:	807b      	strh	r3, [r7, #2]
 8008f64:	4613      	mov	r3, r2
 8008f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f68:	787b      	ldrb	r3, [r7, #1]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d003      	beq.n	8008f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f6e:	887a      	ldrh	r2, [r7, #2]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f74:	e003      	b.n	8008f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f76:	887b      	ldrh	r3, [r7, #2]
 8008f78:	041a      	lsls	r2, r3, #16
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	619a      	str	r2, [r3, #24]
}
 8008f7e:	bf00      	nop
 8008f80:	370c      	adds	r7, #12
 8008f82:	46bd      	mov	sp, r7
 8008f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f88:	4770      	bx	lr

08008f8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	460b      	mov	r3, r1
 8008f94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008f9c:	887a      	ldrh	r2, [r7, #2]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	041a      	lsls	r2, r3, #16
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	43d9      	mvns	r1, r3
 8008fa8:	887b      	ldrh	r3, [r7, #2]
 8008faa:	400b      	ands	r3, r1
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	619a      	str	r2, [r3, #24]
}
 8008fb2:	bf00      	nop
 8008fb4:	3714      	adds	r7, #20
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b082      	sub	sp, #8
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008fca:	4b08      	ldr	r3, [pc, #32]	; (8008fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fcc:	695a      	ldr	r2, [r3, #20]
 8008fce:	88fb      	ldrh	r3, [r7, #6]
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d006      	beq.n	8008fe4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008fd6:	4a05      	ldr	r2, [pc, #20]	; (8008fec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008fd8:	88fb      	ldrh	r3, [r7, #6]
 8008fda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008fdc:	88fb      	ldrh	r3, [r7, #6]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f000 f806 	bl	8008ff0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008fe4:	bf00      	nop
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40013c00 	.word	0x40013c00

08008ff0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
	...

08009008 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d101      	bne.n	800901a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e267      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f003 0301 	and.w	r3, r3, #1
 8009022:	2b00      	cmp	r3, #0
 8009024:	d075      	beq.n	8009112 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009026:	4b88      	ldr	r3, [pc, #544]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	f003 030c 	and.w	r3, r3, #12
 800902e:	2b04      	cmp	r3, #4
 8009030:	d00c      	beq.n	800904c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009032:	4b85      	ldr	r3, [pc, #532]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009034:	689b      	ldr	r3, [r3, #8]
 8009036:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800903a:	2b08      	cmp	r3, #8
 800903c:	d112      	bne.n	8009064 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800903e:	4b82      	ldr	r3, [pc, #520]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800904a:	d10b      	bne.n	8009064 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800904c:	4b7e      	ldr	r3, [pc, #504]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d05b      	beq.n	8009110 <HAL_RCC_OscConfig+0x108>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d157      	bne.n	8009110 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009060:	2301      	movs	r3, #1
 8009062:	e242      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800906c:	d106      	bne.n	800907c <HAL_RCC_OscConfig+0x74>
 800906e:	4b76      	ldr	r3, [pc, #472]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a75      	ldr	r2, [pc, #468]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	e01d      	b.n	80090b8 <HAL_RCC_OscConfig+0xb0>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009084:	d10c      	bne.n	80090a0 <HAL_RCC_OscConfig+0x98>
 8009086:	4b70      	ldr	r3, [pc, #448]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a6f      	ldr	r2, [pc, #444]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800908c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	4b6d      	ldr	r3, [pc, #436]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a6c      	ldr	r2, [pc, #432]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	e00b      	b.n	80090b8 <HAL_RCC_OscConfig+0xb0>
 80090a0:	4b69      	ldr	r3, [pc, #420]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a68      	ldr	r2, [pc, #416]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80090a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090aa:	6013      	str	r3, [r2, #0]
 80090ac:	4b66      	ldr	r3, [pc, #408]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a65      	ldr	r2, [pc, #404]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80090b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d013      	beq.n	80090e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c0:	f7ff fc84 	bl	80089cc <HAL_GetTick>
 80090c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090c8:	f7ff fc80 	bl	80089cc <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b64      	cmp	r3, #100	; 0x64
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e207      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090da:	4b5b      	ldr	r3, [pc, #364]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d0f0      	beq.n	80090c8 <HAL_RCC_OscConfig+0xc0>
 80090e6:	e014      	b.n	8009112 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090e8:	f7ff fc70 	bl	80089cc <HAL_GetTick>
 80090ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ee:	e008      	b.n	8009102 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090f0:	f7ff fc6c 	bl	80089cc <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	2b64      	cmp	r3, #100	; 0x64
 80090fc:	d901      	bls.n	8009102 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090fe:	2303      	movs	r3, #3
 8009100:	e1f3      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009102:	4b51      	ldr	r3, [pc, #324]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1f0      	bne.n	80090f0 <HAL_RCC_OscConfig+0xe8>
 800910e:	e000      	b.n	8009112 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009110:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d063      	beq.n	80091e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800911e:	4b4a      	ldr	r3, [pc, #296]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 030c 	and.w	r3, r3, #12
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800912a:	4b47      	ldr	r3, [pc, #284]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009132:	2b08      	cmp	r3, #8
 8009134:	d11c      	bne.n	8009170 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009136:	4b44      	ldr	r3, [pc, #272]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d116      	bne.n	8009170 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009142:	4b41      	ldr	r3, [pc, #260]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0302 	and.w	r3, r3, #2
 800914a:	2b00      	cmp	r3, #0
 800914c:	d005      	beq.n	800915a <HAL_RCC_OscConfig+0x152>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	2b01      	cmp	r3, #1
 8009154:	d001      	beq.n	800915a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e1c7      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800915a:	4b3b      	ldr	r3, [pc, #236]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	00db      	lsls	r3, r3, #3
 8009168:	4937      	ldr	r1, [pc, #220]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800916a:	4313      	orrs	r3, r2
 800916c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800916e:	e03a      	b.n	80091e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68db      	ldr	r3, [r3, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d020      	beq.n	80091ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009178:	4b34      	ldr	r3, [pc, #208]	; (800924c <HAL_RCC_OscConfig+0x244>)
 800917a:	2201      	movs	r2, #1
 800917c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917e:	f7ff fc25 	bl	80089cc <HAL_GetTick>
 8009182:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009184:	e008      	b.n	8009198 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009186:	f7ff fc21 	bl	80089cc <HAL_GetTick>
 800918a:	4602      	mov	r2, r0
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	1ad3      	subs	r3, r2, r3
 8009190:	2b02      	cmp	r3, #2
 8009192:	d901      	bls.n	8009198 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009194:	2303      	movs	r3, #3
 8009196:	e1a8      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009198:	4b2b      	ldr	r3, [pc, #172]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d0f0      	beq.n	8009186 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091a4:	4b28      	ldr	r3, [pc, #160]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	691b      	ldr	r3, [r3, #16]
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4925      	ldr	r1, [pc, #148]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80091b4:	4313      	orrs	r3, r2
 80091b6:	600b      	str	r3, [r1, #0]
 80091b8:	e015      	b.n	80091e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ba:	4b24      	ldr	r3, [pc, #144]	; (800924c <HAL_RCC_OscConfig+0x244>)
 80091bc:	2200      	movs	r2, #0
 80091be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c0:	f7ff fc04 	bl	80089cc <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091c8:	f7ff fc00 	bl	80089cc <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e187      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091da:	4b1b      	ldr	r3, [pc, #108]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d1f0      	bne.n	80091c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0308 	and.w	r3, r3, #8
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d036      	beq.n	8009260 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	695b      	ldr	r3, [r3, #20]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d016      	beq.n	8009228 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091fa:	4b15      	ldr	r3, [pc, #84]	; (8009250 <HAL_RCC_OscConfig+0x248>)
 80091fc:	2201      	movs	r2, #1
 80091fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009200:	f7ff fbe4 	bl	80089cc <HAL_GetTick>
 8009204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009206:	e008      	b.n	800921a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009208:	f7ff fbe0 	bl	80089cc <HAL_GetTick>
 800920c:	4602      	mov	r2, r0
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	2b02      	cmp	r3, #2
 8009214:	d901      	bls.n	800921a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009216:	2303      	movs	r3, #3
 8009218:	e167      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800921a:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <HAL_RCC_OscConfig+0x240>)
 800921c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800921e:	f003 0302 	and.w	r3, r3, #2
 8009222:	2b00      	cmp	r3, #0
 8009224:	d0f0      	beq.n	8009208 <HAL_RCC_OscConfig+0x200>
 8009226:	e01b      	b.n	8009260 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009228:	4b09      	ldr	r3, [pc, #36]	; (8009250 <HAL_RCC_OscConfig+0x248>)
 800922a:	2200      	movs	r2, #0
 800922c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800922e:	f7ff fbcd 	bl	80089cc <HAL_GetTick>
 8009232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009234:	e00e      	b.n	8009254 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009236:	f7ff fbc9 	bl	80089cc <HAL_GetTick>
 800923a:	4602      	mov	r2, r0
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	2b02      	cmp	r3, #2
 8009242:	d907      	bls.n	8009254 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e150      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
 8009248:	40023800 	.word	0x40023800
 800924c:	42470000 	.word	0x42470000
 8009250:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009254:	4b88      	ldr	r3, [pc, #544]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1ea      	bne.n	8009236 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0304 	and.w	r3, r3, #4
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 8097 	beq.w	800939c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800926e:	2300      	movs	r3, #0
 8009270:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009272:	4b81      	ldr	r3, [pc, #516]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d10f      	bne.n	800929e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800927e:	2300      	movs	r3, #0
 8009280:	60bb      	str	r3, [r7, #8]
 8009282:	4b7d      	ldr	r3, [pc, #500]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009286:	4a7c      	ldr	r2, [pc, #496]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800928c:	6413      	str	r3, [r2, #64]	; 0x40
 800928e:	4b7a      	ldr	r3, [pc, #488]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009296:	60bb      	str	r3, [r7, #8]
 8009298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800929a:	2301      	movs	r3, #1
 800929c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800929e:	4b77      	ldr	r3, [pc, #476]	; (800947c <HAL_RCC_OscConfig+0x474>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d118      	bne.n	80092dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092aa:	4b74      	ldr	r3, [pc, #464]	; (800947c <HAL_RCC_OscConfig+0x474>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a73      	ldr	r2, [pc, #460]	; (800947c <HAL_RCC_OscConfig+0x474>)
 80092b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092b6:	f7ff fb89 	bl	80089cc <HAL_GetTick>
 80092ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092bc:	e008      	b.n	80092d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092be:	f7ff fb85 	bl	80089cc <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e10c      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092d0:	4b6a      	ldr	r3, [pc, #424]	; (800947c <HAL_RCC_OscConfig+0x474>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	689b      	ldr	r3, [r3, #8]
 80092e0:	2b01      	cmp	r3, #1
 80092e2:	d106      	bne.n	80092f2 <HAL_RCC_OscConfig+0x2ea>
 80092e4:	4b64      	ldr	r3, [pc, #400]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 80092e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e8:	4a63      	ldr	r2, [pc, #396]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	6713      	str	r3, [r2, #112]	; 0x70
 80092f0:	e01c      	b.n	800932c <HAL_RCC_OscConfig+0x324>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	2b05      	cmp	r3, #5
 80092f8:	d10c      	bne.n	8009314 <HAL_RCC_OscConfig+0x30c>
 80092fa:	4b5f      	ldr	r3, [pc, #380]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092fe:	4a5e      	ldr	r2, [pc, #376]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009300:	f043 0304 	orr.w	r3, r3, #4
 8009304:	6713      	str	r3, [r2, #112]	; 0x70
 8009306:	4b5c      	ldr	r3, [pc, #368]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	4a5b      	ldr	r2, [pc, #364]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 800930c:	f043 0301 	orr.w	r3, r3, #1
 8009310:	6713      	str	r3, [r2, #112]	; 0x70
 8009312:	e00b      	b.n	800932c <HAL_RCC_OscConfig+0x324>
 8009314:	4b58      	ldr	r3, [pc, #352]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009318:	4a57      	ldr	r2, [pc, #348]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 800931a:	f023 0301 	bic.w	r3, r3, #1
 800931e:	6713      	str	r3, [r2, #112]	; 0x70
 8009320:	4b55      	ldr	r3, [pc, #340]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009324:	4a54      	ldr	r2, [pc, #336]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009326:	f023 0304 	bic.w	r3, r3, #4
 800932a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d015      	beq.n	8009360 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009334:	f7ff fb4a 	bl	80089cc <HAL_GetTick>
 8009338:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800933a:	e00a      	b.n	8009352 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800933c:	f7ff fb46 	bl	80089cc <HAL_GetTick>
 8009340:	4602      	mov	r2, r0
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	1ad3      	subs	r3, r2, r3
 8009346:	f241 3288 	movw	r2, #5000	; 0x1388
 800934a:	4293      	cmp	r3, r2
 800934c:	d901      	bls.n	8009352 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800934e:	2303      	movs	r3, #3
 8009350:	e0cb      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009352:	4b49      	ldr	r3, [pc, #292]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	2b00      	cmp	r3, #0
 800935c:	d0ee      	beq.n	800933c <HAL_RCC_OscConfig+0x334>
 800935e:	e014      	b.n	800938a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009360:	f7ff fb34 	bl	80089cc <HAL_GetTick>
 8009364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009366:	e00a      	b.n	800937e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009368:	f7ff fb30 	bl	80089cc <HAL_GetTick>
 800936c:	4602      	mov	r2, r0
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	f241 3288 	movw	r2, #5000	; 0x1388
 8009376:	4293      	cmp	r3, r2
 8009378:	d901      	bls.n	800937e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e0b5      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800937e:	4b3e      	ldr	r3, [pc, #248]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1ee      	bne.n	8009368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800938a:	7dfb      	ldrb	r3, [r7, #23]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d105      	bne.n	800939c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009390:	4b39      	ldr	r3, [pc, #228]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009394:	4a38      	ldr	r2, [pc, #224]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800939a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80a1 	beq.w	80094e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093a6:	4b34      	ldr	r3, [pc, #208]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	f003 030c 	and.w	r3, r3, #12
 80093ae:	2b08      	cmp	r3, #8
 80093b0:	d05c      	beq.n	800946c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d141      	bne.n	800943e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093ba:	4b31      	ldr	r3, [pc, #196]	; (8009480 <HAL_RCC_OscConfig+0x478>)
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093c0:	f7ff fb04 	bl	80089cc <HAL_GetTick>
 80093c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093c6:	e008      	b.n	80093da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093c8:	f7ff fb00 	bl	80089cc <HAL_GetTick>
 80093cc:	4602      	mov	r2, r0
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	1ad3      	subs	r3, r2, r3
 80093d2:	2b02      	cmp	r3, #2
 80093d4:	d901      	bls.n	80093da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80093d6:	2303      	movs	r3, #3
 80093d8:	e087      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1f0      	bne.n	80093c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	69da      	ldr	r2, [r3, #28]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	431a      	orrs	r2, r3
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f4:	019b      	lsls	r3, r3, #6
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093fc:	085b      	lsrs	r3, r3, #1
 80093fe:	3b01      	subs	r3, #1
 8009400:	041b      	lsls	r3, r3, #16
 8009402:	431a      	orrs	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009408:	061b      	lsls	r3, r3, #24
 800940a:	491b      	ldr	r1, [pc, #108]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 800940c:	4313      	orrs	r3, r2
 800940e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009410:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <HAL_RCC_OscConfig+0x478>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009416:	f7ff fad9 	bl	80089cc <HAL_GetTick>
 800941a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800941c:	e008      	b.n	8009430 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800941e:	f7ff fad5 	bl	80089cc <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	2b02      	cmp	r3, #2
 800942a:	d901      	bls.n	8009430 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800942c:	2303      	movs	r3, #3
 800942e:	e05c      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009430:	4b11      	ldr	r3, [pc, #68]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0f0      	beq.n	800941e <HAL_RCC_OscConfig+0x416>
 800943c:	e054      	b.n	80094e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800943e:	4b10      	ldr	r3, [pc, #64]	; (8009480 <HAL_RCC_OscConfig+0x478>)
 8009440:	2200      	movs	r2, #0
 8009442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009444:	f7ff fac2 	bl	80089cc <HAL_GetTick>
 8009448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800944a:	e008      	b.n	800945e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800944c:	f7ff fabe 	bl	80089cc <HAL_GetTick>
 8009450:	4602      	mov	r2, r0
 8009452:	693b      	ldr	r3, [r7, #16]
 8009454:	1ad3      	subs	r3, r2, r3
 8009456:	2b02      	cmp	r3, #2
 8009458:	d901      	bls.n	800945e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800945a:	2303      	movs	r3, #3
 800945c:	e045      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800945e:	4b06      	ldr	r3, [pc, #24]	; (8009478 <HAL_RCC_OscConfig+0x470>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009466:	2b00      	cmp	r3, #0
 8009468:	d1f0      	bne.n	800944c <HAL_RCC_OscConfig+0x444>
 800946a:	e03d      	b.n	80094e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	699b      	ldr	r3, [r3, #24]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d107      	bne.n	8009484 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e038      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
 8009478:	40023800 	.word	0x40023800
 800947c:	40007000 	.word	0x40007000
 8009480:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009484:	4b1b      	ldr	r3, [pc, #108]	; (80094f4 <HAL_RCC_OscConfig+0x4ec>)
 8009486:	685b      	ldr	r3, [r3, #4]
 8009488:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d028      	beq.n	80094e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800949c:	429a      	cmp	r2, r3
 800949e:	d121      	bne.n	80094e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d11a      	bne.n	80094e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ae:	68fa      	ldr	r2, [r7, #12]
 80094b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094b4:	4013      	ands	r3, r2
 80094b6:	687a      	ldr	r2, [r7, #4]
 80094b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094bc:	4293      	cmp	r3, r2
 80094be:	d111      	bne.n	80094e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ca:	085b      	lsrs	r3, r3, #1
 80094cc:	3b01      	subs	r3, #1
 80094ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d107      	bne.n	80094e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d001      	beq.n	80094e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094e4:	2301      	movs	r3, #1
 80094e6:	e000      	b.n	80094ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094e8:	2300      	movs	r3, #0
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	40023800 	.word	0x40023800

080094f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b084      	sub	sp, #16
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d101      	bne.n	800950c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e0cc      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800950c:	4b68      	ldr	r3, [pc, #416]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0307 	and.w	r3, r3, #7
 8009514:	683a      	ldr	r2, [r7, #0]
 8009516:	429a      	cmp	r2, r3
 8009518:	d90c      	bls.n	8009534 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951a:	4b65      	ldr	r3, [pc, #404]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	b2d2      	uxtb	r2, r2
 8009520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009522:	4b63      	ldr	r3, [pc, #396]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0307 	and.w	r3, r3, #7
 800952a:	683a      	ldr	r2, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d001      	beq.n	8009534 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009530:	2301      	movs	r3, #1
 8009532:	e0b8      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f003 0302 	and.w	r3, r3, #2
 800953c:	2b00      	cmp	r3, #0
 800953e:	d020      	beq.n	8009582 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b00      	cmp	r3, #0
 800954a:	d005      	beq.n	8009558 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800954c:	4b59      	ldr	r3, [pc, #356]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	4a58      	ldr	r2, [pc, #352]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009552:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009556:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f003 0308 	and.w	r3, r3, #8
 8009560:	2b00      	cmp	r3, #0
 8009562:	d005      	beq.n	8009570 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009564:	4b53      	ldr	r3, [pc, #332]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	4a52      	ldr	r2, [pc, #328]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800956a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800956e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009570:	4b50      	ldr	r3, [pc, #320]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	494d      	ldr	r1, [pc, #308]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800957e:	4313      	orrs	r3, r2
 8009580:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0301 	and.w	r3, r3, #1
 800958a:	2b00      	cmp	r3, #0
 800958c:	d044      	beq.n	8009618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	2b01      	cmp	r3, #1
 8009594:	d107      	bne.n	80095a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009596:	4b47      	ldr	r3, [pc, #284]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d119      	bne.n	80095d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e07f      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	2b02      	cmp	r3, #2
 80095ac:	d003      	beq.n	80095b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d107      	bne.n	80095c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095b6:	4b3f      	ldr	r3, [pc, #252]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d109      	bne.n	80095d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095c2:	2301      	movs	r3, #1
 80095c4:	e06f      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095c6:	4b3b      	ldr	r3, [pc, #236]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d101      	bne.n	80095d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095d2:	2301      	movs	r3, #1
 80095d4:	e067      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095d6:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f023 0203 	bic.w	r2, r3, #3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	4934      	ldr	r1, [pc, #208]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 80095e4:	4313      	orrs	r3, r2
 80095e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095e8:	f7ff f9f0 	bl	80089cc <HAL_GetTick>
 80095ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ee:	e00a      	b.n	8009606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f0:	f7ff f9ec 	bl	80089cc <HAL_GetTick>
 80095f4:	4602      	mov	r2, r0
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	1ad3      	subs	r3, r2, r3
 80095fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80095fe:	4293      	cmp	r3, r2
 8009600:	d901      	bls.n	8009606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009602:	2303      	movs	r3, #3
 8009604:	e04f      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009606:	4b2b      	ldr	r3, [pc, #172]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 020c 	and.w	r2, r3, #12
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	429a      	cmp	r2, r3
 8009616:	d1eb      	bne.n	80095f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009618:	4b25      	ldr	r3, [pc, #148]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	683a      	ldr	r2, [r7, #0]
 8009622:	429a      	cmp	r2, r3
 8009624:	d20c      	bcs.n	8009640 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009626:	4b22      	ldr	r3, [pc, #136]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	b2d2      	uxtb	r2, r2
 800962c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800962e:	4b20      	ldr	r3, [pc, #128]	; (80096b0 <HAL_RCC_ClockConfig+0x1b8>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f003 0307 	and.w	r3, r3, #7
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	429a      	cmp	r2, r3
 800963a:	d001      	beq.n	8009640 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800963c:	2301      	movs	r3, #1
 800963e:	e032      	b.n	80096a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0304 	and.w	r3, r3, #4
 8009648:	2b00      	cmp	r3, #0
 800964a:	d008      	beq.n	800965e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800964c:	4b19      	ldr	r3, [pc, #100]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	68db      	ldr	r3, [r3, #12]
 8009658:	4916      	ldr	r1, [pc, #88]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800965a:	4313      	orrs	r3, r2
 800965c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b00      	cmp	r3, #0
 8009668:	d009      	beq.n	800967e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800966a:	4b12      	ldr	r3, [pc, #72]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800966c:	689b      	ldr	r3, [r3, #8]
 800966e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	490e      	ldr	r1, [pc, #56]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 800967a:	4313      	orrs	r3, r2
 800967c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800967e:	f000 f821 	bl	80096c4 <HAL_RCC_GetSysClockFreq>
 8009682:	4602      	mov	r2, r0
 8009684:	4b0b      	ldr	r3, [pc, #44]	; (80096b4 <HAL_RCC_ClockConfig+0x1bc>)
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	091b      	lsrs	r3, r3, #4
 800968a:	f003 030f 	and.w	r3, r3, #15
 800968e:	490a      	ldr	r1, [pc, #40]	; (80096b8 <HAL_RCC_ClockConfig+0x1c0>)
 8009690:	5ccb      	ldrb	r3, [r1, r3]
 8009692:	fa22 f303 	lsr.w	r3, r2, r3
 8009696:	4a09      	ldr	r2, [pc, #36]	; (80096bc <HAL_RCC_ClockConfig+0x1c4>)
 8009698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800969a:	4b09      	ldr	r3, [pc, #36]	; (80096c0 <HAL_RCC_ClockConfig+0x1c8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4618      	mov	r0, r3
 80096a0:	f7ff f950 	bl	8008944 <HAL_InitTick>

  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3710      	adds	r7, #16
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}
 80096ae:	bf00      	nop
 80096b0:	40023c00 	.word	0x40023c00
 80096b4:	40023800 	.word	0x40023800
 80096b8:	0800a158 	.word	0x0800a158
 80096bc:	20000000 	.word	0x20000000
 80096c0:	20000004 	.word	0x20000004

080096c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096c8:	b090      	sub	sp, #64	; 0x40
 80096ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096cc:	2300      	movs	r3, #0
 80096ce:	637b      	str	r3, [r7, #52]	; 0x34
 80096d0:	2300      	movs	r3, #0
 80096d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80096d4:	2300      	movs	r3, #0
 80096d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80096d8:	2300      	movs	r3, #0
 80096da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096dc:	4b59      	ldr	r3, [pc, #356]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f003 030c 	and.w	r3, r3, #12
 80096e4:	2b08      	cmp	r3, #8
 80096e6:	d00d      	beq.n	8009704 <HAL_RCC_GetSysClockFreq+0x40>
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	f200 80a1 	bhi.w	8009830 <HAL_RCC_GetSysClockFreq+0x16c>
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d002      	beq.n	80096f8 <HAL_RCC_GetSysClockFreq+0x34>
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d003      	beq.n	80096fe <HAL_RCC_GetSysClockFreq+0x3a>
 80096f6:	e09b      	b.n	8009830 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096f8:	4b53      	ldr	r3, [pc, #332]	; (8009848 <HAL_RCC_GetSysClockFreq+0x184>)
 80096fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80096fc:	e09b      	b.n	8009836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096fe:	4b53      	ldr	r3, [pc, #332]	; (800984c <HAL_RCC_GetSysClockFreq+0x188>)
 8009700:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009702:	e098      	b.n	8009836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009704:	4b4f      	ldr	r3, [pc, #316]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800970c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800970e:	4b4d      	ldr	r3, [pc, #308]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d028      	beq.n	800976c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800971a:	4b4a      	ldr	r3, [pc, #296]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	099b      	lsrs	r3, r3, #6
 8009720:	2200      	movs	r2, #0
 8009722:	623b      	str	r3, [r7, #32]
 8009724:	627a      	str	r2, [r7, #36]	; 0x24
 8009726:	6a3b      	ldr	r3, [r7, #32]
 8009728:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800972c:	2100      	movs	r1, #0
 800972e:	4b47      	ldr	r3, [pc, #284]	; (800984c <HAL_RCC_GetSysClockFreq+0x188>)
 8009730:	fb03 f201 	mul.w	r2, r3, r1
 8009734:	2300      	movs	r3, #0
 8009736:	fb00 f303 	mul.w	r3, r0, r3
 800973a:	4413      	add	r3, r2
 800973c:	4a43      	ldr	r2, [pc, #268]	; (800984c <HAL_RCC_GetSysClockFreq+0x188>)
 800973e:	fba0 1202 	umull	r1, r2, r0, r2
 8009742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009744:	460a      	mov	r2, r1
 8009746:	62ba      	str	r2, [r7, #40]	; 0x28
 8009748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800974a:	4413      	add	r3, r2
 800974c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800974e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009750:	2200      	movs	r2, #0
 8009752:	61bb      	str	r3, [r7, #24]
 8009754:	61fa      	str	r2, [r7, #28]
 8009756:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800975a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800975e:	f7fe fd39 	bl	80081d4 <__aeabi_uldivmod>
 8009762:	4602      	mov	r2, r0
 8009764:	460b      	mov	r3, r1
 8009766:	4613      	mov	r3, r2
 8009768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800976a:	e053      	b.n	8009814 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800976c:	4b35      	ldr	r3, [pc, #212]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	099b      	lsrs	r3, r3, #6
 8009772:	2200      	movs	r2, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	617a      	str	r2, [r7, #20]
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800977e:	f04f 0b00 	mov.w	fp, #0
 8009782:	4652      	mov	r2, sl
 8009784:	465b      	mov	r3, fp
 8009786:	f04f 0000 	mov.w	r0, #0
 800978a:	f04f 0100 	mov.w	r1, #0
 800978e:	0159      	lsls	r1, r3, #5
 8009790:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009794:	0150      	lsls	r0, r2, #5
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	ebb2 080a 	subs.w	r8, r2, sl
 800979e:	eb63 090b 	sbc.w	r9, r3, fp
 80097a2:	f04f 0200 	mov.w	r2, #0
 80097a6:	f04f 0300 	mov.w	r3, #0
 80097aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80097ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80097b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80097b6:	ebb2 0408 	subs.w	r4, r2, r8
 80097ba:	eb63 0509 	sbc.w	r5, r3, r9
 80097be:	f04f 0200 	mov.w	r2, #0
 80097c2:	f04f 0300 	mov.w	r3, #0
 80097c6:	00eb      	lsls	r3, r5, #3
 80097c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80097cc:	00e2      	lsls	r2, r4, #3
 80097ce:	4614      	mov	r4, r2
 80097d0:	461d      	mov	r5, r3
 80097d2:	eb14 030a 	adds.w	r3, r4, sl
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	eb45 030b 	adc.w	r3, r5, fp
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	f04f 0200 	mov.w	r2, #0
 80097e2:	f04f 0300 	mov.w	r3, #0
 80097e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80097ea:	4629      	mov	r1, r5
 80097ec:	028b      	lsls	r3, r1, #10
 80097ee:	4621      	mov	r1, r4
 80097f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80097f4:	4621      	mov	r1, r4
 80097f6:	028a      	lsls	r2, r1, #10
 80097f8:	4610      	mov	r0, r2
 80097fa:	4619      	mov	r1, r3
 80097fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fe:	2200      	movs	r2, #0
 8009800:	60bb      	str	r3, [r7, #8]
 8009802:	60fa      	str	r2, [r7, #12]
 8009804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009808:	f7fe fce4 	bl	80081d4 <__aeabi_uldivmod>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4613      	mov	r3, r2
 8009812:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009814:	4b0b      	ldr	r3, [pc, #44]	; (8009844 <HAL_RCC_GetSysClockFreq+0x180>)
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	0c1b      	lsrs	r3, r3, #16
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	3301      	adds	r3, #1
 8009820:	005b      	lsls	r3, r3, #1
 8009822:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8009824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009828:	fbb2 f3f3 	udiv	r3, r2, r3
 800982c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800982e:	e002      	b.n	8009836 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009830:	4b05      	ldr	r3, [pc, #20]	; (8009848 <HAL_RCC_GetSysClockFreq+0x184>)
 8009832:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8009834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8009838:	4618      	mov	r0, r3
 800983a:	3740      	adds	r7, #64	; 0x40
 800983c:	46bd      	mov	sp, r7
 800983e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009842:	bf00      	nop
 8009844:	40023800 	.word	0x40023800
 8009848:	00f42400 	.word	0x00f42400
 800984c:	017d7840 	.word	0x017d7840

08009850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009854:	4b03      	ldr	r3, [pc, #12]	; (8009864 <HAL_RCC_GetHCLKFreq+0x14>)
 8009856:	681b      	ldr	r3, [r3, #0]
}
 8009858:	4618      	mov	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20000000 	.word	0x20000000

08009868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800986c:	f7ff fff0 	bl	8009850 <HAL_RCC_GetHCLKFreq>
 8009870:	4602      	mov	r2, r0
 8009872:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009874:	689b      	ldr	r3, [r3, #8]
 8009876:	0a9b      	lsrs	r3, r3, #10
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	4903      	ldr	r1, [pc, #12]	; (800988c <HAL_RCC_GetPCLK1Freq+0x24>)
 800987e:	5ccb      	ldrb	r3, [r1, r3]
 8009880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009884:	4618      	mov	r0, r3
 8009886:	bd80      	pop	{r7, pc}
 8009888:	40023800 	.word	0x40023800
 800988c:	0800a168 	.word	0x0800a168

08009890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009894:	f7ff ffdc 	bl	8009850 <HAL_RCC_GetHCLKFreq>
 8009898:	4602      	mov	r2, r0
 800989a:	4b05      	ldr	r3, [pc, #20]	; (80098b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	0b5b      	lsrs	r3, r3, #13
 80098a0:	f003 0307 	and.w	r3, r3, #7
 80098a4:	4903      	ldr	r1, [pc, #12]	; (80098b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098a6:	5ccb      	ldrb	r3, [r1, r3]
 80098a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40023800 	.word	0x40023800
 80098b4:	0800a168 	.word	0x0800a168

080098b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b082      	sub	sp, #8
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d101      	bne.n	80098ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80098c6:	2301      	movs	r3, #1
 80098c8:	e042      	b.n	8009950 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d106      	bne.n	80098e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f7fe ff4c 	bl	800877c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2224      	movs	r2, #36	; 0x24
 80098e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f973 	bl	8009be8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	691a      	ldr	r2, [r3, #16]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009910:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	695a      	ldr	r2, [r3, #20]
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009920:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	68da      	ldr	r2, [r3, #12]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009930:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	2200      	movs	r2, #0
 8009936:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2220      	movs	r2, #32
 800993c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2220      	movs	r2, #32
 8009944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800994e:	2300      	movs	r3, #0
}
 8009950:	4618      	mov	r0, r3
 8009952:	3708      	adds	r7, #8
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b08a      	sub	sp, #40	; 0x28
 800995c:	af02      	add	r7, sp, #8
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	4613      	mov	r3, r2
 8009966:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b20      	cmp	r3, #32
 8009976:	d175      	bne.n	8009a64 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <HAL_UART_Transmit+0x2c>
 800997e:	88fb      	ldrh	r3, [r7, #6]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e06e      	b.n	8009a66 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2200      	movs	r2, #0
 800998c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2221      	movs	r2, #33	; 0x21
 8009992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009996:	f7ff f819 	bl	80089cc <HAL_GetTick>
 800999a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	88fa      	ldrh	r2, [r7, #6]
 80099a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	88fa      	ldrh	r2, [r7, #6]
 80099a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	689b      	ldr	r3, [r3, #8]
 80099ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099b0:	d108      	bne.n	80099c4 <HAL_UART_Transmit+0x6c>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d104      	bne.n	80099c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	61bb      	str	r3, [r7, #24]
 80099c2:	e003      	b.n	80099cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80099cc:	e02e      	b.n	8009a2c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	9300      	str	r3, [sp, #0]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	2200      	movs	r2, #0
 80099d6:	2180      	movs	r1, #128	; 0x80
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f000 f848 	bl	8009a6e <UART_WaitOnFlagUntilTimeout>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d005      	beq.n	80099f0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2220      	movs	r2, #32
 80099e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e03a      	b.n	8009a66 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d10b      	bne.n	8009a0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	3302      	adds	r3, #2
 8009a0a:	61bb      	str	r3, [r7, #24]
 8009a0c:	e007      	b.n	8009a1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	781a      	ldrb	r2, [r3, #0]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009a18:	69fb      	ldr	r3, [r7, #28]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	3b01      	subs	r3, #1
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1cb      	bne.n	80099ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	2140      	movs	r1, #64	; 0x40
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f814 	bl	8009a6e <UART_WaitOnFlagUntilTimeout>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d005      	beq.n	8009a58 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2220      	movs	r2, #32
 8009a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e006      	b.n	8009a66 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2220      	movs	r2, #32
 8009a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8009a60:	2300      	movs	r3, #0
 8009a62:	e000      	b.n	8009a66 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009a64:	2302      	movs	r3, #2
  }
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b086      	sub	sp, #24
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	60f8      	str	r0, [r7, #12]
 8009a76:	60b9      	str	r1, [r7, #8]
 8009a78:	603b      	str	r3, [r7, #0]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a7e:	e03b      	b.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a80:	6a3b      	ldr	r3, [r7, #32]
 8009a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a86:	d037      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a88:	f7fe ffa0 	bl	80089cc <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	6a3a      	ldr	r2, [r7, #32]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d302      	bcc.n	8009a9e <UART_WaitOnFlagUntilTimeout+0x30>
 8009a98:	6a3b      	ldr	r3, [r7, #32]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d101      	bne.n	8009aa2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	e03a      	b.n	8009b18 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d023      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	2b80      	cmp	r3, #128	; 0x80
 8009ab4:	d020      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	2b40      	cmp	r3, #64	; 0x40
 8009aba:	d01d      	beq.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0308 	and.w	r3, r3, #8
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	d116      	bne.n	8009af8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009aca:	2300      	movs	r3, #0
 8009acc:	617b      	str	r3, [r7, #20]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	617b      	str	r3, [r7, #20]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	617b      	str	r3, [r7, #20]
 8009ade:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f81d 	bl	8009b20 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2208      	movs	r2, #8
 8009aea:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	e00f      	b.n	8009b18 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4013      	ands	r3, r2
 8009b02:	68ba      	ldr	r2, [r7, #8]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	461a      	mov	r2, r3
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d0b4      	beq.n	8009a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3718      	adds	r7, #24
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b095      	sub	sp, #84	; 0x54
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	330c      	adds	r3, #12
 8009b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b48:	643a      	str	r2, [r7, #64]	; 0x40
 8009b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e5      	bne.n	8009b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	3314      	adds	r3, #20
 8009b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b64:	6a3b      	ldr	r3, [r7, #32]
 8009b66:	e853 3f00 	ldrex	r3, [r3]
 8009b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	f023 0301 	bic.w	r3, r3, #1
 8009b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	3314      	adds	r3, #20
 8009b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b84:	e841 2300 	strex	r3, r2, [r1]
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d1e5      	bne.n	8009b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d119      	bne.n	8009bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	330c      	adds	r3, #12
 8009b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	e853 3f00 	ldrex	r3, [r3]
 8009ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	f023 0310 	bic.w	r3, r3, #16
 8009bae:	647b      	str	r3, [r7, #68]	; 0x44
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	330c      	adds	r3, #12
 8009bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bb8:	61ba      	str	r2, [r7, #24]
 8009bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbc:	6979      	ldr	r1, [r7, #20]
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	e841 2300 	strex	r3, r2, [r1]
 8009bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d1e5      	bne.n	8009b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009bda:	bf00      	nop
 8009bdc:	3754      	adds	r7, #84	; 0x54
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
	...

08009be8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009bec:	b0c0      	sub	sp, #256	; 0x100
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	691b      	ldr	r3, [r3, #16]
 8009bfc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c04:	68d9      	ldr	r1, [r3, #12]
 8009c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	ea40 0301 	orr.w	r3, r0, r1
 8009c10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c1c:	691b      	ldr	r3, [r3, #16]
 8009c1e:	431a      	orrs	r2, r3
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	695b      	ldr	r3, [r3, #20]
 8009c26:	431a      	orrs	r2, r3
 8009c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009c40:	f021 010c 	bic.w	r1, r1, #12
 8009c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009c4e:	430b      	orrs	r3, r1
 8009c50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	695b      	ldr	r3, [r3, #20]
 8009c5a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c62:	6999      	ldr	r1, [r3, #24]
 8009c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	ea40 0301 	orr.w	r3, r0, r1
 8009c6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	4b8f      	ldr	r3, [pc, #572]	; (8009eb4 <UART_SetConfig+0x2cc>)
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d005      	beq.n	8009c88 <UART_SetConfig+0xa0>
 8009c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4b8d      	ldr	r3, [pc, #564]	; (8009eb8 <UART_SetConfig+0x2d0>)
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d104      	bne.n	8009c92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009c88:	f7ff fe02 	bl	8009890 <HAL_RCC_GetPCLK2Freq>
 8009c8c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009c90:	e003      	b.n	8009c9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009c92:	f7ff fde9 	bl	8009868 <HAL_RCC_GetPCLK1Freq>
 8009c96:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ca4:	f040 810c 	bne.w	8009ec0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ca8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cac:	2200      	movs	r2, #0
 8009cae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009cb2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009cb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009cba:	4622      	mov	r2, r4
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	1891      	adds	r1, r2, r2
 8009cc0:	65b9      	str	r1, [r7, #88]	; 0x58
 8009cc2:	415b      	adcs	r3, r3
 8009cc4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cc6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009cca:	4621      	mov	r1, r4
 8009ccc:	eb12 0801 	adds.w	r8, r2, r1
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	eb43 0901 	adc.w	r9, r3, r1
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	f04f 0300 	mov.w	r3, #0
 8009cde:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ce2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ce6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009cea:	4690      	mov	r8, r2
 8009cec:	4699      	mov	r9, r3
 8009cee:	4623      	mov	r3, r4
 8009cf0:	eb18 0303 	adds.w	r3, r8, r3
 8009cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cf8:	462b      	mov	r3, r5
 8009cfa:	eb49 0303 	adc.w	r3, r9, r3
 8009cfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009d0e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009d12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009d16:	460b      	mov	r3, r1
 8009d18:	18db      	adds	r3, r3, r3
 8009d1a:	653b      	str	r3, [r7, #80]	; 0x50
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	eb42 0303 	adc.w	r3, r2, r3
 8009d22:	657b      	str	r3, [r7, #84]	; 0x54
 8009d24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009d28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009d2c:	f7fe fa52 	bl	80081d4 <__aeabi_uldivmod>
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4b61      	ldr	r3, [pc, #388]	; (8009ebc <UART_SetConfig+0x2d4>)
 8009d36:	fba3 2302 	umull	r2, r3, r3, r2
 8009d3a:	095b      	lsrs	r3, r3, #5
 8009d3c:	011c      	lsls	r4, r3, #4
 8009d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d42:	2200      	movs	r2, #0
 8009d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d48:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009d4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009d50:	4642      	mov	r2, r8
 8009d52:	464b      	mov	r3, r9
 8009d54:	1891      	adds	r1, r2, r2
 8009d56:	64b9      	str	r1, [r7, #72]	; 0x48
 8009d58:	415b      	adcs	r3, r3
 8009d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009d60:	4641      	mov	r1, r8
 8009d62:	eb12 0a01 	adds.w	sl, r2, r1
 8009d66:	4649      	mov	r1, r9
 8009d68:	eb43 0b01 	adc.w	fp, r3, r1
 8009d6c:	f04f 0200 	mov.w	r2, #0
 8009d70:	f04f 0300 	mov.w	r3, #0
 8009d74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009d78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009d7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009d80:	4692      	mov	sl, r2
 8009d82:	469b      	mov	fp, r3
 8009d84:	4643      	mov	r3, r8
 8009d86:	eb1a 0303 	adds.w	r3, sl, r3
 8009d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d8e:	464b      	mov	r3, r9
 8009d90:	eb4b 0303 	adc.w	r3, fp, r3
 8009d94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009da4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009da8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009dac:	460b      	mov	r3, r1
 8009dae:	18db      	adds	r3, r3, r3
 8009db0:	643b      	str	r3, [r7, #64]	; 0x40
 8009db2:	4613      	mov	r3, r2
 8009db4:	eb42 0303 	adc.w	r3, r2, r3
 8009db8:	647b      	str	r3, [r7, #68]	; 0x44
 8009dba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009dbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009dc2:	f7fe fa07 	bl	80081d4 <__aeabi_uldivmod>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	460b      	mov	r3, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	; (8009ebc <UART_SetConfig+0x2d4>)
 8009dce:	fba3 2301 	umull	r2, r3, r3, r1
 8009dd2:	095b      	lsrs	r3, r3, #5
 8009dd4:	2264      	movs	r2, #100	; 0x64
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	1acb      	subs	r3, r1, r3
 8009ddc:	00db      	lsls	r3, r3, #3
 8009dde:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009de2:	4b36      	ldr	r3, [pc, #216]	; (8009ebc <UART_SetConfig+0x2d4>)
 8009de4:	fba3 2302 	umull	r2, r3, r3, r2
 8009de8:	095b      	lsrs	r3, r3, #5
 8009dea:	005b      	lsls	r3, r3, #1
 8009dec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009df0:	441c      	add	r4, r3
 8009df2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009df6:	2200      	movs	r2, #0
 8009df8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009dfc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009e00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009e04:	4642      	mov	r2, r8
 8009e06:	464b      	mov	r3, r9
 8009e08:	1891      	adds	r1, r2, r2
 8009e0a:	63b9      	str	r1, [r7, #56]	; 0x38
 8009e0c:	415b      	adcs	r3, r3
 8009e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009e10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009e14:	4641      	mov	r1, r8
 8009e16:	1851      	adds	r1, r2, r1
 8009e18:	6339      	str	r1, [r7, #48]	; 0x30
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	414b      	adcs	r3, r1
 8009e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009e20:	f04f 0200 	mov.w	r2, #0
 8009e24:	f04f 0300 	mov.w	r3, #0
 8009e28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009e2c:	4659      	mov	r1, fp
 8009e2e:	00cb      	lsls	r3, r1, #3
 8009e30:	4651      	mov	r1, sl
 8009e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e36:	4651      	mov	r1, sl
 8009e38:	00ca      	lsls	r2, r1, #3
 8009e3a:	4610      	mov	r0, r2
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	4642      	mov	r2, r8
 8009e42:	189b      	adds	r3, r3, r2
 8009e44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009e48:	464b      	mov	r3, r9
 8009e4a:	460a      	mov	r2, r1
 8009e4c:	eb42 0303 	adc.w	r3, r2, r3
 8009e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009e60:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009e64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009e68:	460b      	mov	r3, r1
 8009e6a:	18db      	adds	r3, r3, r3
 8009e6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e6e:	4613      	mov	r3, r2
 8009e70:	eb42 0303 	adc.w	r3, r2, r3
 8009e74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009e76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009e7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009e7e:	f7fe f9a9 	bl	80081d4 <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4b0d      	ldr	r3, [pc, #52]	; (8009ebc <UART_SetConfig+0x2d4>)
 8009e88:	fba3 1302 	umull	r1, r3, r3, r2
 8009e8c:	095b      	lsrs	r3, r3, #5
 8009e8e:	2164      	movs	r1, #100	; 0x64
 8009e90:	fb01 f303 	mul.w	r3, r1, r3
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	3332      	adds	r3, #50	; 0x32
 8009e9a:	4a08      	ldr	r2, [pc, #32]	; (8009ebc <UART_SetConfig+0x2d4>)
 8009e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	f003 0207 	and.w	r2, r3, #7
 8009ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4422      	add	r2, r4
 8009eae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009eb0:	e106      	b.n	800a0c0 <UART_SetConfig+0x4d8>
 8009eb2:	bf00      	nop
 8009eb4:	40011000 	.word	0x40011000
 8009eb8:	40011400 	.word	0x40011400
 8009ebc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009eca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009ece:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	464b      	mov	r3, r9
 8009ed6:	1891      	adds	r1, r2, r2
 8009ed8:	6239      	str	r1, [r7, #32]
 8009eda:	415b      	adcs	r3, r3
 8009edc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ede:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ee2:	4641      	mov	r1, r8
 8009ee4:	1854      	adds	r4, r2, r1
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	eb43 0501 	adc.w	r5, r3, r1
 8009eec:	f04f 0200 	mov.w	r2, #0
 8009ef0:	f04f 0300 	mov.w	r3, #0
 8009ef4:	00eb      	lsls	r3, r5, #3
 8009ef6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009efa:	00e2      	lsls	r2, r4, #3
 8009efc:	4614      	mov	r4, r2
 8009efe:	461d      	mov	r5, r3
 8009f00:	4643      	mov	r3, r8
 8009f02:	18e3      	adds	r3, r4, r3
 8009f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009f08:	464b      	mov	r3, r9
 8009f0a:	eb45 0303 	adc.w	r3, r5, r3
 8009f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009f22:	f04f 0200 	mov.w	r2, #0
 8009f26:	f04f 0300 	mov.w	r3, #0
 8009f2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009f2e:	4629      	mov	r1, r5
 8009f30:	008b      	lsls	r3, r1, #2
 8009f32:	4621      	mov	r1, r4
 8009f34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f38:	4621      	mov	r1, r4
 8009f3a:	008a      	lsls	r2, r1, #2
 8009f3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009f40:	f7fe f948 	bl	80081d4 <__aeabi_uldivmod>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4b60      	ldr	r3, [pc, #384]	; (800a0cc <UART_SetConfig+0x4e4>)
 8009f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8009f4e:	095b      	lsrs	r3, r3, #5
 8009f50:	011c      	lsls	r4, r3, #4
 8009f52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f56:	2200      	movs	r2, #0
 8009f58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009f5c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009f60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009f64:	4642      	mov	r2, r8
 8009f66:	464b      	mov	r3, r9
 8009f68:	1891      	adds	r1, r2, r2
 8009f6a:	61b9      	str	r1, [r7, #24]
 8009f6c:	415b      	adcs	r3, r3
 8009f6e:	61fb      	str	r3, [r7, #28]
 8009f70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009f74:	4641      	mov	r1, r8
 8009f76:	1851      	adds	r1, r2, r1
 8009f78:	6139      	str	r1, [r7, #16]
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	414b      	adcs	r3, r1
 8009f7e:	617b      	str	r3, [r7, #20]
 8009f80:	f04f 0200 	mov.w	r2, #0
 8009f84:	f04f 0300 	mov.w	r3, #0
 8009f88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	00cb      	lsls	r3, r1, #3
 8009f90:	4651      	mov	r1, sl
 8009f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f96:	4651      	mov	r1, sl
 8009f98:	00ca      	lsls	r2, r1, #3
 8009f9a:	4610      	mov	r0, r2
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	4642      	mov	r2, r8
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009fa8:	464b      	mov	r3, r9
 8009faa:	460a      	mov	r2, r1
 8009fac:	eb42 0303 	adc.w	r3, r2, r3
 8009fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8009fbe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009fc0:	f04f 0200 	mov.w	r2, #0
 8009fc4:	f04f 0300 	mov.w	r3, #0
 8009fc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009fcc:	4649      	mov	r1, r9
 8009fce:	008b      	lsls	r3, r1, #2
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009fd6:	4641      	mov	r1, r8
 8009fd8:	008a      	lsls	r2, r1, #2
 8009fda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009fde:	f7fe f8f9 	bl	80081d4 <__aeabi_uldivmod>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4611      	mov	r1, r2
 8009fe8:	4b38      	ldr	r3, [pc, #224]	; (800a0cc <UART_SetConfig+0x4e4>)
 8009fea:	fba3 2301 	umull	r2, r3, r3, r1
 8009fee:	095b      	lsrs	r3, r3, #5
 8009ff0:	2264      	movs	r2, #100	; 0x64
 8009ff2:	fb02 f303 	mul.w	r3, r2, r3
 8009ff6:	1acb      	subs	r3, r1, r3
 8009ff8:	011b      	lsls	r3, r3, #4
 8009ffa:	3332      	adds	r3, #50	; 0x32
 8009ffc:	4a33      	ldr	r2, [pc, #204]	; (800a0cc <UART_SetConfig+0x4e4>)
 8009ffe:	fba2 2303 	umull	r2, r3, r2, r3
 800a002:	095b      	lsrs	r3, r3, #5
 800a004:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a008:	441c      	add	r4, r3
 800a00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a00e:	2200      	movs	r2, #0
 800a010:	673b      	str	r3, [r7, #112]	; 0x70
 800a012:	677a      	str	r2, [r7, #116]	; 0x74
 800a014:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a018:	4642      	mov	r2, r8
 800a01a:	464b      	mov	r3, r9
 800a01c:	1891      	adds	r1, r2, r2
 800a01e:	60b9      	str	r1, [r7, #8]
 800a020:	415b      	adcs	r3, r3
 800a022:	60fb      	str	r3, [r7, #12]
 800a024:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a028:	4641      	mov	r1, r8
 800a02a:	1851      	adds	r1, r2, r1
 800a02c:	6039      	str	r1, [r7, #0]
 800a02e:	4649      	mov	r1, r9
 800a030:	414b      	adcs	r3, r1
 800a032:	607b      	str	r3, [r7, #4]
 800a034:	f04f 0200 	mov.w	r2, #0
 800a038:	f04f 0300 	mov.w	r3, #0
 800a03c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a040:	4659      	mov	r1, fp
 800a042:	00cb      	lsls	r3, r1, #3
 800a044:	4651      	mov	r1, sl
 800a046:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04a:	4651      	mov	r1, sl
 800a04c:	00ca      	lsls	r2, r1, #3
 800a04e:	4610      	mov	r0, r2
 800a050:	4619      	mov	r1, r3
 800a052:	4603      	mov	r3, r0
 800a054:	4642      	mov	r2, r8
 800a056:	189b      	adds	r3, r3, r2
 800a058:	66bb      	str	r3, [r7, #104]	; 0x68
 800a05a:	464b      	mov	r3, r9
 800a05c:	460a      	mov	r2, r1
 800a05e:	eb42 0303 	adc.w	r3, r2, r3
 800a062:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	663b      	str	r3, [r7, #96]	; 0x60
 800a06e:	667a      	str	r2, [r7, #100]	; 0x64
 800a070:	f04f 0200 	mov.w	r2, #0
 800a074:	f04f 0300 	mov.w	r3, #0
 800a078:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a07c:	4649      	mov	r1, r9
 800a07e:	008b      	lsls	r3, r1, #2
 800a080:	4641      	mov	r1, r8
 800a082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a086:	4641      	mov	r1, r8
 800a088:	008a      	lsls	r2, r1, #2
 800a08a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a08e:	f7fe f8a1 	bl	80081d4 <__aeabi_uldivmod>
 800a092:	4602      	mov	r2, r0
 800a094:	460b      	mov	r3, r1
 800a096:	4b0d      	ldr	r3, [pc, #52]	; (800a0cc <UART_SetConfig+0x4e4>)
 800a098:	fba3 1302 	umull	r1, r3, r3, r2
 800a09c:	095b      	lsrs	r3, r3, #5
 800a09e:	2164      	movs	r1, #100	; 0x64
 800a0a0:	fb01 f303 	mul.w	r3, r1, r3
 800a0a4:	1ad3      	subs	r3, r2, r3
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	3332      	adds	r3, #50	; 0x32
 800a0aa:	4a08      	ldr	r2, [pc, #32]	; (800a0cc <UART_SetConfig+0x4e4>)
 800a0ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b0:	095b      	lsrs	r3, r3, #5
 800a0b2:	f003 020f 	and.w	r2, r3, #15
 800a0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4422      	add	r2, r4
 800a0be:	609a      	str	r2, [r3, #8]
}
 800a0c0:	bf00      	nop
 800a0c2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0cc:	51eb851f 	.word	0x51eb851f

0800a0d0 <memset>:
 800a0d0:	4402      	add	r2, r0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d100      	bne.n	800a0da <memset+0xa>
 800a0d8:	4770      	bx	lr
 800a0da:	f803 1b01 	strb.w	r1, [r3], #1
 800a0de:	e7f9      	b.n	800a0d4 <memset+0x4>

0800a0e0 <__libc_init_array>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	4d0d      	ldr	r5, [pc, #52]	; (800a118 <__libc_init_array+0x38>)
 800a0e4:	4c0d      	ldr	r4, [pc, #52]	; (800a11c <__libc_init_array+0x3c>)
 800a0e6:	1b64      	subs	r4, r4, r5
 800a0e8:	10a4      	asrs	r4, r4, #2
 800a0ea:	2600      	movs	r6, #0
 800a0ec:	42a6      	cmp	r6, r4
 800a0ee:	d109      	bne.n	800a104 <__libc_init_array+0x24>
 800a0f0:	4d0b      	ldr	r5, [pc, #44]	; (800a120 <__libc_init_array+0x40>)
 800a0f2:	4c0c      	ldr	r4, [pc, #48]	; (800a124 <__libc_init_array+0x44>)
 800a0f4:	f000 f818 	bl	800a128 <_init>
 800a0f8:	1b64      	subs	r4, r4, r5
 800a0fa:	10a4      	asrs	r4, r4, #2
 800a0fc:	2600      	movs	r6, #0
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	d105      	bne.n	800a10e <__libc_init_array+0x2e>
 800a102:	bd70      	pop	{r4, r5, r6, pc}
 800a104:	f855 3b04 	ldr.w	r3, [r5], #4
 800a108:	4798      	blx	r3
 800a10a:	3601      	adds	r6, #1
 800a10c:	e7ee      	b.n	800a0ec <__libc_init_array+0xc>
 800a10e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a112:	4798      	blx	r3
 800a114:	3601      	adds	r6, #1
 800a116:	e7f2      	b.n	800a0fe <__libc_init_array+0x1e>
 800a118:	0800a178 	.word	0x0800a178
 800a11c:	0800a178 	.word	0x0800a178
 800a120:	0800a178 	.word	0x0800a178
 800a124:	0800a17c 	.word	0x0800a17c

0800a128 <_init>:
 800a128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a12a:	bf00      	nop
 800a12c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a12e:	bc08      	pop	{r3}
 800a130:	469e      	mov	lr, r3
 800a132:	4770      	bx	lr

0800a134 <_fini>:
 800a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a136:	bf00      	nop
 800a138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a13a:	bc08      	pop	{r3}
 800a13c:	469e      	mov	lr, r3
 800a13e:	4770      	bx	lr
