
STM32F401_My_BootLoader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e34  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fd4  08001fd4  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08001fd4  08001fd4  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fd4  08001fd4  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fd4  08001fd4  00011fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fd8  08001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08001fdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000080  20000058  08002034  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08002034  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003b63  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fd9  00000000  00000000  00023c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b8  00000000  00000000  00024c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002aa  00000000  00000000  00024fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000026fb  00000000  00000000  0002526a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005453  00000000  00000000  00027965  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b399  00000000  00000000  0002cdb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000cd8  00000000  00000000  00038154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00038e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000058 	.word	0x20000058
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001fb0 	.word	0x08001fb0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000005c 	.word	0x2000005c
 80001d0:	08001fb0 	.word	0x08001fb0

080001d4 <u8VerifyCRC>:

extern USART_Config_t uart2;


static CRC_State_t u8VerifyCRC(uint8_t* copy_pu8DataArr , uint8_t copy_u8Length , uint32_t copy_u32HostCRC)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b088      	sub	sp, #32
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	460b      	mov	r3, r1
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	72fb      	strb	r3, [r7, #11]
	uint8_t Local_u8Iterator;
	CRC_State_t Local_u8CRCStatus;
	uint32_t Local_u32AccCRC , Local_u32Temp;
	for(Local_u8Iterator = 0 ; Local_u8Iterator < copy_u8Length ; Local_u8Iterator++)
 80001e2:	2300      	movs	r3, #0
 80001e4:	77fb      	strb	r3, [r7, #31]
 80001e6:	e00e      	b.n	8000206 <u8VerifyCRC+0x32>
	{
		Local_u32Temp = copy_pu8DataArr[Local_u8Iterator];
 80001e8:	7ffb      	ldrb	r3, [r7, #31]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	4413      	add	r3, r2
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	617b      	str	r3, [r7, #20]
		Local_u32AccCRC = CRC_Calculate(&Local_u32Temp , 1);
 80001f2:	f107 0314 	add.w	r3, r7, #20
 80001f6:	2101      	movs	r1, #1
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 fc35 	bl	8000a68 <CRC_Calculate>
 80001fe:	61b8      	str	r0, [r7, #24]
	for(Local_u8Iterator = 0 ; Local_u8Iterator < copy_u8Length ; Local_u8Iterator++)
 8000200:	7ffb      	ldrb	r3, [r7, #31]
 8000202:	3301      	adds	r3, #1
 8000204:	77fb      	strb	r3, [r7, #31]
 8000206:	7ffa      	ldrb	r2, [r7, #31]
 8000208:	7afb      	ldrb	r3, [r7, #11]
 800020a:	429a      	cmp	r2, r3
 800020c:	d3ec      	bcc.n	80001e8 <u8VerifyCRC+0x14>
	}
	/*Reset CRC Calculation unit عشان ميحسبش المره الجايه ع القيمه القديمه اللى مخزنها عنده*/
	CRC_Reset();
 800020e:	f000 fc1d 	bl	8000a4c <CRC_Reset>

	if(Local_u32AccCRC == copy_u32HostCRC)
 8000212:	69ba      	ldr	r2, [r7, #24]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	429a      	cmp	r2, r3
 8000218:	d102      	bne.n	8000220 <u8VerifyCRC+0x4c>
	{
		Local_u8CRCStatus = CRC_SUCCSSES;
 800021a:	2301      	movs	r3, #1
 800021c:	77bb      	strb	r3, [r7, #30]
 800021e:	e001      	b.n	8000224 <u8VerifyCRC+0x50>
	}
	else
	{
		Local_u8CRCStatus = CRC_FAIL;
 8000220:	2300      	movs	r3, #0
 8000222:	77bb      	strb	r3, [r7, #30]
	}
	return Local_u8CRCStatus;
 8000224:	7fbb      	ldrb	r3, [r7, #30]
}
 8000226:	4618      	mov	r0, r3
 8000228:	3720      	adds	r7, #32
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <voidSendAck>:

static void voidSendAck(uint8_t copy_u8ReplyLength)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]
	uint8_t Local_u8AckBuffer[2] = {BL_ACK , copy_u8ReplyLength	};
 800023a:	23a5      	movs	r3, #165	; 0xa5
 800023c:	733b      	strb	r3, [r7, #12]
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	737b      	strb	r3, [r7, #13]
	USART_send_byte_blocking(&uart2, Local_u8AckBuffer[0]);
 8000242:	7b3b      	ldrb	r3, [r7, #12]
 8000244:	4619      	mov	r1, r3
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <voidSendAck+0x30>)
 8000248:	f001 fabe 	bl	80017c8 <USART_send_byte_blocking>
	USART_send_byte_blocking(&uart2, Local_u8AckBuffer[1]);
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	4619      	mov	r1, r3
 8000250:	4803      	ldr	r0, [pc, #12]	; (8000260 <voidSendAck+0x30>)
 8000252:	f001 fab9 	bl	80017c8 <USART_send_byte_blocking>
}
 8000256:	bf00      	nop
 8000258:	3710      	adds	r7, #16
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
 800025e:	bf00      	nop
 8000260:	20000048 	.word	0x20000048

08000264 <voidSendNAck>:

static void voidSendNAck()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
	uint8_t Local_u8NAckBuffer = BL_NACK ;
 800026a:	237f      	movs	r3, #127	; 0x7f
 800026c:	71fb      	strb	r3, [r7, #7]
	USART_send_byte_blocking(&uart2, Local_u8NAckBuffer);
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4619      	mov	r1, r3
 8000272:	4803      	ldr	r0, [pc, #12]	; (8000280 <voidSendNAck+0x1c>)
 8000274:	f001 faa8 	bl	80017c8 <USART_send_byte_blocking>
}
 8000278:	bf00      	nop
 800027a:	3708      	adds	r7, #8
 800027c:	46bd      	mov	sp, r7
 800027e:	bd80      	pop	{r7, pc}
 8000280:	20000048 	.word	0x20000048

08000284 <u8ValidateAddress>:

static Address_State_t u8ValidateAddress(uint32_t copy_u32address)
{
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	Address_State_t Local_u8AddressStatus;

	if((copy_u32address >= FLASH_BASE_ADDRESS) && (copy_u32address <= FLASH_END_ADDRESS))
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000292:	d306      	bcc.n	80002a2 <u8ValidateAddress+0x1e>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a0c      	ldr	r2, [pc, #48]	; (80002c8 <u8ValidateAddress+0x44>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d802      	bhi.n	80002a2 <u8ValidateAddress+0x1e>
	{
		Local_u8AddressStatus = VALID_ADDRESS;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e00c      	b.n	80002bc <u8ValidateAddress+0x38>
	}
	else if((copy_u32address >= SRAM_BASE_ADDRESS) && (copy_u32address <= SRAM_END_ADDRESS))
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80002a8:	d306      	bcc.n	80002b8 <u8ValidateAddress+0x34>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a07      	ldr	r2, [pc, #28]	; (80002cc <u8ValidateAddress+0x48>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d802      	bhi.n	80002b8 <u8ValidateAddress+0x34>
	{
		Local_u8AddressStatus = VALID_ADDRESS;
 80002b2:	2300      	movs	r3, #0
 80002b4:	73fb      	strb	r3, [r7, #15]
 80002b6:	e001      	b.n	80002bc <u8ValidateAddress+0x38>
	}
	else
	{
		Local_u8AddressStatus = IN_VALID_ADDRESS;
 80002b8:	2301      	movs	r3, #1
 80002ba:	73fb      	strb	r3, [r7, #15]
	}
	return Local_u8AddressStatus;
 80002bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3714      	adds	r7, #20
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	08040000 	.word	0x08040000
 80002cc:	20010000 	.word	0x20010000

080002d0 <u8ExecuteFlashErase>:

static Std_RetType_t u8ExecuteFlashErase(uint8_t copy_u8SectorNumber , uint8_t copy_u8NumberOfSectors)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	460a      	mov	r2, r1
 80002da:	71fb      	strb	r3, [r7, #7]
 80002dc:	4613      	mov	r3, r2
 80002de:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t Local_ErrorStatus = RET_OK;
 80002e0:	2300      	movs	r3, #0
 80002e2:	73fb      	strb	r3, [r7, #15]

	if((copy_u8NumberOfSectors > 8) && (copy_u8SectorNumber != 0xff))
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	2b08      	cmp	r3, #8
 80002e8:	d905      	bls.n	80002f6 <u8ExecuteFlashErase+0x26>
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d002      	beq.n	80002f6 <u8ExecuteFlashErase+0x26>
	{
		Local_ErrorStatus = RET_ERROR;
 80002f0:	2301      	movs	r3, #1
 80002f2:	73fb      	strb	r3, [r7, #15]
 80002f4:	e026      	b.n	8000344 <u8ExecuteFlashErase+0x74>
	}
	else if((copy_u8SectorNumber > 7) && (copy_u8SectorNumber != 0xff))
 80002f6:	79fb      	ldrb	r3, [r7, #7]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d905      	bls.n	8000308 <u8ExecuteFlashErase+0x38>
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	2bff      	cmp	r3, #255	; 0xff
 8000300:	d002      	beq.n	8000308 <u8ExecuteFlashErase+0x38>
	{
		Local_ErrorStatus = RET_ERROR;
 8000302:	2301      	movs	r3, #1
 8000304:	73fb      	strb	r3, [r7, #15]
 8000306:	e01d      	b.n	8000344 <u8ExecuteFlashErase+0x74>
	}
	else
	{
		Flash_Unlock();
 8000308:	f000 fe66 	bl	8000fd8 <Flash_Unlock>
		if(copy_u8SectorNumber == 0xff)
 800030c:	79fb      	ldrb	r3, [r7, #7]
 800030e:	2bff      	cmp	r3, #255	; 0xff
 8000310:	d104      	bne.n	800031c <u8ExecuteFlashErase+0x4c>
		{
			/*Mass Erase*/
			Local_ErrorStatus = Flash_Mass_Erase();
 8000312:	f000 fe79 	bl	8001008 <Flash_Mass_Erase>
 8000316:	4603      	mov	r3, r0
 8000318:	73fb      	strb	r3, [r7, #15]
 800031a:	e011      	b.n	8000340 <u8ExecuteFlashErase+0x70>
		}
		else
		{
			/*Sector Erase*/
			uint8_t Local_u8RemainingSectors = 8 - copy_u8SectorNumber;  // 2  3
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f1c3 0308 	rsb	r3, r3, #8
 8000322:	73bb      	strb	r3, [r7, #14]
			if(copy_u8NumberOfSectors > Local_u8RemainingSectors)
 8000324:	79ba      	ldrb	r2, [r7, #6]
 8000326:	7bbb      	ldrb	r3, [r7, #14]
 8000328:	429a      	cmp	r2, r3
 800032a:	d901      	bls.n	8000330 <u8ExecuteFlashErase+0x60>
			{
				copy_u8NumberOfSectors = Local_u8RemainingSectors;
 800032c:	7bbb      	ldrb	r3, [r7, #14]
 800032e:	71bb      	strb	r3, [r7, #6]
			}
			else
			{
				/*Nothing*/
			}
			Local_ErrorStatus = Flash_Sector_Erase(copy_u8SectorNumber, copy_u8NumberOfSectors);
 8000330:	79ba      	ldrb	r2, [r7, #6]
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	4611      	mov	r1, r2
 8000336:	4618      	mov	r0, r3
 8000338:	f000 fe8e 	bl	8001058 <Flash_Sector_Erase>
 800033c:	4603      	mov	r3, r0
 800033e:	73fb      	strb	r3, [r7, #15]
		}
		Flash_Lock();
 8000340:	f000 fe36 	bl	8000fb0 <Flash_Lock>
	}
	return Local_ErrorStatus;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
}
 8000346:	4618      	mov	r0, r3
 8000348:	3710      	adds	r7, #16
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <u8ExecuteMemWrite>:

static Writing_State_t u8ExecuteMemWrite(uint8_t *Copy_pu8Buffer , uint32_t Copy_u32Address , uint8_t Copy_u8Length)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b086      	sub	sp, #24
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4613      	mov	r3, r2
 800035c:	71fb      	strb	r3, [r7, #7]
	Writing_State_t Local_u8ErrorStatus = WRITING_SUCCESS;
 800035e:	2300      	movs	r3, #0
 8000360:	75bb      	strb	r3, [r7, #22]
	uint8_t Local_u8Iterator ;
	if((Copy_u32Address >= FLASH_BASE_ADDRESS) && (Copy_u32Address <= FLASH_END_ADDRESS))
 8000362:	68bb      	ldr	r3, [r7, #8]
 8000364:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000368:	d31d      	bcc.n	80003a6 <u8ExecuteMemWrite+0x56>
 800036a:	68bb      	ldr	r3, [r7, #8]
 800036c:	4a1a      	ldr	r2, [pc, #104]	; (80003d8 <u8ExecuteMemWrite+0x88>)
 800036e:	4293      	cmp	r3, r2
 8000370:	d819      	bhi.n	80003a6 <u8ExecuteMemWrite+0x56>
	{
		/*Write in FLASH*/
		Flash_Unlock();
 8000372:	f000 fe31 	bl	8000fd8 <Flash_Unlock>
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000376:	2300      	movs	r3, #0
 8000378:	75fb      	strb	r3, [r7, #23]
 800037a:	e00d      	b.n	8000398 <u8ExecuteMemWrite+0x48>
		{
			Flash_Program((Copy_u32Address + Local_u8Iterator) ,(uint64_t)Copy_pu8Buffer[Local_u8Iterator] );
 800037c:	7dfa      	ldrb	r2, [r7, #23]
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	4413      	add	r3, r2
 8000382:	4618      	mov	r0, r3
 8000384:	7dfb      	ldrb	r3, [r7, #23]
 8000386:	68fa      	ldr	r2, [r7, #12]
 8000388:	4413      	add	r3, r2
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	4619      	mov	r1, r3
 800038e:	f000 fe97 	bl	80010c0 <Flash_Program>
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 8000392:	7dfb      	ldrb	r3, [r7, #23]
 8000394:	3301      	adds	r3, #1
 8000396:	75fb      	strb	r3, [r7, #23]
 8000398:	7dfa      	ldrb	r2, [r7, #23]
 800039a:	79fb      	ldrb	r3, [r7, #7]
 800039c:	429a      	cmp	r2, r3
 800039e:	d3ed      	bcc.n	800037c <u8ExecuteMemWrite+0x2c>
		}
		Flash_Lock();
 80003a0:	f000 fe06 	bl	8000fb0 <Flash_Lock>
 80003a4:	e013      	b.n	80003ce <u8ExecuteMemWrite+0x7e>
	}
	else
	{
		/*Write in SRAM*/
		uint8_t* Local_u32PDest = (uint8_t *)Copy_u32Address;
 80003a6:	68bb      	ldr	r3, [r7, #8]
 80003a8:	613b      	str	r3, [r7, #16]
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 80003aa:	2300      	movs	r3, #0
 80003ac:	75fb      	strb	r3, [r7, #23]
 80003ae:	e00a      	b.n	80003c6 <u8ExecuteMemWrite+0x76>
		{
			Local_u32PDest[Local_u8Iterator] = Copy_pu8Buffer[Local_u8Iterator];
 80003b0:	7dfb      	ldrb	r3, [r7, #23]
 80003b2:	68fa      	ldr	r2, [r7, #12]
 80003b4:	441a      	add	r2, r3
 80003b6:	7dfb      	ldrb	r3, [r7, #23]
 80003b8:	6939      	ldr	r1, [r7, #16]
 80003ba:	440b      	add	r3, r1
 80003bc:	7812      	ldrb	r2, [r2, #0]
 80003be:	701a      	strb	r2, [r3, #0]
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Copy_u8Length ; Local_u8Iterator++)
 80003c0:	7dfb      	ldrb	r3, [r7, #23]
 80003c2:	3301      	adds	r3, #1
 80003c4:	75fb      	strb	r3, [r7, #23]
 80003c6:	7dfa      	ldrb	r2, [r7, #23]
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d3f0      	bcc.n	80003b0 <u8ExecuteMemWrite+0x60>
		}

	}
	return Local_u8ErrorStatus;
 80003ce:	7dbb      	ldrb	r3, [r7, #22]
}
 80003d0:	4618      	mov	r0, r3
 80003d2:	3718      	adds	r7, #24
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	08040000 	.word	0x08040000

080003dc <u8ExecuteEnableRWProtection>:

static Std_RetType_t u8ExecuteEnableRWProtection(uint8_t SectorDetails , uint8_t ProtectionMode)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b084      	sub	sp, #16
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	460a      	mov	r2, r1
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	4613      	mov	r3, r2
 80003ea:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 80003ec:	2300      	movs	r3, #0
 80003ee:	73fb      	strb	r3, [r7, #15]

	ret = FLASH_OPT_Unlock();
 80003f0:	f000 fea2 	bl	8001138 <FLASH_OPT_Unlock>
 80003f4:	4603      	mov	r3, r0
 80003f6:	73fb      	strb	r3, [r7, #15]

	if(WRITE_PROTECTION_MODE == ProtectionMode)
 80003f8:	79bb      	ldrb	r3, [r7, #6]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d108      	bne.n	8000410 <u8ExecuteEnableRWProtection+0x34>
	{
		Flash_Enable_Sectors_Protections(SECTOR_WRITE_PROTECTOIN ,(SectorDetails & 0x3f));
 80003fe:	79fb      	ldrb	r3, [r7, #7]
 8000400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000404:	b2db      	uxtb	r3, r3
 8000406:	4619      	mov	r1, r3
 8000408:	2000      	movs	r0, #0
 800040a:	f000 fea9 	bl	8001160 <Flash_Enable_Sectors_Protections>
 800040e:	e007      	b.n	8000420 <u8ExecuteEnableRWProtection+0x44>
	}
	else if(RW_PROTECTION_MODE)
	{
		Flash_Enable_Sectors_Protections(SECTOR_Rw_PROTECTOIN ,(SectorDetails & 0x3f));
 8000410:	79fb      	ldrb	r3, [r7, #7]
 8000412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000416:	b2db      	uxtb	r3, r3
 8000418:	4619      	mov	r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	f000 fea0 	bl	8001160 <Flash_Enable_Sectors_Protections>
	}
	ret = FLASH_OPT_Lock();
 8000420:	f000 fe7a 	bl	8001118 <FLASH_OPT_Lock>
 8000424:	4603      	mov	r3, r0
 8000426:	73fb      	strb	r3, [r7, #15]
	return ret;
 8000428:	7bfb      	ldrb	r3, [r7, #15]
}
 800042a:	4618      	mov	r0, r3
 800042c:	3710      	adds	r7, #16
 800042e:	46bd      	mov	sp, r7
 8000430:	bd80      	pop	{r7, pc}
	...

08000434 <BL_voidHandleGetVerCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleGetVerCmd(uint8_t* copy_pu8CmdPacket)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b086      	sub	sp, #24
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8BLVercion , Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	3301      	adds	r3, #1
 8000442:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 8000444:	7dfb      	ldrb	r3, [r7, #23]
 8000446:	3b04      	subs	r3, #4
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4413      	add	r3, r2
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000450:	7dfb      	ldrb	r3, [r7, #23]
 8000452:	3b04      	subs	r3, #4
 8000454:	b2db      	uxtb	r3, r3
 8000456:	693a      	ldr	r2, [r7, #16]
 8000458:	4619      	mov	r1, r3
 800045a:	6878      	ldr	r0, [r7, #4]
 800045c:	f7ff feba 	bl	80001d4 <u8VerifyCRC>
 8000460:	4603      	mov	r3, r0
 8000462:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 8000464:	7bfb      	ldrb	r3, [r7, #15]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d10a      	bne.n	8000480 <BL_voidHandleGetVerCmd+0x4c>
	{
		voidSendAck(1U); /*Bootloader version has size of 1 byte*/
 800046a:	2001      	movs	r0, #1
 800046c:	f7ff fee0 	bl	8000230 <voidSendAck>
		Local_u8BLVercion = BL_Version;
 8000470:	2301      	movs	r3, #1
 8000472:	73bb      	strb	r3, [r7, #14]
		USART_send_byte_blocking(&uart2,Local_u8BLVercion );
 8000474:	7bbb      	ldrb	r3, [r7, #14]
 8000476:	4619      	mov	r1, r3
 8000478:	4804      	ldr	r0, [pc, #16]	; (800048c <BL_voidHandleGetVerCmd+0x58>)
 800047a:	f001 f9a5 	bl	80017c8 <USART_send_byte_blocking>
	else
	{
		voidSendNAck();
	}

}
 800047e:	e001      	b.n	8000484 <BL_voidHandleGetVerCmd+0x50>
		voidSendNAck();
 8000480:	f7ff fef0 	bl	8000264 <voidSendNAck>
}
 8000484:	bf00      	nop
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000048 	.word	0x20000048

08000490 <BL_voidHandleGetHelpCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleGetHelpCmd(uint8_t* copy_pu8CmdPacket)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	3301      	adds	r3, #1
 800049e:	77bb      	strb	r3, [r7, #30]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 80004a0:	7fbb      	ldrb	r3, [r7, #30]
 80004a2:	3b04      	subs	r3, #4
 80004a4:	687a      	ldr	r2, [r7, #4]
 80004a6:	4413      	add	r3, r2
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	61bb      	str	r3, [r7, #24]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 80004ac:	7fbb      	ldrb	r3, [r7, #30]
 80004ae:	3b04      	subs	r3, #4
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	69ba      	ldr	r2, [r7, #24]
 80004b4:	4619      	mov	r1, r3
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f7ff fe8c 	bl	80001d4 <u8VerifyCRC>
 80004bc:	4603      	mov	r3, r0
 80004be:	75fb      	strb	r3, [r7, #23]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 80004c0:	7dfb      	ldrb	r3, [r7, #23]
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d11b      	bne.n	80004fe <BL_voidHandleGetHelpCmd+0x6e>
	{
		uint8_t Local_Pu8BLCommands[] = {	BL_GET_VER    		  ,
 80004c6:	4a11      	ldr	r2, [pc, #68]	; (800050c <BL_voidHandleGetHelpCmd+0x7c>)
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
											BL_MEM_READ    		  ,
	                                        BL_READ_SECTOR_STATUS ,
	                                        BL_OTP_READ    		  ,
	                                        BL_DIS_WR_PROTECT
		};
		voidSendAck(sizeof(Local_Pu8BLCommands));
 80004d2:	200c      	movs	r0, #12
 80004d4:	f7ff feac 	bl	8000230 <voidSendAck>
		for(uint8_t local_iterator = 0 ; local_iterator < sizeof(Local_Pu8BLCommands) ; local_iterator++)
 80004d8:	2300      	movs	r3, #0
 80004da:	77fb      	strb	r3, [r7, #31]
 80004dc:	e00b      	b.n	80004f6 <BL_voidHandleGetHelpCmd+0x66>
		{
			USART_send_byte_blocking(&uart2,Local_Pu8BLCommands[local_iterator]);
 80004de:	7ffb      	ldrb	r3, [r7, #31]
 80004e0:	3320      	adds	r3, #32
 80004e2:	443b      	add	r3, r7
 80004e4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80004e8:	4619      	mov	r1, r3
 80004ea:	4809      	ldr	r0, [pc, #36]	; (8000510 <BL_voidHandleGetHelpCmd+0x80>)
 80004ec:	f001 f96c 	bl	80017c8 <USART_send_byte_blocking>
		for(uint8_t local_iterator = 0 ; local_iterator < sizeof(Local_Pu8BLCommands) ; local_iterator++)
 80004f0:	7ffb      	ldrb	r3, [r7, #31]
 80004f2:	3301      	adds	r3, #1
 80004f4:	77fb      	strb	r3, [r7, #31]
 80004f6:	7ffb      	ldrb	r3, [r7, #31]
 80004f8:	2b0b      	cmp	r3, #11
 80004fa:	d9f0      	bls.n	80004de <BL_voidHandleGetHelpCmd+0x4e>
	else
	{
		voidSendNAck();
	}

}
 80004fc:	e001      	b.n	8000502 <BL_voidHandleGetHelpCmd+0x72>
		voidSendNAck();
 80004fe:	f7ff feb1 	bl	8000264 <voidSendNAck>
}
 8000502:	bf00      	nop
 8000504:	3720      	adds	r7, #32
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	08001fc8 	.word	0x08001fc8
 8000510:	20000048 	.word	0x20000048

08000514 <BL_voidHandleGetCIDCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleGetCIDCmd(uint8_t* copy_pu8CmdPacket)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;
	uint16_t Local_u16CID;
	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	3b04      	subs	r3, #4
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	4413      	add	r3, r2
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000530:	7dfb      	ldrb	r3, [r7, #23]
 8000532:	3b04      	subs	r3, #4
 8000534:	b2db      	uxtb	r3, r3
 8000536:	693a      	ldr	r2, [r7, #16]
 8000538:	4619      	mov	r1, r3
 800053a:	6878      	ldr	r0, [r7, #4]
 800053c:	f7ff fe4a 	bl	80001d4 <u8VerifyCRC>
 8000540:	4603      	mov	r3, r0
 8000542:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d117      	bne.n	800057a <BL_voidHandleGetCIDCmd+0x66>
	{
		Local_u16CID = (uint16_t)(DBGMCU_IDCODE & 0x0fff);
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <BL_voidHandleGetCIDCmd+0x74>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	b29b      	uxth	r3, r3
 8000550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000554:	81bb      	strh	r3, [r7, #12]
		voidSendAck(2U);
 8000556:	2002      	movs	r0, #2
 8000558:	f7ff fe6a 	bl	8000230 <voidSendAck>
		USART_send_byte_blocking(&uart2,Local_u16CID);
 800055c:	89bb      	ldrh	r3, [r7, #12]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4619      	mov	r1, r3
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <BL_voidHandleGetCIDCmd+0x78>)
 8000564:	f001 f930 	bl	80017c8 <USART_send_byte_blocking>
		USART_send_byte_blocking(&uart2,(Local_u16CID>>8));
 8000568:	89bb      	ldrh	r3, [r7, #12]
 800056a:	0a1b      	lsrs	r3, r3, #8
 800056c:	b29b      	uxth	r3, r3
 800056e:	b2db      	uxtb	r3, r3
 8000570:	4619      	mov	r1, r3
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <BL_voidHandleGetCIDCmd+0x78>)
 8000574:	f001 f928 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 8000578:	e001      	b.n	800057e <BL_voidHandleGetCIDCmd+0x6a>
		voidSendNAck();
 800057a:	f7ff fe73 	bl	8000264 <voidSendNAck>
}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	e0042000 	.word	0xe0042000
 800058c:	20000048 	.word	0x20000048

08000590 <BL_voidHandleGetRDPStatusCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleGetRDPStatusCmd(uint8_t* copy_pu8CmdPacket)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b086      	sub	sp, #24
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength , Local_u8RDPVal;
	uint32_t Local_u32HostCRC;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 80005a0:	7dfb      	ldrb	r3, [r7, #23]
 80005a2:	3b04      	subs	r3, #4
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 80005ac:	7dfb      	ldrb	r3, [r7, #23]
 80005ae:	3b04      	subs	r3, #4
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	693a      	ldr	r2, [r7, #16]
 80005b4:	4619      	mov	r1, r3
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f7ff fe0c 	bl	80001d4 <u8VerifyCRC>
 80005bc:	4603      	mov	r3, r0
 80005be:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d10c      	bne.n	80005e0 <BL_voidHandleGetRDPStatusCmd+0x50>
	{
		voidSendAck(1U);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f7ff fe32 	bl	8000230 <voidSendAck>
		Local_u8RDPVal = ((uint8_t)(RDP_USER_OPTION_WORDS >> 8) &(0xff));
 80005cc:	4b07      	ldr	r3, [pc, #28]	; (80005ec <BL_voidHandleGetRDPStatusCmd+0x5c>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	73bb      	strb	r3, [r7, #14]
		USART_send_byte_blocking(&uart2,Local_u8RDPVal);
 80005d4:	7bbb      	ldrb	r3, [r7, #14]
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <BL_voidHandleGetRDPStatusCmd+0x60>)
 80005da:	f001 f8f5 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 80005de:	e001      	b.n	80005e4 <BL_voidHandleGetRDPStatusCmd+0x54>
		voidSendNAck();
 80005e0:	f7ff fe40 	bl	8000264 <voidSendNAck>
}
 80005e4:	bf00      	nop
 80005e6:	3718      	adds	r7, #24
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	1fffc000 	.word	0x1fffc000
 80005f0:	20000048 	.word	0x20000048

080005f4 <BL_voidHandleGoToAddressCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleGoToAddressCmd(uint8_t* copy_pu8CmdPacket)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b088      	sub	sp, #32
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength ;
	uint32_t Local_u32HostCRC  , Local_u32Address;
	Address_State_t Local_u8AddressStatus;
	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	3301      	adds	r3, #1
 8000602:	77fb      	strb	r3, [r7, #31]
	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 8000604:	7ffb      	ldrb	r3, [r7, #31]
 8000606:	3b04      	subs	r3, #4
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	4413      	add	r3, r2
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	61bb      	str	r3, [r7, #24]
	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000610:	7ffb      	ldrb	r3, [r7, #31]
 8000612:	3b04      	subs	r3, #4
 8000614:	b2db      	uxtb	r3, r3
 8000616:	69ba      	ldr	r2, [r7, #24]
 8000618:	4619      	mov	r1, r3
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f7ff fdda 	bl	80001d4 <u8VerifyCRC>
 8000620:	4603      	mov	r3, r0
 8000622:	75fb      	strb	r3, [r7, #23]
	if(Local_u8RCRStatus == CRC_SUCCSSES)
 8000624:	7dfb      	ldrb	r3, [r7, #23]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d120      	bne.n	800066c <BL_voidHandleGoToAddressCmd+0x78>
	{
		voidSendAck(1U);
 800062a:	2001      	movs	r0, #1
 800062c:	f7ff fe00 	bl	8000230 <voidSendAck>
		Local_u32Address = *((uint32_t *)&copy_pu8CmdPacket[2]);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000636:	613b      	str	r3, [r7, #16]
		Local_u8AddressStatus = u8ValidateAddress(Local_u32Address);
 8000638:	6938      	ldr	r0, [r7, #16]
 800063a:	f7ff fe23 	bl	8000284 <u8ValidateAddress>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
		if(VALID_ADDRESS == Local_u8AddressStatus)
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d10b      	bne.n	8000660 <BL_voidHandleGoToAddressCmd+0x6c>
		{
			USART_send_byte_blocking(&uart2,Local_u8AddressStatus);
 8000648:	7bfb      	ldrb	r3, [r7, #15]
 800064a:	4619      	mov	r1, r3
 800064c:	480a      	ldr	r0, [pc, #40]	; (8000678 <BL_voidHandleGoToAddressCmd+0x84>)
 800064e:	f001 f8bb 	bl	80017c8 <USART_send_byte_blocking>
			void (*Local_PFunc)(void) = NULL;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
			Local_PFunc = (void*)Local_u32Address;
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	60bb      	str	r3, [r7, #8]
			Local_PFunc();
 800065a:	68bb      	ldr	r3, [r7, #8]
 800065c:	4798      	blx	r3
	}
	else
	{
		voidSendNAck();
	}
}
 800065e:	e007      	b.n	8000670 <BL_voidHandleGoToAddressCmd+0x7c>
			USART_send_byte_blocking(&uart2,Local_u8AddressStatus);
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <BL_voidHandleGoToAddressCmd+0x84>)
 8000666:	f001 f8af 	bl	80017c8 <USART_send_byte_blocking>
}
 800066a:	e001      	b.n	8000670 <BL_voidHandleGoToAddressCmd+0x7c>
		voidSendNAck();
 800066c:	f7ff fdfa 	bl	8000264 <voidSendNAck>
}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000048 	.word	0x20000048

0800067c <BL_voidHandleFlashEraseCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleFlashEraseCmd(uint8_t* copy_pu8CmdPacket)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;
	Std_RetType_t Localu8_ErrorStatus;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 800068c:	7dfb      	ldrb	r3, [r7, #23]
 800068e:	3b04      	subs	r3, #4
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	4413      	add	r3, r2
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000698:	7dfb      	ldrb	r3, [r7, #23]
 800069a:	3b04      	subs	r3, #4
 800069c:	b2db      	uxtb	r3, r3
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	4619      	mov	r1, r3
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f7ff fd96 	bl	80001d4 <u8VerifyCRC>
 80006a8:	4603      	mov	r3, r0
 80006aa:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d114      	bne.n	80006dc <BL_voidHandleFlashEraseCmd+0x60>
	{
		voidSendAck(1U);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff fdbc 	bl	8000230 <voidSendAck>
		Localu8_ErrorStatus = u8ExecuteFlashErase(copy_pu8CmdPacket[2] , copy_pu8CmdPacket[3]);
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	3302      	adds	r3, #2
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	3303      	adds	r3, #3
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	4619      	mov	r1, r3
 80006c6:	4610      	mov	r0, r2
 80006c8:	f7ff fe02 	bl	80002d0 <u8ExecuteFlashErase>
 80006cc:	4603      	mov	r3, r0
 80006ce:	73bb      	strb	r3, [r7, #14]
		USART_send_byte_blocking(&uart2,Localu8_ErrorStatus);
 80006d0:	7bbb      	ldrb	r3, [r7, #14]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <BL_voidHandleFlashEraseCmd+0x6c>)
 80006d6:	f001 f877 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 80006da:	e001      	b.n	80006e0 <BL_voidHandleFlashEraseCmd+0x64>
		voidSendNAck();
 80006dc:	f7ff fdc2 	bl	8000264 <voidSendNAck>
}
 80006e0:	bf00      	nop
 80006e2:	3718      	adds	r7, #24
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000048 	.word	0x20000048

080006ec <BL_voidHandleMemWriteCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleMemWriteCmd(uint8_t* copy_pu8CmdPacket)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC  , Local_u32Address;
	Address_State_t Local_u8AddressStatus;
	Writing_State_t Local_u8WritingStatus;
	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	77bb      	strb	r3, [r7, #30]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 80006fc:	7fbb      	ldrb	r3, [r7, #30]
 80006fe:	3b04      	subs	r3, #4
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	61bb      	str	r3, [r7, #24]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000708:	7fbb      	ldrb	r3, [r7, #30]
 800070a:	3b04      	subs	r3, #4
 800070c:	b2db      	uxtb	r3, r3
 800070e:	69ba      	ldr	r2, [r7, #24]
 8000710:	4619      	mov	r1, r3
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fd5e 	bl	80001d4 <u8VerifyCRC>
 8000718:	4603      	mov	r3, r0
 800071a:	75fb      	strb	r3, [r7, #23]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d123      	bne.n	800076a <BL_voidHandleMemWriteCmd+0x7e>
	{
		Local_u32Address = *((uint32_t*)&copy_pu8CmdPacket[2]);
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000728:	613b      	str	r3, [r7, #16]
		Local_u8AddressStatus = u8ValidateAddress(Local_u32Address);
 800072a:	6938      	ldr	r0, [r7, #16]
 800072c:	f7ff fdaa 	bl	8000284 <u8ValidateAddress>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]

		voidSendAck(1U);
 8000734:	2001      	movs	r0, #1
 8000736:	f7ff fd7b 	bl	8000230 <voidSendAck>

		if(VALID_ADDRESS == Local_u8AddressStatus)
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d10c      	bne.n	800075a <BL_voidHandleMemWriteCmd+0x6e>
		{
			uint8_t Local_u8PayLoadLength = copy_pu8CmdPacket[6];
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	799b      	ldrb	r3, [r3, #6]
 8000744:	73bb      	strb	r3, [r7, #14]
			Local_u8WritingStatus = u8ExecuteMemWrite(&copy_pu8CmdPacket[7] , Local_u32Address , Local_u8PayLoadLength);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	3307      	adds	r3, #7
 800074a:	7bba      	ldrb	r2, [r7, #14]
 800074c:	6939      	ldr	r1, [r7, #16]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fdfe 	bl	8000350 <u8ExecuteMemWrite>
 8000754:	4603      	mov	r3, r0
 8000756:	77fb      	strb	r3, [r7, #31]
 8000758:	e001      	b.n	800075e <BL_voidHandleMemWriteCmd+0x72>
		}
		else
		{
			Local_u8WritingStatus = WRITING_ERROR;
 800075a:	2301      	movs	r3, #1
 800075c:	77fb      	strb	r3, [r7, #31]
		}
		USART_send_byte_blocking(&uart2,Local_u8WritingStatus);
 800075e:	7ffb      	ldrb	r3, [r7, #31]
 8000760:	4619      	mov	r1, r3
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <BL_voidHandleMemWriteCmd+0x8c>)
 8000764:	f001 f830 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 8000768:	e001      	b.n	800076e <BL_voidHandleMemWriteCmd+0x82>
		voidSendNAck();
 800076a:	f7ff fd7b 	bl	8000264 <voidSendNAck>
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000048 	.word	0x20000048

0800077c <BL_voidHandleEnableRWCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleEnableRWCmd(uint8_t* copy_pu8CmdPacket)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b086      	sub	sp, #24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;
	uint8_t Local_u8SectorDetails , Local_u8Protectionmode;
	Std_RetType_t ret = RET_OK;
 8000784:	2300      	movs	r3, #0
 8000786:	75fb      	strb	r3, [r7, #23]
	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	3301      	adds	r3, #1
 800078e:	75bb      	strb	r3, [r7, #22]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 8000790:	7dbb      	ldrb	r3, [r7, #22]
 8000792:	3b04      	subs	r3, #4
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	4413      	add	r3, r2
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 800079c:	7dbb      	ldrb	r3, [r7, #22]
 800079e:	3b04      	subs	r3, #4
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	4619      	mov	r1, r3
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f7ff fd14 	bl	80001d4 <u8VerifyCRC>
 80007ac:	4603      	mov	r3, r0
 80007ae:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d116      	bne.n	80007e4 <BL_voidHandleEnableRWCmd+0x68>
	{
		Local_u8SectorDetails  =  copy_pu8CmdPacket[2];
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	789b      	ldrb	r3, [r3, #2]
 80007ba:	73bb      	strb	r3, [r7, #14]
		Local_u8Protectionmode = copy_pu8CmdPacket[3];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	78db      	ldrb	r3, [r3, #3]
 80007c0:	737b      	strb	r3, [r7, #13]
		ret = u8ExecuteEnableRWProtection(Local_u8SectorDetails , Local_u8Protectionmode);
 80007c2:	7b7a      	ldrb	r2, [r7, #13]
 80007c4:	7bbb      	ldrb	r3, [r7, #14]
 80007c6:	4611      	mov	r1, r2
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff fe07 	bl	80003dc <u8ExecuteEnableRWProtection>
 80007ce:	4603      	mov	r3, r0
 80007d0:	75fb      	strb	r3, [r7, #23]
		voidSendAck(1U);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fd2c 	bl	8000230 <voidSendAck>

		USART_send_byte_blocking(&uart2,ret);
 80007d8:	7dfb      	ldrb	r3, [r7, #23]
 80007da:	4619      	mov	r1, r3
 80007dc:	4804      	ldr	r0, [pc, #16]	; (80007f0 <BL_voidHandleEnableRWCmd+0x74>)
 80007de:	f000 fff3 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 80007e2:	e001      	b.n	80007e8 <BL_voidHandleEnableRWCmd+0x6c>
		voidSendNAck();
 80007e4:	f7ff fd3e 	bl	8000264 <voidSendNAck>
}
 80007e8:	bf00      	nop
 80007ea:	3718      	adds	r7, #24
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000048 	.word	0x20000048

080007f4 <BL_voidHandleMemReadCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleMemReadCmd(uint8_t* copy_pu8CmdPacket)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b088      	sub	sp, #32
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	uint32_t Local_u32HostCRC;

	uint32_t Local_u32Address ;
	uint8_t Local_u8DataLength;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	3301      	adds	r3, #1
 8000802:	77bb      	strb	r3, [r7, #30]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 8000804:	7fbb      	ldrb	r3, [r7, #30]
 8000806:	3b04      	subs	r3, #4
 8000808:	687a      	ldr	r2, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	61bb      	str	r3, [r7, #24]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000810:	7fbb      	ldrb	r3, [r7, #30]
 8000812:	3b04      	subs	r3, #4
 8000814:	b2db      	uxtb	r3, r3
 8000816:	69ba      	ldr	r2, [r7, #24]
 8000818:	4619      	mov	r1, r3
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff fcda 	bl	80001d4 <u8VerifyCRC>
 8000820:	4603      	mov	r3, r0
 8000822:	75fb      	strb	r3, [r7, #23]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 8000824:	7dfb      	ldrb	r3, [r7, #23]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d11f      	bne.n	800086a <BL_voidHandleMemReadCmd+0x76>
	{
		Local_u32Address = *((uint32_t*)&copy_pu8CmdPacket[2]);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000830:	613b      	str	r3, [r7, #16]
		Local_u8DataLength = copy_pu8CmdPacket[6];
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	799b      	ldrb	r3, [r3, #6]
 8000836:	73fb      	strb	r3, [r7, #15]

		voidSendAck(Local_u8DataLength);
 8000838:	7bfb      	ldrb	r3, [r7, #15]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff fcf8 	bl	8000230 <voidSendAck>
		uint8_t Local_u8Iterator , Local_u8Data;
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Local_u8DataLength ; Local_u8Iterator++)
 8000840:	2300      	movs	r3, #0
 8000842:	77fb      	strb	r3, [r7, #31]
 8000844:	e00c      	b.n	8000860 <BL_voidHandleMemReadCmd+0x6c>
		{
			Local_u8Data = *((uint8_t*)Local_u32Address + Local_u8Iterator);
 8000846:	7ffa      	ldrb	r2, [r7, #31]
 8000848:	693b      	ldr	r3, [r7, #16]
 800084a:	4413      	add	r3, r2
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	73bb      	strb	r3, [r7, #14]
			USART_send_byte_blocking(&uart2 , Local_u8Data);
 8000850:	7bbb      	ldrb	r3, [r7, #14]
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <BL_voidHandleMemReadCmd+0x84>)
 8000856:	f000 ffb7 	bl	80017c8 <USART_send_byte_blocking>
		for(Local_u8Iterator = 0 ; Local_u8Iterator < Local_u8DataLength ; Local_u8Iterator++)
 800085a:	7ffb      	ldrb	r3, [r7, #31]
 800085c:	3301      	adds	r3, #1
 800085e:	77fb      	strb	r3, [r7, #31]
 8000860:	7ffa      	ldrb	r2, [r7, #31]
 8000862:	7bfb      	ldrb	r3, [r7, #15]
 8000864:	429a      	cmp	r2, r3
 8000866:	d3ee      	bcc.n	8000846 <BL_voidHandleMemReadCmd+0x52>
	}
	else
	{
		voidSendNAck();
	}
}
 8000868:	e001      	b.n	800086e <BL_voidHandleMemReadCmd+0x7a>
		voidSendNAck();
 800086a:	f7ff fcfb 	bl	8000264 <voidSendNAck>
}
 800086e:	bf00      	nop
 8000870:	3720      	adds	r7, #32
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000048 	.word	0x20000048

0800087c <BL_voidHandleReadSectorStatusCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleReadSectorStatusCmd(uint8_t* copy_pu8CmdPacket)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;

	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	3301      	adds	r3, #1
 800088a:	75fb      	strb	r3, [r7, #23]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 800088c:	7dfb      	ldrb	r3, [r7, #23]
 800088e:	3b04      	subs	r3, #4
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4413      	add	r3, r2
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	3b04      	subs	r3, #4
 800089c:	b2db      	uxtb	r3, r3
 800089e:	693a      	ldr	r2, [r7, #16]
 80008a0:	4619      	mov	r1, r3
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f7ff fc96 	bl	80001d4 <u8VerifyCRC>
 80008a8:	4603      	mov	r3, r0
 80008aa:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 80008ac:	7bfb      	ldrb	r3, [r7, #15]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10d      	bne.n	80008ce <BL_voidHandleReadSectorStatusCmd+0x52>
	{
		voidSendAck(1U);
 80008b2:	2001      	movs	r0, #1
 80008b4:	f7ff fcbc 	bl	8000230 <voidSendAck>
		uint8_t Local_SectorDetails ;
		Flash_Read_Sector_Status(&Local_SectorDetails);
 80008b8:	f107 030e 	add.w	r3, r7, #14
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fc91 	bl	80011e4 <Flash_Read_Sector_Status>
		USART_send_byte_blocking(&uart2,Local_SectorDetails);
 80008c2:	7bbb      	ldrb	r3, [r7, #14]
 80008c4:	4619      	mov	r1, r3
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <BL_voidHandleReadSectorStatusCmd+0x60>)
 80008c8:	f000 ff7e 	bl	80017c8 <USART_send_byte_blocking>
	}
	else
	{
		voidSendNAck();
	}
}
 80008cc:	e001      	b.n	80008d2 <BL_voidHandleReadSectorStatusCmd+0x56>
		voidSendNAck();
 80008ce:	f7ff fcc9 	bl	8000264 <voidSendNAck>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	20000048 	.word	0x20000048

080008e0 <BL_voidHandleOTPReadCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleOTPReadCmd(uint8_t* copy_pu8CmdPacket)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
		uint32_t Local_u32HostCRC;

		Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	3301      	adds	r3, #1
 80008ee:	75fb      	strb	r3, [r7, #23]

		Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 80008f0:	7dfb      	ldrb	r3, [r7, #23]
 80008f2:	3b04      	subs	r3, #4
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	4413      	add	r3, r2
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	613b      	str	r3, [r7, #16]

		Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	3b04      	subs	r3, #4
 8000900:	b2db      	uxtb	r3, r3
 8000902:	693a      	ldr	r2, [r7, #16]
 8000904:	4619      	mov	r1, r3
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff fc64 	bl	80001d4 <u8VerifyCRC>
 800090c:	4603      	mov	r3, r0
 800090e:	73fb      	strb	r3, [r7, #15]

		if(Local_u8RCRStatus == CRC_SUCCSSES)
 8000910:	7bfb      	ldrb	r3, [r7, #15]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d103      	bne.n	800091e <BL_voidHandleOTPReadCmd+0x3e>
		{
			voidSendAck(1U);
 8000916:	2001      	movs	r0, #1
 8000918:	f7ff fc8a 	bl	8000230 <voidSendAck>
		}
		else
		{
			voidSendNAck();
		}
}
 800091c:	e001      	b.n	8000922 <BL_voidHandleOTPReadCmd+0x42>
			voidSendNAck();
 800091e:	f7ff fca1 	bl	8000264 <voidSendNAck>
}
 8000922:	bf00      	nop
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <BL_voidHandleDisableWRProtectCmd>:
 * @param  : (copy_pu8CmdPacket) Pointer to the Command Packet
 * @return : (void)
 *
 */
void BL_voidHandleDisableWRProtectCmd(uint8_t* copy_pu8CmdPacket)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	uint8_t  Local_u8RCRStatus , Local_u8CmdLength;
	uint32_t Local_u32HostCRC;
	Std_RetType_t ret = RET_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	75fb      	strb	r3, [r7, #23]
	Local_u8CmdLength = copy_pu8CmdPacket[0]+1;/*value inside length to follow + 1(size of length to follow itself)*/
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	75bb      	strb	r3, [r7, #22]

	Local_u32HostCRC = *((uint32_t*)(copy_pu8CmdPacket+Local_u8CmdLength-4));
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	3b04      	subs	r3, #4
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	4413      	add	r3, r2
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	613b      	str	r3, [r7, #16]

	Local_u8RCRStatus = u8VerifyCRC(copy_pu8CmdPacket , Local_u8CmdLength-4 , Local_u32HostCRC);
 800094a:	7dbb      	ldrb	r3, [r7, #22]
 800094c:	3b04      	subs	r3, #4
 800094e:	b2db      	uxtb	r3, r3
 8000950:	693a      	ldr	r2, [r7, #16]
 8000952:	4619      	mov	r1, r3
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	f7ff fc3d 	bl	80001d4 <u8VerifyCRC>
 800095a:	4603      	mov	r3, r0
 800095c:	73fb      	strb	r3, [r7, #15]

	if(Local_u8RCRStatus == CRC_SUCCSSES)
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	2b01      	cmp	r3, #1
 8000962:	d103      	bne.n	800096c <BL_voidHandleDisableWRProtectCmd+0x42>
	{
		voidSendAck(1U);
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fc63 	bl	8000230 <voidSendAck>
	}
	else
	{
		voidSendNAck();
	}
}
 800096a:	e001      	b.n	8000970 <BL_voidHandleDisableWRProtectCmd+0x46>
		voidSendNAck();
 800096c:	f7ff fc7a 	bl	8000264 <voidSendNAck>
}
 8000970:	bf00      	nop
 8000972:	3718      	adds	r7, #24
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <nvic_enable>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t nvic_enable(IRQn_Type IRQNum)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
	Std_RetType_t ret = RET_OK;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]
	uint8_t l_Reg_num ;
	uint8_t l_Bit_num ;
	if(IRQNum > SPI4_IRQn)
 8000986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800098a:	2b54      	cmp	r3, #84	; 0x54
 800098c:	dd02      	ble.n	8000994 <nvic_enable+0x1c>
	{
		ret = RET_ERROR;
 800098e:	2301      	movs	r3, #1
 8000990:	73fb      	strb	r3, [r7, #15]
 8000992:	e01a      	b.n	80009ca <nvic_enable+0x52>
	}
	else
	{
		/*interrupt enable*/
		l_Reg_num = (IRQNum / 32);
 8000994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000998:	2b00      	cmp	r3, #0
 800099a:	da00      	bge.n	800099e <nvic_enable+0x26>
 800099c:	331f      	adds	r3, #31
 800099e:	115b      	asrs	r3, r3, #5
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	73bb      	strb	r3, [r7, #14]
		l_Bit_num = (IRQNum % 32);
 80009a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009a8:	425a      	negs	r2, r3
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	f002 021f 	and.w	r2, r2, #31
 80009b2:	bf58      	it	pl
 80009b4:	4253      	negpl	r3, r2
 80009b6:	b25b      	sxtb	r3, r3
 80009b8:	737b      	strb	r3, [r7, #13]
		NVIC->ISER[l_Reg_num] = (1<<l_Bit_num);
 80009ba:	7b7b      	ldrb	r3, [r7, #13]
 80009bc:	2201      	movs	r2, #1
 80009be:	fa02 f103 	lsl.w	r1, r2, r3
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <nvic_enable+0x60>)
 80009c4:	7bbb      	ldrb	r3, [r7, #14]
 80009c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	return ret;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	e000e100 	.word	0xe000e100

080009dc <Systick_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Systick_init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
	uint32_t NO_Tick = 0x00ffffff;
 80009e2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80009e6:	603b      	str	r3, [r7, #0]
	Std_RetType_t ret = RET_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
	if(NO_Tick > (STSTICK_LOAD_VALUE_POS << STSTICK_LOAD_VALUE_ACCESS)) /*resolution = 2^n = 2^24 = 16,777,216 = 1<<24*/
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f2:	d902      	bls.n	80009fa <Systick_init+0x1e>
	{
		ret = RET_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	71fb      	strb	r3, [r7, #7]
 80009f8:	e011      	b.n	8000a1e <Systick_init+0x42>
	}
	else
	{
		/*Disable the SYSTICK counter*/
		SYSTICK->CSR &=~ (SYSTICK_CSR_ENABLE_MASK << SYSTICK_CSR_ENABLE_POS);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <Systick_init+0x50>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <Systick_init+0x50>)
 8000a00:	f023 0301 	bic.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]
		/*load the value into SYST_CVR in the range 0x00000001-0x00FFFFFF*/
		SYSTICK->RVR = NO_Tick;
 8000a06:	4a09      	ldr	r2, [pc, #36]	; (8000a2c <Systick_init+0x50>)
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	6053      	str	r3, [r2, #4]
		/*clear the SYSTICK counter value*/
		SYSTICK->CVR = 0;
 8000a0c:	4b07      	ldr	r3, [pc, #28]	; (8000a2c <Systick_init+0x50>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	609a      	str	r2, [r3, #8]
		/*Indicates the clock source: (0) = external clock , (1) = processor clock*/
#if SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_1
		SYSTICK->CSR |= (SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <Systick_init+0x50>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a05      	ldr	r2, [pc, #20]	; (8000a2c <Systick_init+0x50>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6013      	str	r3, [r2, #0]
#elif SYSTICK_CLOCK_SOURCE==SYSTICK_CLOCK_SOURCE_DIV_8
		SYSTICK->CSR &=~(SYSTICK_CSR_CLOCK_MASK<<SYSTICK_CSR_CLOCK_POS);
#else
#endif
	}
	return ret;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000e010 	.word	0xe000e010

08000a30 <CRC_Init>:


#include "../../../Inc/MCAL/CRC/CRC.h"

void CRC_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	RCC_CRC_CLK_ENABLE();
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <CRC_Init+0x18>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a03      	ldr	r2, [pc, #12]	; (8000a48 <CRC_Init+0x18>)
 8000a3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
	CRC_Reset();
 8000a40:	f000 f804 	bl	8000a4c <CRC_Reset>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800

08000a4c <CRC_Reset>:

void CRC_Reset(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	CRC->CRC_CR |= (RESET_BIT_MASK<<RESET_BIT_POS);
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <CRC_Reset+0x18>)
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <CRC_Reset+0x18>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	6093      	str	r3, [r2, #8]
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40023000 	.word	0x40023000

08000a68 <CRC_Calculate>:

uint32_t CRC_Calculate(uint32_t *data ,uint8_t length)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	70fb      	strb	r3, [r7, #3]
	uint32_t local_u32Temp  , local_counter;
	for(local_counter = 0 ; local_counter < length ; local_counter++)
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	e009      	b.n	8000a8e <CRC_Calculate+0x26>
	{
		CRC->CRC_DR = data[local_counter];
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	687a      	ldr	r2, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a09      	ldr	r2, [pc, #36]	; (8000aa8 <CRC_Calculate+0x40>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	6013      	str	r3, [r2, #0]
	for(local_counter = 0 ; local_counter < length ; local_counter++)
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	68fa      	ldr	r2, [r7, #12]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d3f1      	bcc.n	8000a7a <CRC_Calculate+0x12>
	}
	local_u32Temp = CRC->CRC_DR;
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <CRC_Calculate+0x40>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	60bb      	str	r3, [r7, #8]
	return local_u32Temp;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3714      	adds	r7, #20
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr
 8000aa8:	40023000 	.word	0x40023000

08000aac <EXTI_clear_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_clear_pending_flag(EXTI_source_t EXTI_source)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	// clearing pending flag is done by programming the bit to '1'
	EXTI->PR |= (1 << EXTI_source);
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <EXTI_clear_pending_flag+0x2c>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <EXTI_clear_pending_flag+0x2c>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	6153      	str	r3, [r2, #20]
	return RET_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40013c00 	.word	0x40013c00

08000adc <EXTI_read_pending_flag>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t EXTI_read_pending_flag(EXTI_source_t EXTI_source, pending_flag_t* pending_flag)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]

	*pending_flag = EXTI->PR & (1 << EXTI_source) ? INT_TRIGGERED : INT_NOT_TRIGGERED;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <EXTI_read_pending_flag+0x38>)
 8000aea:	695b      	ldr	r3, [r3, #20]
 8000aec:	79fa      	ldrb	r2, [r7, #7]
 8000aee:	2101      	movs	r1, #1
 8000af0:	fa01 f202 	lsl.w	r2, r1, r2
 8000af4:	4013      	ands	r3, r2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	bf14      	ite	ne
 8000afa:	2301      	movne	r3, #1
 8000afc:	2300      	moveq	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	701a      	strb	r2, [r3, #0]
	return RET_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40013c00 	.word	0x40013c00

08000b18 <EXTI0_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI0_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <EXTI0_IRQHandler+0x30>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	4618      	mov	r0, r3
 8000b22:	f7ff ffc3 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000b26:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <EXTI0_IRQHandler+0x30>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <EXTI0_IRQHandler+0x34>)
 8000b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <EXTI0_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000b36:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <EXTI0_IRQHandler+0x30>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <EXTI0_IRQHandler+0x34>)
 8000b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b42:	4798      	blx	r3
	}
}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	200000d0 	.word	0x200000d0
 8000b4c:	20000074 	.word	0x20000074

08000b50 <EXTI1_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI1_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <EXTI1_IRQHandler+0x30>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ffa7 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <EXTI1_IRQHandler+0x30>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	4b07      	ldr	r3, [pc, #28]	; (8000b84 <EXTI1_IRQHandler+0x34>)
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d006      	beq.n	8000b7c <EXTI1_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000b6e:	4b04      	ldr	r3, [pc, #16]	; (8000b80 <EXTI1_IRQHandler+0x30>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	4b03      	ldr	r3, [pc, #12]	; (8000b84 <EXTI1_IRQHandler+0x34>)
 8000b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b7a:	4798      	blx	r3
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000d0 	.word	0x200000d0
 8000b84:	20000074 	.word	0x20000074

08000b88 <EXTI2_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <EXTI2_IRQHandler+0x30>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff ff8b 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000b96:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <EXTI2_IRQHandler+0x30>)
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <EXTI2_IRQHandler+0x34>)
 8000b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d006      	beq.n	8000bb4 <EXTI2_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <EXTI2_IRQHandler+0x30>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	461a      	mov	r2, r3
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <EXTI2_IRQHandler+0x34>)
 8000bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bb2:	4798      	blx	r3
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000d0 	.word	0x200000d0
 8000bbc:	20000074 	.word	0x20000074

08000bc0 <EXTI3_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI3_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <EXTI3_IRQHandler+0x30>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff6f 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <EXTI3_IRQHandler+0x30>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <EXTI3_IRQHandler+0x34>)
 8000bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <EXTI3_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000bde:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <EXTI3_IRQHandler+0x30>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b03      	ldr	r3, [pc, #12]	; (8000bf4 <EXTI3_IRQHandler+0x34>)
 8000be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bea:	4798      	blx	r3
	}
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	200000d0 	.word	0x200000d0
 8000bf4:	20000074 	.word	0x20000074

08000bf8 <EXTI4_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI4_IRQHandler(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <EXTI4_IRQHandler+0x30>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff53 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <EXTI4_IRQHandler+0x30>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <EXTI4_IRQHandler+0x34>)
 8000c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d006      	beq.n	8000c24 <EXTI4_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000c16:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <EXTI4_IRQHandler+0x30>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <EXTI4_IRQHandler+0x34>)
 8000c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c22:	4798      	blx	r3
	}
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200000d0 	.word	0x200000d0
 8000c2c:	20000074 	.word	0x20000074

08000c30 <EXTI9_5_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI9_5_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8000c36:	2300      	movs	r3, #0
 8000c38:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_5 , &flag);
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	2005      	movs	r0, #5
 8000c40:	f7ff ff4c 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000c44:	79fb      	ldrb	r3, [r7, #7]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d113      	bne.n	8000c72 <EXTI9_5_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_5);
 8000c4a:	2005      	movs	r0, #5
 8000c4c:	f7ff ff2e 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000c50:	4b42      	ldr	r3, [pc, #264]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <EXTI9_5_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 8000c60:	4b3e      	ldr	r3, [pc, #248]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_6 , &flag);
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	4619      	mov	r1, r3
 8000c76:	2006      	movs	r0, #6
 8000c78:	f7ff ff30 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d113      	bne.n	8000caa <EXTI9_5_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_6);
 8000c82:	2006      	movs	r0, #6
 8000c84:	f7ff ff12 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000c88:	4b34      	ldr	r3, [pc, #208]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d006      	beq.n	8000ca6 <EXTI9_5_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8000c98:	4b30      	ldr	r3, [pc, #192]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000ca0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca4:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_7 , &flag);
 8000caa:	1dfb      	adds	r3, r7, #7
 8000cac:	4619      	mov	r1, r3
 8000cae:	2007      	movs	r0, #7
 8000cb0:	f7ff ff14 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d113      	bne.n	8000ce2 <EXTI9_5_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_7);
 8000cba:	2007      	movs	r0, #7
 8000cbc:	f7ff fef6 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000cc0:	4b26      	ldr	r3, [pc, #152]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d006      	beq.n	8000cde <EXTI9_5_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 8000cd0:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_8 , &flag);
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	2008      	movs	r0, #8
 8000ce8:	f7ff fef8 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d113      	bne.n	8000d1a <EXTI9_5_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_8);
 8000cf2:	2008      	movs	r0, #8
 8000cf4:	f7ff feda 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d006      	beq.n	8000d16 <EXTI9_5_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d14:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000d16:	2300      	movs	r3, #0
 8000d18:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_9 , &flag);
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2009      	movs	r0, #9
 8000d20:	f7ff fedc 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d113      	bne.n	8000d52 <EXTI9_5_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_9);
 8000d2a:	2009      	movs	r0, #9
 8000d2c:	f7ff febe 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000d30:	4b0a      	ldr	r3, [pc, #40]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d006      	beq.n	8000d4e <EXTI9_5_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <EXTI9_5_IRQHandler+0x12c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	461a      	mov	r2, r3
 8000d46:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <EXTI9_5_IRQHandler+0x130>)
 8000d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d4c:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	71fb      	strb	r3, [r7, #7]
	}
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000d0 	.word	0x200000d0
 8000d60:	20000074 	.word	0x20000074

08000d64 <EXTI15_10_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI15_10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
	pending_flag_t flag = INT_NOT_TRIGGERED;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	71fb      	strb	r3, [r7, #7]
	EXTI_read_pending_flag(EXTI_10 , &flag);
 8000d6e:	1dfb      	adds	r3, r7, #7
 8000d70:	4619      	mov	r1, r3
 8000d72:	200a      	movs	r0, #10
 8000d74:	f7ff feb2 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d113      	bne.n	8000da6 <EXTI15_10_IRQHandler+0x42>
	{
		EXTI_clear_pending_flag(EXTI_10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f7ff fe94 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000d84:	4b50      	ldr	r3, [pc, #320]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4b50      	ldr	r3, [pc, #320]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d006      	beq.n	8000da2 <EXTI15_10_IRQHandler+0x3e>
		{
			EXTI_Handler[EXTI_source]();
 8000d94:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	461a      	mov	r2, r3
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000da2:	2300      	movs	r3, #0
 8000da4:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_11 , &flag);
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	4619      	mov	r1, r3
 8000daa:	200b      	movs	r0, #11
 8000dac:	f7ff fe96 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	2b01      	cmp	r3, #1
 8000db4:	d113      	bne.n	8000dde <EXTI15_10_IRQHandler+0x7a>
	{
		EXTI_clear_pending_flag(EXTI_11);
 8000db6:	200b      	movs	r0, #11
 8000db8:	f7ff fe78 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000dbc:	4b42      	ldr	r3, [pc, #264]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b42      	ldr	r3, [pc, #264]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d006      	beq.n	8000dda <EXTI15_10_IRQHandler+0x76>
		{
			EXTI_Handler[EXTI_source]();
 8000dcc:	4b3e      	ldr	r3, [pc, #248]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4b3e      	ldr	r3, [pc, #248]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd8:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_12 , &flag);
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	4619      	mov	r1, r3
 8000de2:	200c      	movs	r0, #12
 8000de4:	f7ff fe7a 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d113      	bne.n	8000e16 <EXTI15_10_IRQHandler+0xb2>
	{
		EXTI_clear_pending_flag(EXTI_12);
 8000dee:	200c      	movs	r0, #12
 8000df0:	f7ff fe5c 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000df4:	4b34      	ldr	r3, [pc, #208]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d006      	beq.n	8000e12 <EXTI15_10_IRQHandler+0xae>
		{
			EXTI_Handler[EXTI_source]();
 8000e04:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b30      	ldr	r3, [pc, #192]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e10:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000e12:	2300      	movs	r3, #0
 8000e14:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_13 , &flag);
 8000e16:	1dfb      	adds	r3, r7, #7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	200d      	movs	r0, #13
 8000e1c:	f7ff fe5e 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d113      	bne.n	8000e4e <EXTI15_10_IRQHandler+0xea>
	{
		EXTI_clear_pending_flag(EXTI_13);
 8000e26:	200d      	movs	r0, #13
 8000e28:	f7ff fe40 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000e2c:	4b26      	ldr	r3, [pc, #152]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b26      	ldr	r3, [pc, #152]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <EXTI15_10_IRQHandler+0xe6>
		{
			EXTI_Handler[EXTI_source]();
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e48:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_14 , &flag);
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	4619      	mov	r1, r3
 8000e52:	200e      	movs	r0, #14
 8000e54:	f7ff fe42 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d113      	bne.n	8000e86 <EXTI15_10_IRQHandler+0x122>
	{
		EXTI_clear_pending_flag(EXTI_14);
 8000e5e:	200e      	movs	r0, #14
 8000e60:	f7ff fe24 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000e64:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	461a      	mov	r2, r3
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <EXTI15_10_IRQHandler+0x11e>
		{
			EXTI_Handler[EXTI_source]();
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000e82:	2300      	movs	r3, #0
 8000e84:	71fb      	strb	r3, [r7, #7]
	}
	EXTI_read_pending_flag(EXTI_15 , &flag);
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	4619      	mov	r1, r3
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f7ff fe26 	bl	8000adc <EXTI_read_pending_flag>
	if(INT_TRIGGERED == flag)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b01      	cmp	r3, #1
 8000e94:	d113      	bne.n	8000ebe <EXTI15_10_IRQHandler+0x15a>
	{
		EXTI_clear_pending_flag(EXTI_15);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f7ff fe08 	bl	8000aac <EXTI_clear_pending_flag>
		if(NULL != EXTI_Handler[EXTI_source])
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d006      	beq.n	8000eba <EXTI15_10_IRQHandler+0x156>
		{
			EXTI_Handler[EXTI_source]();
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <EXTI15_10_IRQHandler+0x164>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <EXTI15_10_IRQHandler+0x168>)
 8000eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb8:	4798      	blx	r3
		}
		flag = INT_NOT_TRIGGERED;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	71fb      	strb	r3, [r7, #7]
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	200000d0 	.word	0x200000d0
 8000ecc:	20000074 	.word	0x20000074

08000ed0 <EXTI16_PVD_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI16_PVD_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <EXTI16_PVD_IRQHandler+0x30>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fde7 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <EXTI16_PVD_IRQHandler+0x30>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <EXTI16_PVD_IRQHandler+0x34>)
 8000ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <EXTI16_PVD_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <EXTI16_PVD_IRQHandler+0x30>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <EXTI16_PVD_IRQHandler+0x34>)
 8000ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efa:	4798      	blx	r3
	}
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000d0 	.word	0x200000d0
 8000f04:	20000074 	.word	0x20000074

08000f08 <EXTI17_RTC_Alarm_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI17_RTC_Alarm_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000f0c:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fdcb 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 8000f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <EXTI17_RTC_Alarm_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <EXTI17_RTC_Alarm_IRQHandler+0x30>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <EXTI17_RTC_Alarm_IRQHandler+0x34>)
 8000f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f32:	4798      	blx	r3
	}
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000d0 	.word	0x200000d0
 8000f3c:	20000074 	.word	0x20000074

08000f40 <EXTI18_OTG_FS_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI18_OTG_FS_WKUP_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000f44:	4b0a      	ldr	r3, [pc, #40]	; (8000f70 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fdaf 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000f4e:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 8000f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <EXTI18_OTG_FS_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <EXTI18_OTG_FS_WKUP_IRQHandler+0x30>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	4b03      	ldr	r3, [pc, #12]	; (8000f74 <EXTI18_OTG_FS_WKUP_IRQHandler+0x34>)
 8000f66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f6a:	4798      	blx	r3
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000d0 	.word	0x200000d0
 8000f74:	20000074 	.word	0x20000074

08000f78 <EXTI22_RTC_WKUP_IRQHandler>:
 * @param  : void
 * @return : void
 *
 */
void EXTI22_RTC_WKUP_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
	EXTI_clear_pending_flag(EXTI_source);
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fd93 	bl	8000aac <EXTI_clear_pending_flag>
	if(NULL != EXTI_Handler[EXTI_source])
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 8000f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d006      	beq.n	8000fa4 <EXTI22_RTC_WKUP_IRQHandler+0x2c>
	{
		EXTI_Handler[EXTI_source]();
 8000f96:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <EXTI22_RTC_WKUP_IRQHandler+0x30>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <EXTI22_RTC_WKUP_IRQHandler+0x34>)
 8000f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fa2:	4798      	blx	r3
	}
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	200000d0 	.word	0x200000d0
 8000fac:	20000074 	.word	0x20000074

08000fb0 <Flash_Lock>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Lock()
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	FLASH->FLASH_CR |= (LOCK_BIT_MASK << LOCK_BIT_POS);
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <Flash_Lock+0x24>)
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <Flash_Lock+0x24>)
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	6113      	str	r3, [r2, #16]
	return ret;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bc80      	pop	{r7}
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	40023c00 	.word	0x40023c00

08000fd8 <Flash_Unlock>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Unlock()
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71fb      	strb	r3, [r7, #7]
	FLASH->FLASH_KEYR = KEY1;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <Flash_Unlock+0x24>)
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <Flash_Unlock+0x28>)
 8000fe6:	605a      	str	r2, [r3, #4]
	FLASH->FLASH_KEYR = KEY2;
 8000fe8:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <Flash_Unlock+0x24>)
 8000fea:	4a06      	ldr	r2, [pc, #24]	; (8001004 <Flash_Unlock+0x2c>)
 8000fec:	605a      	str	r2, [r3, #4]
	return ret;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	370c      	adds	r7, #12
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00
 8001000:	45670123 	.word	0x45670123
 8001004:	cdef89ab 	.word	0xcdef89ab

08001008 <Flash_Mass_Erase>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Mass_Erase()
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 8001012:	bf00      	nop
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <Flash_Mass_Erase+0x4c>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1f9      	bne.n	8001014 <Flash_Mass_Erase+0xc>

	FLASH->FLASH_CR |= (MER_BIT_MASK << MER_BIT_POS); /*Set the MER bit */
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <Flash_Mass_Erase+0x4c>)
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <Flash_Mass_Erase+0x4c>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6113      	str	r3, [r2, #16]

	FLASH->FLASH_CR |= (STRT_BIT_MASK<< STRT_BIT_POS);/*Set STRT bit*/
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <Flash_Mass_Erase+0x4c>)
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	4a08      	ldr	r2, [pc, #32]	; (8001054 <Flash_Mass_Erase+0x4c>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6113      	str	r3, [r2, #16]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 8001038:	bf00      	nop
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <Flash_Mass_Erase+0x4c>)
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d1f9      	bne.n	800103a <Flash_Mass_Erase+0x32>

	return ret;
 8001046:	79fb      	ldrb	r3, [r7, #7]
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00

08001058 <Flash_Sector_Erase>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Sector_Erase(uint8_t SectorNumber , uint8_t NumberOfSectors)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8001068:	2300      	movs	r3, #0
 800106a:	73fb      	strb	r3, [r7, #15]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 800106c:	bf00      	nop
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <Flash_Sector_Erase+0x64>)
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f9      	bne.n	800106e <Flash_Sector_Erase+0x16>

	FLASH->FLASH_CR |= (SER_BIT_MASK << SER_BIT_POS); /*Set the SER bit */
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <Flash_Sector_Erase+0x64>)
 800107c:	691b      	ldr	r3, [r3, #16]
 800107e:	4a0f      	ldr	r2, [pc, #60]	; (80010bc <Flash_Sector_Erase+0x64>)
 8001080:	f043 0302 	orr.w	r3, r3, #2
 8001084:	6113      	str	r3, [r2, #16]

	FLASH->FLASH_CR |= (SectorNumber << SNB_BITS_POS); /*select the sector in SNB_BITS*/
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <Flash_Sector_Erase+0x64>)
 8001088:	691b      	ldr	r3, [r3, #16]
 800108a:	79fa      	ldrb	r2, [r7, #7]
 800108c:	00d2      	lsls	r2, r2, #3
 800108e:	4611      	mov	r1, r2
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <Flash_Sector_Erase+0x64>)
 8001092:	430b      	orrs	r3, r1
 8001094:	6113      	str	r3, [r2, #16]

	FLASH->FLASH_CR |= (STRT_BIT_MASK<< STRT_BIT_POS);/*Set STRT bit*/
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <Flash_Sector_Erase+0x64>)
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <Flash_Sector_Erase+0x64>)
 800109c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a0:	6113      	str	r3, [r2, #16]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 80010a2:	bf00      	nop
 80010a4:	4b05      	ldr	r3, [pc, #20]	; (80010bc <Flash_Sector_Erase+0x64>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1f9      	bne.n	80010a4 <Flash_Sector_Erase+0x4c>

	return ret;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40023c00 	.word	0x40023c00

080010c0 <Flash_Program>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Program(uint32_t* Address , uint8_t Data)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 80010cc:	bf00      	nop
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <Flash_Program+0x54>)
 80010d0:	68db      	ldr	r3, [r3, #12]
 80010d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f9      	bne.n	80010ce <Flash_Program+0xe>

	FLASH->FLASH_CR |= ( PG_BIT_MASK << PG_BIT_POS ); /*Set the PG bit*/
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <Flash_Program+0x54>)
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <Flash_Program+0x54>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6113      	str	r3, [r2, #16]

	FLASH->FLASH_CR &=~ (0b11 << 8);	/*PSIZE[1:0]: Program size These bits select the program parallelism. */
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <Flash_Program+0x54>)
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <Flash_Program+0x54>)
 80010ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010f0:	6113      	str	r3, [r2, #16]

	//*Adress = Data;
    *(uint8_t*)Address = Data;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	78fa      	ldrb	r2, [r7, #3]
 80010f6:	701a      	strb	r2, [r3, #0]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*waiting the BSY bit to be cleared*/
 80010f8:	bf00      	nop
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <Flash_Program+0x54>)
 80010fc:	68db      	ldr	r3, [r3, #12]
 80010fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f9      	bne.n	80010fa <Flash_Program+0x3a>

	return RET_OK;
 8001106:	2300      	movs	r3, #0
}
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023c00 	.word	0x40023c00

08001118 <FLASH_OPT_Lock>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t FLASH_OPT_Lock()
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	FLASH->FLASH_OPTCR |= (OPTLOCK_BIT_MASK << OPTLOCK_BIT_POS); /*OPTLOCK: Option lock*/
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <FLASH_OPT_Lock+0x1c>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	4a04      	ldr	r2, [pc, #16]	; (8001134 <FLASH_OPT_Lock+0x1c>)
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	6153      	str	r3, [r2, #20]
	return RET_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00

08001138 <FLASH_OPT_Unlock>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t FLASH_OPT_Unlock()
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
	FLASH->FLASH_OPTKEYR = OPTKEY1;
 800113c:	4b05      	ldr	r3, [pc, #20]	; (8001154 <FLASH_OPT_Unlock+0x1c>)
 800113e:	4a06      	ldr	r2, [pc, #24]	; (8001158 <FLASH_OPT_Unlock+0x20>)
 8001140:	609a      	str	r2, [r3, #8]
	FLASH->FLASH_OPTKEYR = OPTKEY2;
 8001142:	4b04      	ldr	r3, [pc, #16]	; (8001154 <FLASH_OPT_Unlock+0x1c>)
 8001144:	4a05      	ldr	r2, [pc, #20]	; (800115c <FLASH_OPT_Unlock+0x24>)
 8001146:	609a      	str	r2, [r3, #8]
	return RET_OK;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00
 8001158:	08192a3b 	.word	0x08192a3b
 800115c:	4c5d6e7f 	.word	0x4c5d6e7f

08001160 <Flash_Enable_Sectors_Protections>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t Flash_Enable_Sectors_Protections(SECTOR_Protectoin_Type_t ProtectoinType , uint8_t SectorDetails)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	460a      	mov	r2, r1
 800116a:	71fb      	strb	r3, [r7, #7]
 800116c:	4613      	mov	r3, r2
 800116e:	71bb      	strb	r3, [r7, #6]
	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*checking the BSY bit*/
 8001170:	bf00      	nop
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117a:	2b00      	cmp	r3, #0
 800117c:	d1f9      	bne.n	8001172 <Flash_Enable_Sectors_Protections+0x12>

	FLASH->FLASH_OPTCR |= (ProtectoinType << SPRMOD_BIT_POS);  /*Bit 31 SPRMOD: Selection of Protection Mode of nWPRi bits*/
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	07d2      	lsls	r2, r2, #31
 8001186:	4611      	mov	r1, r2
 8001188:	4a15      	ldr	r2, [pc, #84]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 800118a:	430b      	orrs	r3, r1
 800118c:	6153      	str	r3, [r2, #20]

	if(ProtectoinType == SECTOR_WRITE_PROTECTOIN)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <Flash_Enable_Sectors_Protections+0x48>
	{
		FLASH->FLASH_OPTCR &=~ (SectorDetails << nWRP_BITS_POS);  		    /*in write protection -> 0 : means protection active*/
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	79ba      	ldrb	r2, [r7, #6]
 800119a:	0412      	lsls	r2, r2, #16
 800119c:	43d2      	mvns	r2, r2
 800119e:	4611      	mov	r1, r2
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011a2:	400b      	ands	r3, r1
 80011a4:	6153      	str	r3, [r2, #20]
 80011a6:	e007      	b.n	80011b8 <Flash_Enable_Sectors_Protections+0x58>
	}
	else								   			/*in read protection -> 1 : means protection active*/
	{
		FLASH->FLASH_OPTCR |= (SectorDetails << nWRP_BITS_POS);
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011aa:	695b      	ldr	r3, [r3, #20]
 80011ac:	79ba      	ldrb	r2, [r7, #6]
 80011ae:	0412      	lsls	r2, r2, #16
 80011b0:	4611      	mov	r1, r2
 80011b2:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011b4:	430b      	orrs	r3, r1
 80011b6:	6153      	str	r3, [r2, #20]
	}

	FLASH->FLASH_OPTCR |= (OPTSTRT_BIT_MASK << OPTSTRT_BIT_POS);			/*OPTSTRT bit */
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	4a08      	ldr	r2, [pc, #32]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011be:	f043 0302 	orr.w	r3, r3, #2
 80011c2:	6153      	str	r3, [r2, #20]

	while((FLASH->FLASH_SR &(BUSY_BIT_MASK << BUSY_BIT_POS))); /*wait the BSY bit to be cleared*/
 80011c4:	bf00      	nop
 80011c6:	4b06      	ldr	r3, [pc, #24]	; (80011e0 <Flash_Enable_Sectors_Protections+0x80>)
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d1f9      	bne.n	80011c6 <Flash_Enable_Sectors_Protections+0x66>

	return RET_OK;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	bc80      	pop	{r7}
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40023c00 	.word	0x40023c00

080011e4 <Flash_Read_Sector_Status>:
 * @brief  : Read all sectors Status
 * @param  : (SectorDetails) : pointer to store sector status
 * @return : (void)
 */
void Flash_Read_Sector_Status(uint8_t* SectorDetails)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	*SectorDetails = ((uint8_t)(FLASH->FLASH_OPTCR >> nWRP_BITS_POS) & 0x3f);
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <Flash_Read_Sector_Status+0x24>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	0c1b      	lsrs	r3, r3, #16
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	701a      	strb	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40023c00 	.word	0x40023c00

0800120c <GPIO_Pin_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Pin_init(const PinConfig_t *pinConfig)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
	if(NULL == pinConfig)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <GPIO_Pin_init+0x18>
	{
		ret = RET_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	73fb      	strb	r3, [r7, #15]
 8001222:	e108      	b.n	8001436 <GPIO_Pin_init+0x22a>
	}
	else
	{
		/*select gpio mode */
		/*clear the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) &=~(MODER_MASK << (pinConfig->Pin*MODER_PIN_ACCESS));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b86      	ldr	r3, [pc, #536]	; (8001444 <GPIO_Pin_init+0x238>)
 800122c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	785b      	ldrb	r3, [r3, #1]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2103      	movs	r1, #3
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	4619      	mov	r1, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <GPIO_Pin_init+0x238>)
 800124a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800124e:	400a      	ands	r2, r1
 8001250:	601a      	str	r2, [r3, #0]
		/*set the mode bits*/
		(GPIO_PORT[pinConfig->Port]->MODER) |= ((pinConfig->Mode)<<(pinConfig->Pin*MODER_PIN_ACCESS));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	4b7a      	ldr	r3, [pc, #488]	; (8001444 <GPIO_Pin_init+0x238>)
 800125a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	789b      	ldrb	r3, [r3, #2]
 8001264:	4619      	mov	r1, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4619      	mov	r1, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	4b72      	ldr	r3, [pc, #456]	; (8001444 <GPIO_Pin_init+0x238>)
 800127a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

		/*select gpio pull state */
		/*clear the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) &=~(PUPDR_MASK << (pinConfig->Pin)*PUPDR_PIN_ACCESS);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b6e      	ldr	r3, [pc, #440]	; (8001444 <GPIO_Pin_init+0x238>)
 800128a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	785b      	ldrb	r3, [r3, #1]
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	2103      	movs	r1, #3
 8001298:	fa01 f303 	lsl.w	r3, r1, r3
 800129c:	43db      	mvns	r3, r3
 800129e:	4619      	mov	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	4b67      	ldr	r3, [pc, #412]	; (8001444 <GPIO_Pin_init+0x238>)
 80012a8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80012ac:	400a      	ands	r2, r1
 80012ae:	60da      	str	r2, [r3, #12]
		/*set the PUPDR bits*/
		(GPIO_PORT[pinConfig->Port]->PUPDR) |= ((pinConfig->PullType)<<(pinConfig->Pin*PUPDR_PIN_ACCESS));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	461a      	mov	r2, r3
 80012b6:	4b63      	ldr	r3, [pc, #396]	; (8001444 <GPIO_Pin_init+0x238>)
 80012b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012bc:	68da      	ldr	r2, [r3, #12]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	795b      	ldrb	r3, [r3, #5]
 80012c2:	4619      	mov	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	785b      	ldrb	r3, [r3, #1]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	4619      	mov	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4618      	mov	r0, r3
 80012d6:	4b5b      	ldr	r3, [pc, #364]	; (8001444 <GPIO_Pin_init+0x238>)
 80012d8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80012dc:	430a      	orrs	r2, r1
 80012de:	60da      	str	r2, [r3, #12]

		/*select output type & output speed in case of output or alternate function*/
		if(OUTPUT ==pinConfig->Mode || ALTERNATE_FUNCTION ==pinConfig->Mode)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	789b      	ldrb	r3, [r3, #2]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d004      	beq.n	80012f2 <GPIO_Pin_init+0xe6>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	f040 80a2 	bne.w	8001436 <GPIO_Pin_init+0x22a>
		{
			/*select output type {push pull , open drain}*/
			/*clear the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) &=~ (OTYPER_MASK<< pinConfig->Pin);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b52      	ldr	r3, [pc, #328]	; (8001444 <GPIO_Pin_init+0x238>)
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	685a      	ldr	r2, [r3, #4]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	785b      	ldrb	r3, [r3, #1]
 8001304:	4619      	mov	r1, r3
 8001306:	2301      	movs	r3, #1
 8001308:	408b      	lsls	r3, r1
 800130a:	43db      	mvns	r3, r3
 800130c:	4619      	mov	r1, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	4618      	mov	r0, r3
 8001314:	4b4b      	ldr	r3, [pc, #300]	; (8001444 <GPIO_Pin_init+0x238>)
 8001316:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800131a:	400a      	ands	r2, r1
 800131c:	605a      	str	r2, [r3, #4]
			/*set the OTYPER bit*/
			(GPIO_PORT[pinConfig->Port]->OTYPER) |= ((pinConfig->Type)<<(pinConfig->Pin));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <GPIO_Pin_init+0x238>)
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	791b      	ldrb	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	4619      	mov	r1, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	4618      	mov	r0, r3
 8001342:	4b40      	ldr	r3, [pc, #256]	; (8001444 <GPIO_Pin_init+0x238>)
 8001344:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001348:	430a      	orrs	r2, r1
 800134a:	605a      	str	r2, [r3, #4]

			/*select output speed {low , medium , high , very high}*/
			/*clear the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) &=~(PSPEEDR_MASK << (pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4b3c      	ldr	r3, [pc, #240]	; (8001444 <GPIO_Pin_init+0x238>)
 8001354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2103      	movs	r1, #3
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	4619      	mov	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	4b34      	ldr	r3, [pc, #208]	; (8001444 <GPIO_Pin_init+0x238>)
 8001372:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001376:	400a      	ands	r2, r1
 8001378:	609a      	str	r2, [r3, #8]
			/*set the OSPEEDR bits*/
			(GPIO_PORT[pinConfig->Port]->OSPEEDR) |= ((pinConfig->Speed) <<(pinConfig->Pin*PSPEEDR_PIN_ACCESS));
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <GPIO_Pin_init+0x238>)
 8001382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	78db      	ldrb	r3, [r3, #3]
 800138c:	4619      	mov	r1, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	785b      	ldrb	r3, [r3, #1]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	fa01 f303 	lsl.w	r3, r1, r3
 8001398:	4619      	mov	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	4b28      	ldr	r3, [pc, #160]	; (8001444 <GPIO_Pin_init+0x238>)
 80013a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	609a      	str	r2, [r3, #8]

			if(ALTERNATE_FUNCTION == pinConfig->Mode)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	789b      	ldrb	r3, [r3, #2]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d141      	bne.n	8001436 <GPIO_Pin_init+0x22a>
			{
				/*select the pin alternate function*/
				uint8_t l_reg_num = pinConfig->Pin / AFR_PIN_SHIFTING;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	785b      	ldrb	r3, [r3, #1]
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	73bb      	strb	r3, [r7, #14]
				uint8_t l_bit_num = pinConfig->Pin % AFR_PIN_SHIFTING;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	737b      	strb	r3, [r7, #13]
				/*clear the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) &=~(AFR_MASK << (l_bit_num *AFR_PIN_ACCESS));
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <GPIO_Pin_init+0x238>)
 80013cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d0:	7bba      	ldrb	r2, [r7, #14]
 80013d2:	3208      	adds	r2, #8
 80013d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80013d8:	7b7b      	ldrb	r3, [r7, #13]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	220f      	movs	r2, #15
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	4b15      	ldr	r3, [pc, #84]	; (8001444 <GPIO_Pin_init+0x238>)
 80013ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f2:	7bba      	ldrb	r2, [r7, #14]
 80013f4:	4001      	ands	r1, r0
 80013f6:	3208      	adds	r2, #8
 80013f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				/*set the AFR bits*/
				(GPIO_PORT[pinConfig->Port]->AFR[l_reg_num]) |= ((pinConfig->AltFunc) << (l_bit_num *AFR_PIN_ACCESS));
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <GPIO_Pin_init+0x238>)
 8001404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001408:	7bba      	ldrb	r2, [r7, #14]
 800140a:	3208      	adds	r2, #8
 800140c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	799b      	ldrb	r3, [r3, #6]
 8001414:	461a      	mov	r2, r3
 8001416:	7b7b      	ldrb	r3, [r7, #13]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	461a      	mov	r2, r3
 8001426:	4b07      	ldr	r3, [pc, #28]	; (8001444 <GPIO_Pin_init+0x238>)
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	7bba      	ldrb	r2, [r7, #14]
 800142e:	4301      	orrs	r1, r0
 8001430:	3208      	adds	r2, #8
 8001432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}
		}
	}
	return ret;
 8001436:	7bfb      	ldrb	r3, [r7, #15]
}
 8001438:	4618      	mov	r0, r3
 800143a:	3714      	adds	r7, #20
 800143c:	46bd      	mov	sp, r7
 800143e:	bc80      	pop	{r7}
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000

08001448 <GPIO_Get_Pin_Value>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t GPIO_Get_Pin_Value(Port_t port , Pin_t pinNum,PinValue_t *pinVal)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	603a      	str	r2, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
 8001454:	460b      	mov	r3, r1
 8001456:	71bb      	strb	r3, [r7, #6]
	Std_RetType_t ret = RET_OK;
 8001458:	2300      	movs	r3, #0
 800145a:	73fb      	strb	r3, [r7, #15]
	if((PORTH < port)|(PIN15 < pinNum)|(NULL ==pinVal))
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	2b05      	cmp	r3, #5
 8001460:	bf8c      	ite	hi
 8001462:	2301      	movhi	r3, #1
 8001464:	2300      	movls	r3, #0
 8001466:	b2da      	uxtb	r2, r3
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	bf8c      	ite	hi
 800146e:	2301      	movhi	r3, #1
 8001470:	2300      	movls	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4313      	orrs	r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	bf0c      	ite	eq
 8001480:	2301      	moveq	r3, #1
 8001482:	2300      	movne	r3, #0
 8001484:	b2db      	uxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d002      	beq.n	8001492 <GPIO_Get_Pin_Value+0x4a>
	{
		ret = RET_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	73fb      	strb	r3, [r7, #15]
 8001490:	e012      	b.n	80014b8 <GPIO_Get_Pin_Value+0x70>
	}
	else
	{
		if((GPIO_PORT[port]->IDR & (1<<pinNum)))
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	4a0b      	ldr	r2, [pc, #44]	; (80014c4 <GPIO_Get_Pin_Value+0x7c>)
 8001496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149a:	691b      	ldr	r3, [r3, #16]
 800149c:	79ba      	ldrb	r2, [r7, #6]
 800149e:	2101      	movs	r1, #1
 80014a0:	fa01 f202 	lsl.w	r2, r1, r2
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <GPIO_Get_Pin_Value+0x6a>
		{
			*pinVal = PIN_HIGH;
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
 80014b0:	e002      	b.n	80014b8 <GPIO_Get_Pin_Value+0x70>
		}
		else
		{
			*pinVal = PIN_LOW;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	701a      	strb	r2, [r3, #0]
		}
	}
	return ret;
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr
 80014c4:	20000000 	.word	0x20000000

080014c8 <HALL_RCC_OscConfig>:


#include "../../../Inc/MCAL/RCC/RCC.h"

Std_RetType_t HALL_RCC_OscConfig(RCC_OscInitTypedef *RCC_OscInitStruct)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_OscInitStruct)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d102      	bne.n	80014e0 <HALL_RCC_OscConfig+0x18>
	{
		ret = RET_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	73fb      	strb	r3, [r7, #15]
 80014de:	e04a      	b.n	8001576 <HALL_RCC_OscConfig+0xae>
	}
	else
	{
		if(RCC_OSCILLATORTYPE_HSE == RCC_OscInitStruct->OscillatorType)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d11d      	bne.n	8001524 <HALL_RCC_OscConfig+0x5c>
		{
			if(RCC_HSE_ON == RCC_OscInitStruct->HSE_State)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d112      	bne.n	8001516 <HALL_RCC_OscConfig+0x4e>
			{
				/*HSE oscillator selected as system clock*/
				SET_BIT(RCC->CFGR , RCC_CFGR_SW0_POS);
 80014f0:	4b24      	ldr	r3, [pc, #144]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	4a23      	ldr	r2, [pc, #140]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 80014fc:	4b21      	ldr	r3, [pc, #132]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	4a20      	ldr	r2, [pc, #128]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001502:	f023 0302 	bic.w	r3, r3, #2
 8001506:	6093      	str	r3, [r2, #8]
				/*HSE oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8001508:	4b1e      	ldr	r3, [pc, #120]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a1d      	ldr	r2, [pc, #116]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800150e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	e02f      	b.n	8001576 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSEON_POS);
 8001516:	4b1b      	ldr	r3, [pc, #108]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a1a      	ldr	r2, [pc, #104]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800151c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	e028      	b.n	8001576 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_HSI == RCC_OscInitStruct->OscillatorType)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b02      	cmp	r3, #2
 800152a:	d11d      	bne.n	8001568 <HALL_RCC_OscConfig+0xa0>
		{
			if(RCC_HSI_ON == RCC_OscInitStruct->HSI_State)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d112      	bne.n	800155a <HALL_RCC_OscConfig+0x92>
			{
				/*HSI oscillator selected as system clock*/
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW0_POS);
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a12      	ldr	r2, [pc, #72]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800153a:	f023 0301 	bic.w	r3, r3, #1
 800153e:	6093      	str	r3, [r2, #8]
				CLEAR_BIT(RCC->CFGR,RCC_CFGR_SW1_POS);
 8001540:	4b10      	ldr	r3, [pc, #64]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a0f      	ldr	r2, [pc, #60]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001546:	f023 0302 	bic.w	r3, r3, #2
 800154a:	6093      	str	r3, [r2, #8]
				/*HSI oscillator ON*/
				SET_BIT(RCC->CR,RCC_CR_HSION_POS);
 800154c:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0c      	ldr	r2, [pc, #48]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001552:	f043 0301 	orr.w	r3, r3, #1
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e00d      	b.n	8001576 <HALL_RCC_OscConfig+0xae>
			}
			else
			{
				CLEAR_BIT(RCC->CR,RCC_CR_HSION_POS);
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a09      	ldr	r2, [pc, #36]	; (8001584 <HALL_RCC_OscConfig+0xbc>)
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e006      	b.n	8001576 <HALL_RCC_OscConfig+0xae>
			}
		}
		else if(RCC_OSCILLATORTYPE_LSE == RCC_OscInitStruct->OscillatorType)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d002      	beq.n	8001576 <HALL_RCC_OscConfig+0xae>
			else
			{

			}
		}
		else if(RCC_OSCILLATORTYPE_LSI == RCC_OscInitStruct->OscillatorType)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b08      	cmp	r3, #8
		else
		{
			/*Nothing*/
		}
	}
	return ret;
 8001576:	7bfb      	ldrb	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800

08001588 <HALL_RCC_ClockConfig>:

Std_RetType_t HALL_RCC_ClockConfig(RCC_ClkInitTypedef *RCC_ClockInitStruct)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	73fb      	strb	r3, [r7, #15]
	if(NULL == RCC_ClockInitStruct)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HALL_RCC_ClockConfig+0x18>
	{
		ret = RET_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	73fb      	strb	r3, [r7, #15]
 800159e:	e01a      	b.n	80015d6 <HALL_RCC_ClockConfig+0x4e>
	}
	else
	{
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_HPRE_POS, RCC_ClockInitStruct->AHBClkDivider);
 80015a0:	4b10      	ldr	r3, [pc, #64]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f023 0204 	bic.w	r2, r3, #4
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	490d      	ldr	r1, [pc, #52]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015ae:	4313      	orrs	r3, r2
 80015b0:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE1_POS, RCC_ClockInitStruct->APB1ClkDivider);
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f023 020a 	bic.w	r2, r3, #10
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	4909      	ldr	r1, [pc, #36]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
		MODIFY_REG(RCC->CFGR ,RCC_CFGR_PPRE2_POS, RCC_ClockInitStruct->APB2ClkDivider);
 80015c4:	4b07      	ldr	r3, [pc, #28]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f023 020d 	bic.w	r2, r3, #13
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4904      	ldr	r1, [pc, #16]	; (80015e4 <HALL_RCC_ClockConfig+0x5c>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
	}
	return ret;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <USART_init>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t USART_init(const USART_Config_t* USART_obj)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	Std_RetType_t ret = RET_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
	if(NULL == USART_obj)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d102      	bne.n	8001600 <USART_init+0x18>
	{
		ret = RET_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	73fb      	strb	r3, [r7, #15]
 80015fe:	e0d9      	b.n	80017b4 <USART_init+0x1cc>
	}
	else
	{
		usart_set_baud_rate(USART_obj);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f000 f943 	bl	800188c <usart_set_baud_rate>

		USART_Array[USART_obj->source]->USART_CR1 |= (1<<(USART_ENABLE_BIT_POS)); //USART Enable
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <USART_init+0x1d8>)
 800160e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	4b69      	ldr	r3, [pc, #420]	; (80017c0 <USART_init+0x1d8>)
 800161c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001620:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001624:	60da      	str	r2, [r3, #12]
		USART_Array[USART_obj->source]->USART_CR1 |= ((USART_obj->word_length)<<(USART_M_BIT_POS)); //word length 0-> 8bits , 1-> 9bits
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	461a      	mov	r2, r3
 800162c:	4b64      	ldr	r3, [pc, #400]	; (80017c0 <USART_init+0x1d8>)
 800162e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7a5b      	ldrb	r3, [r3, #9]
 8001638:	031b      	lsls	r3, r3, #12
 800163a:	4619      	mov	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <USART_init+0x1d8>)
 8001644:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
		if(WITHOUT_PARITY == USART_obj->parity)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7a9b      	ldrb	r3, [r3, #10]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d110      	bne.n	8001676 <USART_init+0x8e>
		{
			USART_Array[USART_obj->source]->USART_CR1 &=~ (1<<(USART_PARITY_CONTROL_ENABLE_BIT_POS)); //Disable parity
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	461a      	mov	r2, r3
 800165a:	4b59      	ldr	r3, [pc, #356]	; (80017c0 <USART_init+0x1d8>)
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	4619      	mov	r1, r3
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <USART_init+0x1d8>)
 800166a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800166e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	e022      	b.n	80016bc <USART_init+0xd4>
		}
		else
		{
			USART_Array[USART_obj->source]->USART_CR1 |= (1<<(USART_PARITY_CONTROL_ENABLE_BIT_POS)); //Enable parity
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	4b50      	ldr	r3, [pc, #320]	; (80017c0 <USART_init+0x1d8>)
 800167e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	4619      	mov	r1, r3
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <USART_init+0x1d8>)
 800168c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001690:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001694:	60da      	str	r2, [r3, #12]
			USART_Array[USART_obj->source]->USART_CR1 |= ((USART_obj->parity)<<(USART_PARITY_SELECTION_BIT_POS)); //Even or Odd parity
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	4b48      	ldr	r3, [pc, #288]	; (80017c0 <USART_init+0x1d8>)
 800169e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7a9b      	ldrb	r3, [r3, #10]
 80016a8:	025b      	lsls	r3, r3, #9
 80016aa:	4619      	mov	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <USART_init+0x1d8>)
 80016b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]
		}
		switch(USART_obj->mode)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d028      	beq.n	8001716 <USART_init+0x12e>
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	dc47      	bgt.n	8001758 <USART_init+0x170>
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <USART_init+0xea>
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d011      	beq.n	80016f4 <USART_init+0x10c>
			break ;
			case RX_TX :
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
			break ;
			default : break;
 80016d0:	e042      	b.n	8001758 <USART_init+0x170>
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b39      	ldr	r3, [pc, #228]	; (80017c0 <USART_init+0x1d8>)
 80016da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016de:	68da      	ldr	r2, [r3, #12]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4619      	mov	r1, r3
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <USART_init+0x1d8>)
 80016e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016ec:	f042 0204 	orr.w	r2, r2, #4
 80016f0:	60da      	str	r2, [r3, #12]
			break;
 80016f2:	e032      	b.n	800175a <USART_init+0x172>
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b31      	ldr	r3, [pc, #196]	; (80017c0 <USART_init+0x1d8>)
 80016fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4619      	mov	r1, r3
 8001708:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <USART_init+0x1d8>)
 800170a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800170e:	f042 0208 	orr.w	r2, r2, #8
 8001712:	60da      	str	r2, [r3, #12]
			break ;
 8001714:	e021      	b.n	800175a <USART_init+0x172>
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_RECEIVER_ENABLE_BIT_POS));// Receiver enable
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	4b28      	ldr	r3, [pc, #160]	; (80017c0 <USART_init+0x1d8>)
 800171e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <USART_init+0x1d8>)
 800172c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001730:	f042 0204 	orr.w	r2, r2, #4
 8001734:	60da      	str	r2, [r3, #12]
					USART_Array[USART_obj->source]->USART_CR1 |= (1 << (USART_TRANSMITTER_ENABLE_BIT_POS)); // Transmitter enable
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <USART_init+0x1d8>)
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	68da      	ldr	r2, [r3, #12]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4619      	mov	r1, r3
 800174a:	4b1d      	ldr	r3, [pc, #116]	; (80017c0 <USART_init+0x1d8>)
 800174c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001750:	f042 0208 	orr.w	r2, r2, #8
 8001754:	60da      	str	r2, [r3, #12]
			break ;
 8001756:	e000      	b.n	800175a <USART_init+0x172>
			default : break;
 8001758:	bf00      	nop
		}

		USART_Array[USART_obj->source]->USART_CR2 |= ((USART_obj->stop_bits) << (USART_STOP_BITS_POS)); //Stop bits selection
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461a      	mov	r2, r3
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <USART_init+0x1d8>)
 8001762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001766:	691a      	ldr	r2, [r3, #16]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7a1b      	ldrb	r3, [r3, #8]
 800176c:	031b      	lsls	r3, r3, #12
 800176e:	4619      	mov	r1, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <USART_init+0x1d8>)
 8001778:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800177c:	430a      	orrs	r2, r1
 800177e:	611a      	str	r2, [r3, #16]

		USART_Array[USART_obj->source]->USART_CR1 |= ((USART_obj->oversampling) << (OVERSAMPLING_BIT_POS)); //Select oversampling mode
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <USART_init+0x1d8>)
 8001788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7adb      	ldrb	r3, [r3, #11]
 8001792:	03db      	lsls	r3, r3, #15
 8001794:	4619      	mov	r1, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <USART_init+0x1d8>)
 800179e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	60da      	str	r2, [r3, #12]

		//USART_Handler[USART_obj->source] = USART_obj->USART_Handler;  // Set ISR
		USART_source = USART_obj->source; // Set USART source
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	781a      	ldrb	r2, [r3, #0]
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <USART_init+0x1dc>)
 80017ac:	701a      	strb	r2, [r3, #0]

		USART_set_Tx_Rx_mode(USART_obj);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f8dc 	bl	800196c <USART_set_Tx_Rx_mode>
	}
	return ret;
 80017b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000018 	.word	0x20000018
 80017c4:	200000d1 	.word	0x200000d1

080017c8 <USART_send_byte_blocking>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t USART_send_byte_blocking(const USART_Config_t* USART_obj , uint8_t byte)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	460b      	mov	r3, r1
 80017d2:	70fb      	strb	r3, [r7, #3]
	Std_RetType_t ret = RET_OK;
 80017d4:	2300      	movs	r3, #0
 80017d6:	73fb      	strb	r3, [r7, #15]
	if(NULL == USART_obj)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <USART_send_byte_blocking+0x1c>
	{
		ret = RET_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	73fb      	strb	r3, [r7, #15]
 80017e2:	e01f      	b.n	8001824 <USART_send_byte_blocking+0x5c>
	}
	else
	{

		while(!((USART_Array[USART_obj->source]->USART_SR) & 0x00000080));
 80017e4:	bf00      	nop
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b10      	ldr	r3, [pc, #64]	; (8001830 <USART_send_byte_blocking+0x68>)
 80017ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f4      	beq.n	80017e6 <USART_send_byte_blocking+0x1e>

		USART_Array[USART_obj->source]->USART_DR = (uint32_t)byte;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	461a      	mov	r2, r3
 8001802:	4b0b      	ldr	r3, [pc, #44]	; (8001830 <USART_send_byte_blocking+0x68>)
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	78fa      	ldrb	r2, [r7, #3]
 800180a:	605a      	str	r2, [r3, #4]

		while(!((USART_Array[USART_obj->source]->USART_SR) & 0x00000040));
 800180c:	bf00      	nop
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	461a      	mov	r2, r3
 8001814:	4b06      	ldr	r3, [pc, #24]	; (8001830 <USART_send_byte_blocking+0x68>)
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f4      	beq.n	800180e <USART_send_byte_blocking+0x46>

	}
	return ret;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	20000018 	.word	0x20000018

08001834 <USART_receive_byte_blocking>:
 * @return :
 * 			(RET_OK) : The function done successfully
 * 			(RET_ERROR) : The function has a problem to perform this action
 */
Std_RetType_t USART_receive_byte_blocking(const USART_Config_t* USART_obj , uint8_t *byte)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
	Std_RetType_t ret = RET_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	73fb      	strb	r3, [r7, #15]
	if(NULL == USART_obj)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <USART_receive_byte_blocking+0x1a>
	{
		ret = RET_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e015      	b.n	800187a <USART_receive_byte_blocking+0x46>
	}
	else
	{
		while(!((USART_Array[USART_obj->source]->USART_SR) & 0x00000020));
 800184e:	bf00      	nop
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <USART_receive_byte_blocking+0x54>)
 8001858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0320 	and.w	r3, r3, #32
 8001862:	2b00      	cmp	r3, #0
 8001864:	d0f4      	beq.n	8001850 <USART_receive_byte_blocking+0x1c>
		*byte = (uint8_t)USART_Array[USART_obj->source]->USART_DR;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	461a      	mov	r2, r3
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <USART_receive_byte_blocking+0x54>)
 800186e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	701a      	strb	r2, [r3, #0]
	}
	return ret;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000018 	.word	0x20000018

0800188c <usart_set_baud_rate>:
 * @brief  : Static function to configure the baudrate of the USART
 * @param  : (USART_obj) Pointer to the configuration @ref USART_Config_t
 * @return : void
 */
void usart_set_baud_rate(const USART_Config_t* USART_obj)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
	uint32_t baudrate = USART_obj->baud_rate;	//baud = (Fck)/(8*(2-OVER8)*USARTDIV);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	60fb      	str	r3, [r7, #12]
	uint32_t result;
	uint32_t mantissa;
	uint32_t fraction;
	if(OVERSAMPLING_BY_16==(USART_obj->oversampling))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	7adb      	ldrb	r3, [r3, #11]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d116      	bne.n	80018d0 <usart_set_baud_rate+0x44>
	{
		result = ((16000000*100)/(8*2*baudrate));
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	011b      	lsls	r3, r3, #4
 80018a6:	4a2d      	ldr	r2, [pc, #180]	; (800195c <usart_set_baud_rate+0xd0>)
 80018a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ac:	617b      	str	r3, [r7, #20]
		fraction = (((result%100)*16)+50)/100;
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	4b2b      	ldr	r3, [pc, #172]	; (8001960 <usart_set_baud_rate+0xd4>)
 80018b2:	fba3 1302 	umull	r1, r3, r3, r2
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2164      	movs	r1, #100	; 0x64
 80018ba:	fb01 f303 	mul.w	r3, r1, r3
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	011b      	lsls	r3, r3, #4
 80018c2:	3332      	adds	r3, #50	; 0x32
 80018c4:	4a26      	ldr	r2, [pc, #152]	; (8001960 <usart_set_baud_rate+0xd4>)
 80018c6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ca:	095b      	lsrs	r3, r3, #5
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	e018      	b.n	8001902 <usart_set_baud_rate+0x76>
	}
	else
	{
		result = ((16000000)/(8*baudrate))*100;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	4a23      	ldr	r2, [pc, #140]	; (8001964 <usart_set_baud_rate+0xd8>)
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	2264      	movs	r2, #100	; 0x64
 80018dc:	fb02 f303 	mul.w	r3, r2, r3
 80018e0:	617b      	str	r3, [r7, #20]
		fraction = (((result%100)*8)+50)/100;
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <usart_set_baud_rate+0xd4>)
 80018e6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2164      	movs	r1, #100	; 0x64
 80018ee:	fb01 f303 	mul.w	r3, r1, r3
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	3332      	adds	r3, #50	; 0x32
 80018f8:	4a19      	ldr	r2, [pc, #100]	; (8001960 <usart_set_baud_rate+0xd4>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	095b      	lsrs	r3, r3, #5
 8001900:	613b      	str	r3, [r7, #16]
	}
	mantissa = result/100;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	4a16      	ldr	r2, [pc, #88]	; (8001960 <usart_set_baud_rate+0xd4>)
 8001906:	fba2 2303 	umull	r2, r3, r2, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	60bb      	str	r3, [r7, #8]
	USART_Array[USART_obj->source]->USART_BRR |= ((mantissa)<< 4);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	4b14      	ldr	r3, [pc, #80]	; (8001968 <usart_set_baud_rate+0xdc>)
 8001916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	011a      	lsls	r2, r3, #4
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	4618      	mov	r0, r3
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <usart_set_baud_rate+0xdc>)
 8001928:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
	USART_Array[USART_obj->source]->USART_BRR |= ((fraction)<< 0);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	461a      	mov	r2, r3
 8001936:	4b0c      	ldr	r3, [pc, #48]	; (8001968 <usart_set_baud_rate+0xdc>)
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <usart_set_baud_rate+0xdc>)
 8001946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	430a      	orrs	r2, r1
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	371c      	adds	r7, #28
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	5f5e1000 	.word	0x5f5e1000
 8001960:	51eb851f 	.word	0x51eb851f
 8001964:	00f42400 	.word	0x00f42400
 8001968:	20000018 	.word	0x20000018

0800196c <USART_set_Tx_Rx_mode>:
 * @brief  : Static function to : Select the mode of sending & receiving of USART [POLLING , INTERRUPT , DMA]
 * @param  : (USART_obj) Pointer to the configuration @ref USART_Config_t
 * @return : void
 */
void USART_set_Tx_Rx_mode(const USART_Config_t* USART_obj)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
	switch(USART_obj->tx_mode)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	7b5b      	ldrb	r3, [r3, #13]
 8001978:	2b02      	cmp	r3, #2
 800197a:	d017      	beq.n	80019ac <USART_set_Tx_Rx_mode+0x40>
 800197c:	2b02      	cmp	r3, #2
 800197e:	dc17      	bgt.n	80019b0 <USART_set_Tx_Rx_mode+0x44>
 8001980:	2b00      	cmp	r3, #0
 8001982:	d017      	beq.n	80019b4 <USART_set_Tx_Rx_mode+0x48>
 8001984:	2b01      	cmp	r3, #1
 8001986:	d000      	beq.n	800198a <USART_set_Tx_Rx_mode+0x1e>
				USART_Array[USART_obj->source]->USART_CR1 |= ((1)<<(USART_TX_INTERRUPT_ENABLE_BIT_POS));	// Enable Tx interrupt
			break;
		case DMA :

			break;
		default : break;
 8001988:	e012      	b.n	80019b0 <USART_set_Tx_Rx_mode+0x44>
				USART_Array[USART_obj->source]->USART_CR1 |= ((1)<<(USART_TX_INTERRUPT_ENABLE_BIT_POS));	// Enable Tx interrupt
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	461a      	mov	r2, r3
 8001990:	4b27      	ldr	r3, [pc, #156]	; (8001a30 <USART_set_Tx_Rx_mode+0xc4>)
 8001992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <USART_set_Tx_Rx_mode+0xc4>)
 80019a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019a8:	60da      	str	r2, [r3, #12]
			break;
 80019aa:	e004      	b.n	80019b6 <USART_set_Tx_Rx_mode+0x4a>
			break;
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <USART_set_Tx_Rx_mode+0x4a>
		default : break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <USART_set_Tx_Rx_mode+0x4a>
			break;
 80019b4:	bf00      	nop
	}

	switch(USART_obj->rx_mode)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7b9b      	ldrb	r3, [r3, #14]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d017      	beq.n	80019ee <USART_set_Tx_Rx_mode+0x82>
 80019be:	2b02      	cmp	r3, #2
 80019c0:	dc17      	bgt.n	80019f2 <USART_set_Tx_Rx_mode+0x86>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d017      	beq.n	80019f6 <USART_set_Tx_Rx_mode+0x8a>
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d000      	beq.n	80019cc <USART_set_Tx_Rx_mode+0x60>
				USART_Array[USART_obj->source]->USART_CR1 |= ((1)<<(USART_RX_INTERRUPT_ENABLE_BIT_POS));	// Enable Rx interrupt
			break;
		case DMA :

			break;
		default : break;
 80019ca:	e012      	b.n	80019f2 <USART_set_Tx_Rx_mode+0x86>
				USART_Array[USART_obj->source]->USART_CR1 |= ((1)<<(USART_RX_INTERRUPT_ENABLE_BIT_POS));	// Enable Rx interrupt
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <USART_set_Tx_Rx_mode+0xc4>)
 80019d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d8:	68da      	ldr	r2, [r3, #12]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	4619      	mov	r1, r3
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <USART_set_Tx_Rx_mode+0xc4>)
 80019e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80019e6:	f042 0220 	orr.w	r2, r2, #32
 80019ea:	60da      	str	r2, [r3, #12]
			break;
 80019ec:	e004      	b.n	80019f8 <USART_set_Tx_Rx_mode+0x8c>
			break;
 80019ee:	bf00      	nop
 80019f0:	e002      	b.n	80019f8 <USART_set_Tx_Rx_mode+0x8c>
		default : break;
 80019f2:	bf00      	nop
 80019f4:	e000      	b.n	80019f8 <USART_set_Tx_Rx_mode+0x8c>
			break;
 80019f6:	bf00      	nop
	}
	if(USART_1 == USART_obj->source)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d103      	bne.n	8001a08 <USART_set_Tx_Rx_mode+0x9c>
	{
		nvic_enable(USART1_IRQn);	//Enable USART IRQ
 8001a00:	2025      	movs	r0, #37	; 0x25
 8001a02:	f7fe ffb9 	bl	8000978 <nvic_enable>
	}
	else if(USART_6 == USART_obj->source)
	{
		nvic_enable(USART6_IRQn);	//Enable USART IRQ
	}
}
 8001a06:	e00e      	b.n	8001a26 <USART_set_Tx_Rx_mode+0xba>
	else if(USART_2 == USART_obj->source)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d103      	bne.n	8001a18 <USART_set_Tx_Rx_mode+0xac>
		nvic_enable(USART2_IRQn);	//Enable USART IRQ
 8001a10:	2026      	movs	r0, #38	; 0x26
 8001a12:	f7fe ffb1 	bl	8000978 <nvic_enable>
}
 8001a16:	e006      	b.n	8001a26 <USART_set_Tx_Rx_mode+0xba>
	else if(USART_6 == USART_obj->source)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d102      	bne.n	8001a26 <USART_set_Tx_Rx_mode+0xba>
		nvic_enable(USART6_IRQn);	//Enable USART IRQ
 8001a20:	2047      	movs	r0, #71	; 0x47
 8001a22:	f7fe ffa9 	bl	8000978 <nvic_enable>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000018 	.word	0x20000018

08001a34 <USART2_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART2_IRQHandler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8001a38:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0320 	and.w	r3, r3, #32
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d01c      	beq.n	8001a88 <USART2_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8001a4e:	4b27      	ldr	r3, [pc, #156]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	461a      	mov	r2, r3
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b23      	ldr	r3, [pc, #140]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4619      	mov	r1, r3
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001a64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a68:	f022 0220 	bic.w	r2, r2, #32
 8001a6c:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <USART2_IRQHandler+0xc0>)
 8001a80:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <USART2_IRQHandler+0xc4>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8001a88:	4b18      	ldr	r3, [pc, #96]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d021      	beq.n	8001ae2 <USART2_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4b0f      	ldr	r3, [pc, #60]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001ab4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ab8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001abc:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8001abe:	4b0f      	ldr	r3, [pc, #60]	; (8001afc <USART2_IRQHandler+0xc8>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10c      	bne.n	8001ae2 <USART2_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8001ac8:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <USART2_IRQHandler+0xcc>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2da      	uxtb	r2, r3
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <USART2_IRQHandler+0xb8>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <USART2_IRQHandler+0xbc>)
 8001ad6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ada:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8001adc:	4b07      	ldr	r3, [pc, #28]	; (8001afc <USART2_IRQHandler+0xc8>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	200000d1 	.word	0x200000d1
 8001af0:	20000018 	.word	0x20000018
 8001af4:	200000d3 	.word	0x200000d3
 8001af8:	200000d4 	.word	0x200000d4
 8001afc:	20000024 	.word	0x20000024
 8001b00:	200000d2 	.word	0x200000d2

08001b04 <USART1_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART1_IRQHandler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8001b08:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <USART1_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8001b1e:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	4b23      	ldr	r3, [pc, #140]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b34:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b38:	f022 0220 	bic.w	r2, r2, #32
 8001b3c:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b1d      	ldr	r3, [pc, #116]	; (8001bc4 <USART1_IRQHandler+0xc0>)
 8001b50:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8001b52:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <USART1_IRQHandler+0xc4>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8001b58:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d021      	beq.n	8001bb2 <USART1_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	461a      	mov	r2, r3
 8001b74:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4619      	mov	r1, r3
 8001b82:	4b0f      	ldr	r3, [pc, #60]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001b84:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b8c:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <USART1_IRQHandler+0xc8>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <USART1_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8001b98:	4b0d      	ldr	r3, [pc, #52]	; (8001bd0 <USART1_IRQHandler+0xcc>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <USART1_IRQHandler+0xb8>)
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <USART1_IRQHandler+0xbc>)
 8001ba6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001baa:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8001bac:	4b07      	ldr	r3, [pc, #28]	; (8001bcc <USART1_IRQHandler+0xc8>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001bb2:	bf00      	nop
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	200000d1 	.word	0x200000d1
 8001bc0:	20000018 	.word	0x20000018
 8001bc4:	200000d3 	.word	0x200000d3
 8001bc8:	200000d4 	.word	0x200000d4
 8001bcc:	20000024 	.word	0x20000024
 8001bd0:	200000d2 	.word	0x200000d2

08001bd4 <USART6_IRQHandler>:
 * @brief  : The ISR of USART2
 * @param  : void
 * @return : void
 */
void USART6_IRQHandler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	if (USART_Array[USART_source]->USART_SR & USART_RX_FLAG_BIT_POS)
 8001bd8:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0320 	and.w	r3, r3, #32
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d01c      	beq.n	8001c28 <USART6_IRQHandler+0x54>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_RX_FLAG_BIT_POS;
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b26      	ldr	r3, [pc, #152]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b23      	ldr	r3, [pc, #140]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c08:	f022 0220 	bic.w	r2, r2, #32
 8001c0c:	601a      	str	r2, [r3, #0]
		// Read the received data
		rx_buffer = (uint8_t)(USART_Array[USART_source]->USART_DR & 0xFF);
 8001c0e:	4b1f      	ldr	r3, [pc, #124]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b1d      	ldr	r3, [pc, #116]	; (8001c94 <USART6_IRQHandler+0xc0>)
 8001c20:	701a      	strb	r2, [r3, #0]
		rx_ready = 1;  // Indicate that a byte has been received
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <USART6_IRQHandler+0xc4>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	701a      	strb	r2, [r3, #0]
	}

	// Check if the TXE flag is set
	if (USART_Array[USART_source]->USART_SR & USART_TX_FLAG_BIT_POS)
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d021      	beq.n	8001c82 <USART6_IRQHandler+0xae>
	{
		// clear the flag
		USART_Array[USART_source]->USART_SR &=~ USART_TX_FLAG_BIT_POS;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c54:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c5c:	601a      	str	r2, [r3, #0]
		// If there is data to transmit
		if (!tx_ready) {
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <USART6_IRQHandler+0xc8>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d10c      	bne.n	8001c82 <USART6_IRQHandler+0xae>
			USART_Array[USART_source]->USART_DR = tx_buffer;  // Send the byte
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <USART6_IRQHandler+0xcc>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <USART6_IRQHandler+0xb8>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4619      	mov	r1, r3
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <USART6_IRQHandler+0xbc>)
 8001c76:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c7a:	605a      	str	r2, [r3, #4]
			tx_ready = 1;  // Indicate that the transmission is complete
 8001c7c:	4b07      	ldr	r3, [pc, #28]	; (8001c9c <USART6_IRQHandler+0xc8>)
 8001c7e:	2201      	movs	r2, #1
 8001c80:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	200000d1 	.word	0x200000d1
 8001c90:	20000018 	.word	0x20000018
 8001c94:	200000d3 	.word	0x200000d3
 8001c98:	200000d4 	.word	0x200000d4
 8001c9c:	20000024 	.word	0x20000024
 8001ca0:	200000d2 	.word	0x200000d2

08001ca4 <main>:
};



int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	SystemClock_Config();
 8001caa:	f000 f8f9 	bl	8001ea0 <SystemClock_Config>
	Systick_init();
 8001cae:	f7fe fe95 	bl	80009dc <Systick_init>
	RCC_GPIOA_CLK_ENABLE();
 8001cb2:	4b1d      	ldr	r3, [pc, #116]	; (8001d28 <main+0x84>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb6:	4a1c      	ldr	r2, [pc, #112]	; (8001d28 <main+0x84>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOB_CLK_ENABLE();
 8001cbe:	4b1a      	ldr	r3, [pc, #104]	; (8001d28 <main+0x84>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a19      	ldr	r2, [pc, #100]	; (8001d28 <main+0x84>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_GPIOC_CLK_ENABLE();
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <main+0x84>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a16      	ldr	r2, [pc, #88]	; (8001d28 <main+0x84>)
 8001cd0:	f043 0304 	orr.w	r3, r3, #4
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
	RCC_USART2_CLK_ENABLE();
 8001cd6:	4b14      	ldr	r3, [pc, #80]	; (8001d28 <main+0x84>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a13      	ldr	r2, [pc, #76]	; (8001d28 <main+0x84>)
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
	CRC_Init();
 8001ce2:	f7fe fea5 	bl	8000a30 <CRC_Init>
	GPIO_Pin_init(&PC13);
 8001ce6:	4811      	ldr	r0, [pc, #68]	; (8001d2c <main+0x88>)
 8001ce8:	f7ff fa90 	bl	800120c <GPIO_Pin_init>
	GPIO_Pin_init(&LoadButton);
 8001cec:	4810      	ldr	r0, [pc, #64]	; (8001d30 <main+0x8c>)
 8001cee:	f7ff fa8d 	bl	800120c <GPIO_Pin_init>
	GPIO_Pin_init(&UART2TX);
 8001cf2:	4810      	ldr	r0, [pc, #64]	; (8001d34 <main+0x90>)
 8001cf4:	f7ff fa8a 	bl	800120c <GPIO_Pin_init>
	GPIO_Pin_init(&UART2RX);
 8001cf8:	480f      	ldr	r0, [pc, #60]	; (8001d38 <main+0x94>)
 8001cfa:	f7ff fa87 	bl	800120c <GPIO_Pin_init>
	USART_init(&uart2);
 8001cfe:	480f      	ldr	r0, [pc, #60]	; (8001d3c <main+0x98>)
 8001d00:	f7ff fc72 	bl	80015e8 <USART_init>

	PinValue_t ButtonVal = PIN_HIGH; /*high means released*/
 8001d04:	2301      	movs	r3, #1
 8001d06:	71fb      	strb	r3, [r7, #7]

	GPIO_Get_Pin_Value(PORTB,PIN12,&ButtonVal);
 8001d08:	1dfb      	adds	r3, r7, #7
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	210c      	movs	r1, #12
 8001d0e:	2001      	movs	r0, #1
 8001d10:	f7ff fb9a 	bl	8001448 <GPIO_Get_Pin_Value>

	if(ButtonVal == PIN_LOW)		/*low means pressed*/
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <main+0x7c>
	{
		BootLoader_UARTReadData();
 8001d1a:	f000 f811 	bl	8001d40 <BootLoader_UARTReadData>
 8001d1e:	e001      	b.n	8001d24 <main+0x80>
	}
	else
	{
		BootLoader_JumpToUserApp();
 8001d20:	f000 f8a6 	bl	8001e70 <BootLoader_JumpToUserApp>
	}

	while(1)
 8001d24:	e7fe      	b.n	8001d24 <main+0x80>
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	20000028 	.word	0x20000028
 8001d30:	20000030 	.word	0x20000030
 8001d34:	20000040 	.word	0x20000040
 8001d38:	20000038 	.word	0x20000038
 8001d3c:	20000048 	.word	0x20000048

08001d40 <BootLoader_UARTReadData>:
	}

}

void BootLoader_UARTReadData(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b0c2      	sub	sp, #264	; 0x108
 8001d44:	af00      	add	r7, sp, #0
	/*This function it used for reading commands from the Host*/
	uint8_t  Local_u8CMDPacket[255] = {0};
 8001d46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
 8001d52:	3304      	adds	r3, #4
 8001d54:	22fb      	movs	r2, #251	; 0xfb
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 f8fc 	bl	8001f56 <memset>
	while(1)
	{
		/*Clear Command Packet every iteration*/
		memset(Local_u8CMDPacket , 0 , 255);
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 f8f6 	bl	8001f56 <memset>
		/*1st step : read the 1st byte which include the "length to follow of the command"*/
		USART_receive_byte_blocking(&uart2, Local_u8CMDPacket);
 8001d6a:	1d3b      	adds	r3, r7, #4
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	483f      	ldr	r0, [pc, #252]	; (8001e6c <BootLoader_UARTReadData+0x12c>)
 8001d70:	f7ff fd60 	bl	8001834 <USART_receive_byte_blocking>
		/*2nd step : read the rest of the command , its size is the previosly byte value*/
		for(int i = 1 ; i <= Local_u8CMDPacket[0]; i++)
 8001d74:	2301      	movs	r3, #1
 8001d76:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d7a:	e00c      	b.n	8001d96 <BootLoader_UARTReadData+0x56>
		{
			USART_receive_byte_blocking(&uart2, &Local_u8CMDPacket[i]);
 8001d7c:	1d3a      	adds	r2, r7, #4
 8001d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d82:	4413      	add	r3, r2
 8001d84:	4619      	mov	r1, r3
 8001d86:	4839      	ldr	r0, [pc, #228]	; (8001e6c <BootLoader_UARTReadData+0x12c>)
 8001d88:	f7ff fd54 	bl	8001834 <USART_receive_byte_blocking>
		for(int i = 1 ; i <= Local_u8CMDPacket[0]; i++)
 8001d8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d90:	3301      	adds	r3, #1
 8001d92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001d9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001da6:	4293      	cmp	r3, r2
 8001da8:	dde8      	ble.n	8001d7c <BootLoader_UARTReadData+0x3c>
		}
		/*3rd step : check the command code ,then handle the command*/
		switch(Local_u8CMDPacket[1]) /*this byte that include the command code*/
 8001daa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001dae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001db2:	785b      	ldrb	r3, [r3, #1]
 8001db4:	3b51      	subs	r3, #81	; 0x51
 8001db6:	2b0b      	cmp	r3, #11
 8001db8:	d8d1      	bhi.n	8001d5e <BootLoader_UARTReadData+0x1e>
 8001dba:	a201      	add	r2, pc, #4	; (adr r2, 8001dc0 <BootLoader_UARTReadData+0x80>)
 8001dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc0:	08001df1 	.word	0x08001df1
 8001dc4:	08001dfb 	.word	0x08001dfb
 8001dc8:	08001e05 	.word	0x08001e05
 8001dcc:	08001e0f 	.word	0x08001e0f
 8001dd0:	08001e19 	.word	0x08001e19
 8001dd4:	08001e23 	.word	0x08001e23
 8001dd8:	08001e2d 	.word	0x08001e2d
 8001ddc:	08001e37 	.word	0x08001e37
 8001de0:	08001e41 	.word	0x08001e41
 8001de4:	08001e4b 	.word	0x08001e4b
 8001de8:	08001e55 	.word	0x08001e55
 8001dec:	08001e5f 	.word	0x08001e5f
		{
		case BL_GET_VER    		   :
			BL_voidHandleGetVerCmd(Local_u8CMDPacket);
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fb1e 	bl	8000434 <BL_voidHandleGetVerCmd>
			break;
 8001df8:	e037      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_GET_HELP    	   :
			BL_voidHandleGetHelpCmd(Local_u8CMDPacket);
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fb47 	bl	8000490 <BL_voidHandleGetHelpCmd>
			break;
 8001e02:	e032      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_GET_CID    		   :
			BL_voidHandleGetCIDCmd(Local_u8CMDPacket);
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb84 	bl	8000514 <BL_voidHandleGetCIDCmd>
			break;
 8001e0c:	e02d      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_GET_RDP_STATUS     :
			BL_voidHandleGetRDPStatusCmd(Local_u8CMDPacket);
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7fe fbbd 	bl	8000590 <BL_voidHandleGetRDPStatusCmd>
			break;
 8001e16:	e028      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_GO_TO_ADDR    	   :
			BL_voidHandleGoToAddressCmd(Local_u8CMDPacket);
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fbea 	bl	80005f4 <BL_voidHandleGoToAddressCmd>
			break;
 8001e20:	e023      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_FLASH_ERASE   	   :
			BL_voidHandleFlashEraseCmd(Local_u8CMDPacket);
 8001e22:	1d3b      	adds	r3, r7, #4
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fc29 	bl	800067c <BL_voidHandleFlashEraseCmd>
			break;
 8001e2a:	e01e      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_MEM_WRITE    	   :
			BL_voidHandleMemWriteCmd(Local_u8CMDPacket);
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fc5c 	bl	80006ec <BL_voidHandleMemWriteCmd>
			break;
 8001e34:	e019      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_EN_RW_PROTECT      :
			BL_voidHandleEnableRWCmd(Local_u8CMDPacket);
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fc9f 	bl	800077c <BL_voidHandleEnableRWCmd>
			break;
 8001e3e:	e014      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_MEM_READ    	   :
			BL_voidHandleMemReadCmd(Local_u8CMDPacket);
 8001e40:	1d3b      	adds	r3, r7, #4
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fcd6 	bl	80007f4 <BL_voidHandleMemReadCmd>
			break;
 8001e48:	e00f      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_READ_SECTOR_STATUS :
			BL_voidHandleReadSectorStatusCmd(Local_u8CMDPacket);
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fd15 	bl	800087c <BL_voidHandleReadSectorStatusCmd>
			break;
 8001e52:	e00a      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_OTP_READ           :
			BL_voidHandleOTPReadCmd(Local_u8CMDPacket);
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fd42 	bl	80008e0 <BL_voidHandleOTPReadCmd>
			break;
 8001e5c:	e005      	b.n	8001e6a <BootLoader_UARTReadData+0x12a>
		case BL_DIS_WR_PROTECT     :
			BL_voidHandleDisableWRProtectCmd(Local_u8CMDPacket);
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe fd62 	bl	800092a <BL_voidHandleDisableWRProtectCmd>
			break;
 8001e66:	bf00      	nop
 8001e68:	e779      	b.n	8001d5e <BootLoader_UARTReadData+0x1e>
		memset(Local_u8CMDPacket , 0 , 255);
 8001e6a:	e778      	b.n	8001d5e <BootLoader_UARTReadData+0x1e>
 8001e6c:	20000048 	.word	0x20000048

08001e70 <BootLoader_JumpToUserApp>:
		}
	}
}

void BootLoader_JumpToUserApp(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
	uint32_t ResetHandlerAddress;
	//pointer that hold reset handler of user app
	void (* App_ResetHandler)(void);
	/*Configure MSP of user app*/
	uint32_t Local_u32MSPVal = *((volatile uint32_t*)(FLASH_SECTOR_2_BASE_ADDRESS));
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <BootLoader_JumpToUserApp+0x28>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	60fb      	str	r3, [r7, #12]
	/*write the address to msp register*/
	__asm volatile("MSR MSP, %0"::"r"(Local_u32MSPVal));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f383 8808 	msr	MSP, r3
	/*Get reset handler of user app*/
	ResetHandlerAddress = *((volatile uint32_t*)(FLASH_SECTOR_2_BASE_ADDRESS + 4));
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <BootLoader_JumpToUserApp+0x2c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60bb      	str	r3, [r7, #8]

	App_ResetHandler = (void*)ResetHandlerAddress;
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	607b      	str	r3, [r7, #4]

	/*jump to the user app reset handler*/
	App_ResetHandler();
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4798      	blx	r3
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	08008000 	.word	0x08008000
 8001e9c:	08008004 	.word	0x08008004

08001ea0 <SystemClock_Config>:

Std_RetType_t SystemClock_Config(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
	Std_RetType_t ret = RET_OK;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	RCC_OscInitTypedef RCC_OscInitStruct ={0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
	RCC_ClkInitTypedef RCC_ClkInitStruct ={0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]

	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.HSE_State = RCC_HSE_ON;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	617b      	str	r3, [r7, #20]
	ret = HALL_RCC_OscConfig(&RCC_OscInitStruct);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff faf8 	bl	80014c8 <HALL_RCC_OscConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	RCC_ClkInitStruct.AHBClkDivider  =RCC_SYSCLK_AHB_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.APB1ClkDivider =RCC_HCLK_APB1_DIV1;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB2ClkDivider =RCC_HCLK_APB2_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
	ret = HALL_RCC_ClockConfig(&RCC_ClkInitStruct);
 8001eea:	1d3b      	adds	r3, r7, #4
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fb4b 	bl	8001588 <HALL_RCC_ClockConfig>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	return ret;
 8001ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3728      	adds	r7, #40	; 0x28
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f04:	480d      	ldr	r0, [pc, #52]	; (8001f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f08:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f0e:	490d      	ldr	r1, [pc, #52]	; (8001f44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f10:	4a0d      	ldr	r2, [pc, #52]	; (8001f48 <LoopForever+0xe>)
  movs r3, #0
 8001f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f14:	e002      	b.n	8001f1c <LoopCopyDataInit>

08001f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f1a:	3304      	adds	r3, #4

08001f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f20:	d3f9      	bcc.n	8001f16 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f22:	4a0a      	ldr	r2, [pc, #40]	; (8001f4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f24:	4c0a      	ldr	r4, [pc, #40]	; (8001f50 <LoopForever+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f28:	e001      	b.n	8001f2e <LoopFillZerobss>

08001f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f2c:	3204      	adds	r2, #4

08001f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f30:	d3fb      	bcc.n	8001f2a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f32:	f000 f819 	bl	8001f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f36:	f7ff feb5 	bl	8001ca4 <main>

08001f3a <LoopForever>:

LoopForever:
  b LoopForever
 8001f3a:	e7fe      	b.n	8001f3a <LoopForever>
  ldr   r0, =_estack
 8001f3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f44:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001f48:	08001fdc 	.word	0x08001fdc
  ldr r2, =_sbss
 8001f4c:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001f50:	200000d8 	.word	0x200000d8

08001f54 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f54:	e7fe      	b.n	8001f54 <ADC_IRQHandler>

08001f56 <memset>:
 8001f56:	4402      	add	r2, r0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d100      	bne.n	8001f60 <memset+0xa>
 8001f5e:	4770      	bx	lr
 8001f60:	f803 1b01 	strb.w	r1, [r3], #1
 8001f64:	e7f9      	b.n	8001f5a <memset+0x4>
	...

08001f68 <__libc_init_array>:
 8001f68:	b570      	push	{r4, r5, r6, lr}
 8001f6a:	4d0d      	ldr	r5, [pc, #52]	; (8001fa0 <__libc_init_array+0x38>)
 8001f6c:	4c0d      	ldr	r4, [pc, #52]	; (8001fa4 <__libc_init_array+0x3c>)
 8001f6e:	1b64      	subs	r4, r4, r5
 8001f70:	10a4      	asrs	r4, r4, #2
 8001f72:	2600      	movs	r6, #0
 8001f74:	42a6      	cmp	r6, r4
 8001f76:	d109      	bne.n	8001f8c <__libc_init_array+0x24>
 8001f78:	4d0b      	ldr	r5, [pc, #44]	; (8001fa8 <__libc_init_array+0x40>)
 8001f7a:	4c0c      	ldr	r4, [pc, #48]	; (8001fac <__libc_init_array+0x44>)
 8001f7c:	f000 f818 	bl	8001fb0 <_init>
 8001f80:	1b64      	subs	r4, r4, r5
 8001f82:	10a4      	asrs	r4, r4, #2
 8001f84:	2600      	movs	r6, #0
 8001f86:	42a6      	cmp	r6, r4
 8001f88:	d105      	bne.n	8001f96 <__libc_init_array+0x2e>
 8001f8a:	bd70      	pop	{r4, r5, r6, pc}
 8001f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f90:	4798      	blx	r3
 8001f92:	3601      	adds	r6, #1
 8001f94:	e7ee      	b.n	8001f74 <__libc_init_array+0xc>
 8001f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f9a:	4798      	blx	r3
 8001f9c:	3601      	adds	r6, #1
 8001f9e:	e7f2      	b.n	8001f86 <__libc_init_array+0x1e>
 8001fa0:	08001fd4 	.word	0x08001fd4
 8001fa4:	08001fd4 	.word	0x08001fd4
 8001fa8:	08001fd4 	.word	0x08001fd4
 8001fac:	08001fd8 	.word	0x08001fd8

08001fb0 <_init>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr

08001fbc <_fini>:
 8001fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fbe:	bf00      	nop
 8001fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fc2:	bc08      	pop	{r3}
 8001fc4:	469e      	mov	lr, r3
 8001fc6:	4770      	bx	lr
